
CAN_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045b8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  080046c4  080046c4  000146c4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004be4  08004be4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004be4  08004be4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004be4  08004be4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004be4  08004be4  00014be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004be8  08004be8  00014be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004bec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002034  20000010  08004bf8  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002044  08004bf8  00022044  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa70  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000342f  00000000  00000000  0002faa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00007058  00000000  00000000  00032ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a60  00000000  00000000  00039f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f80  00000000  00000000  0003a990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015b30  00000000  00000000  0003b910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011541  00000000  00000000  00051440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007212d  00000000  00000000  00062981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000d4aae  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001d24  00000000  00000000  000d4b00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080046ac 	.word	0x080046ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080046ac 	.word	0x080046ac

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__gesf2>:
 8000618:	f04f 3cff 	mov.w	ip, #4294967295
 800061c:	e006      	b.n	800062c <__cmpsf2+0x4>
 800061e:	bf00      	nop

08000620 <__lesf2>:
 8000620:	f04f 0c01 	mov.w	ip, #1
 8000624:	e002      	b.n	800062c <__cmpsf2+0x4>
 8000626:	bf00      	nop

08000628 <__cmpsf2>:
 8000628:	f04f 0c01 	mov.w	ip, #1
 800062c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000630:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000634:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000638:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800063c:	bf18      	it	ne
 800063e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000642:	d011      	beq.n	8000668 <__cmpsf2+0x40>
 8000644:	b001      	add	sp, #4
 8000646:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800064a:	bf18      	it	ne
 800064c:	ea90 0f01 	teqne	r0, r1
 8000650:	bf58      	it	pl
 8000652:	ebb2 0003 	subspl.w	r0, r2, r3
 8000656:	bf88      	it	hi
 8000658:	17c8      	asrhi	r0, r1, #31
 800065a:	bf38      	it	cc
 800065c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000660:	bf18      	it	ne
 8000662:	f040 0001 	orrne.w	r0, r0, #1
 8000666:	4770      	bx	lr
 8000668:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800066c:	d102      	bne.n	8000674 <__cmpsf2+0x4c>
 800066e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000672:	d105      	bne.n	8000680 <__cmpsf2+0x58>
 8000674:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000678:	d1e4      	bne.n	8000644 <__cmpsf2+0x1c>
 800067a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800067e:	d0e1      	beq.n	8000644 <__cmpsf2+0x1c>
 8000680:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <__aeabi_cfrcmple>:
 8000688:	4684      	mov	ip, r0
 800068a:	4608      	mov	r0, r1
 800068c:	4661      	mov	r1, ip
 800068e:	e7ff      	b.n	8000690 <__aeabi_cfcmpeq>

08000690 <__aeabi_cfcmpeq>:
 8000690:	b50f      	push	{r0, r1, r2, r3, lr}
 8000692:	f7ff ffc9 	bl	8000628 <__cmpsf2>
 8000696:	2800      	cmp	r0, #0
 8000698:	bf48      	it	mi
 800069a:	f110 0f00 	cmnmi.w	r0, #0
 800069e:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006a0 <__aeabi_fcmpeq>:
 80006a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a4:	f7ff fff4 	bl	8000690 <__aeabi_cfcmpeq>
 80006a8:	bf0c      	ite	eq
 80006aa:	2001      	moveq	r0, #1
 80006ac:	2000      	movne	r0, #0
 80006ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b2:	bf00      	nop

080006b4 <__aeabi_fcmplt>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff ffea 	bl	8000690 <__aeabi_cfcmpeq>
 80006bc:	bf34      	ite	cc
 80006be:	2001      	movcc	r0, #1
 80006c0:	2000      	movcs	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmple>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffe0 	bl	8000690 <__aeabi_cfcmpeq>
 80006d0:	bf94      	ite	ls
 80006d2:	2001      	movls	r0, #1
 80006d4:	2000      	movhi	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmpge>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffd2 	bl	8000688 <__aeabi_cfrcmple>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpgt>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffc8 	bl	8000688 <__aeabi_cfrcmple>
 80006f8:	bf34      	ite	cc
 80006fa:	2001      	movcc	r0, #1
 80006fc:	2000      	movcs	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_f2uiz>:
 8000704:	0042      	lsls	r2, r0, #1
 8000706:	d20e      	bcs.n	8000726 <__aeabi_f2uiz+0x22>
 8000708:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800070c:	d30b      	bcc.n	8000726 <__aeabi_f2uiz+0x22>
 800070e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000712:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000716:	d409      	bmi.n	800072c <__aeabi_f2uiz+0x28>
 8000718:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800071c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000720:	fa23 f002 	lsr.w	r0, r3, r2
 8000724:	4770      	bx	lr
 8000726:	f04f 0000 	mov.w	r0, #0
 800072a:	4770      	bx	lr
 800072c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000730:	d101      	bne.n	8000736 <__aeabi_f2uiz+0x32>
 8000732:	0242      	lsls	r2, r0, #9
 8000734:	d102      	bne.n	800073c <__aeabi_f2uiz+0x38>
 8000736:	f04f 30ff 	mov.w	r0, #4294967295
 800073a:	4770      	bx	lr
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop

08000744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000744:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <HAL_InitTick+0x3c>)
{
 8000748:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800074a:	7818      	ldrb	r0, [r3, #0]
 800074c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000750:	fbb3 f3f0 	udiv	r3, r3, r0
 8000754:	4a0b      	ldr	r2, [pc, #44]	; (8000784 <HAL_InitTick+0x40>)
 8000756:	6810      	ldr	r0, [r2, #0]
 8000758:	fbb0 f0f3 	udiv	r0, r0, r3
 800075c:	f000 fc08 	bl	8000f70 <HAL_SYSTICK_Config>
 8000760:	4604      	mov	r4, r0
 8000762:	b958      	cbnz	r0, 800077c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000764:	2d0f      	cmp	r5, #15
 8000766:	d809      	bhi.n	800077c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000768:	4602      	mov	r2, r0
 800076a:	4629      	mov	r1, r5
 800076c:	f04f 30ff 	mov.w	r0, #4294967295
 8000770:	f000 fbaa 	bl	8000ec8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000774:	4620      	mov	r0, r4
 8000776:	4b04      	ldr	r3, [pc, #16]	; (8000788 <HAL_InitTick+0x44>)
 8000778:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800077a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800077c:	2001      	movs	r0, #1
 800077e:	e7fc      	b.n	800077a <HAL_InitTick+0x36>
 8000780:	20000000 	.word	0x20000000
 8000784:	20000008 	.word	0x20000008
 8000788:	20000004 	.word	0x20000004

0800078c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800078c:	4a07      	ldr	r2, [pc, #28]	; (80007ac <HAL_Init+0x20>)
{
 800078e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000790:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000792:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000794:	f043 0310 	orr.w	r3, r3, #16
 8000798:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800079a:	f000 fb83 	bl	8000ea4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800079e:	2001      	movs	r0, #1
 80007a0:	f7ff ffd0 	bl	8000744 <HAL_InitTick>
  HAL_MspInit();
 80007a4:	f003 fc82 	bl	80040ac <HAL_MspInit>
}
 80007a8:	2000      	movs	r0, #0
 80007aa:	bd08      	pop	{r3, pc}
 80007ac:	40022000 	.word	0x40022000

080007b0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80007b0:	4a03      	ldr	r2, [pc, #12]	; (80007c0 <HAL_IncTick+0x10>)
 80007b2:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <HAL_IncTick+0x14>)
 80007b4:	6811      	ldr	r1, [r2, #0]
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	440b      	add	r3, r1
 80007ba:	6013      	str	r3, [r2, #0]
}
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	2000002c 	.word	0x2000002c
 80007c4:	20000000 	.word	0x20000000

080007c8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80007c8:	4b01      	ldr	r3, [pc, #4]	; (80007d0 <HAL_GetTick+0x8>)
 80007ca:	6818      	ldr	r0, [r3, #0]
}
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	2000002c 	.word	0x2000002c

080007d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007d4:	b538      	push	{r3, r4, r5, lr}
 80007d6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80007d8:	f7ff fff6 	bl	80007c8 <HAL_GetTick>
 80007dc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007de:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80007e0:	bf1e      	ittt	ne
 80007e2:	4b04      	ldrne	r3, [pc, #16]	; (80007f4 <HAL_Delay+0x20>)
 80007e4:	781b      	ldrbne	r3, [r3, #0]
 80007e6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007e8:	f7ff ffee 	bl	80007c8 <HAL_GetTick>
 80007ec:	1b43      	subs	r3, r0, r5
 80007ee:	42a3      	cmp	r3, r4
 80007f0:	d3fa      	bcc.n	80007e8 <HAL_Delay+0x14>
  {
  }
}
 80007f2:	bd38      	pop	{r3, r4, r5, pc}
 80007f4:	20000000 	.word	0x20000000

080007f8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80007f8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80007fa:	4604      	mov	r4, r0
 80007fc:	2800      	cmp	r0, #0
 80007fe:	d06e      	beq.n	80008de <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000800:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000804:	b90b      	cbnz	r3, 800080a <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000806:	f003 f979 	bl	8003afc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800080a:	6822      	ldr	r2, [r4, #0]
 800080c:	6813      	ldr	r3, [r2, #0]
 800080e:	f023 0302 	bic.w	r3, r3, #2
 8000812:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000814:	f7ff ffd8 	bl	80007c8 <HAL_GetTick>
 8000818:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800081a:	6823      	ldr	r3, [r4, #0]
 800081c:	685a      	ldr	r2, [r3, #4]
 800081e:	0791      	lsls	r1, r2, #30
 8000820:	d451      	bmi.n	80008c6 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	f042 0201 	orr.w	r2, r2, #1
 8000828:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800082a:	f7ff ffcd 	bl	80007c8 <HAL_GetTick>
 800082e:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000830:	6823      	ldr	r3, [r4, #0]
 8000832:	685a      	ldr	r2, [r3, #4]
 8000834:	07d2      	lsls	r2, r2, #31
 8000836:	d554      	bpl.n	80008e2 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000838:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800083a:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800083c:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	bf0c      	ite	eq
 8000842:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000846:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 800084a:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 800084c:	7e62      	ldrb	r2, [r4, #25]
 800084e:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	bf0c      	ite	eq
 8000854:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000858:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 800085c:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 800085e:	7ea2      	ldrb	r2, [r4, #26]
 8000860:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	bf0c      	ite	eq
 8000866:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800086a:	f022 0220 	bicne.w	r2, r2, #32
 800086e:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000870:	7ee2      	ldrb	r2, [r4, #27]
 8000872:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	bf0c      	ite	eq
 8000878:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800087c:	f042 0210 	orrne.w	r2, r2, #16
 8000880:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000882:	7f22      	ldrb	r2, [r4, #28]
 8000884:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	bf0c      	ite	eq
 800088a:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800088e:	f022 0208 	bicne.w	r2, r2, #8
 8000892:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000894:	7f62      	ldrb	r2, [r4, #29]
 8000896:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	bf0c      	ite	eq
 800089c:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008a0:	f022 0204 	bicne.w	r2, r2, #4
 80008a4:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80008a6:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80008aa:	430a      	orrs	r2, r1
 80008ac:	6921      	ldr	r1, [r4, #16]
 80008ae:	430a      	orrs	r2, r1
 80008b0:	6961      	ldr	r1, [r4, #20]
 80008b2:	430a      	orrs	r2, r1
 80008b4:	6861      	ldr	r1, [r4, #4]
 80008b6:	3901      	subs	r1, #1
 80008b8:	430a      	orrs	r2, r1
 80008ba:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80008bc:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80008be:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80008c0:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 80008c4:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008c6:	f7ff ff7f 	bl	80007c8 <HAL_GetTick>
 80008ca:	1b40      	subs	r0, r0, r5
 80008cc:	280a      	cmp	r0, #10
 80008ce:	d9a4      	bls.n	800081a <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80008d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d6:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80008d8:	2305      	movs	r3, #5
 80008da:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 80008de:	2001      	movs	r0, #1
 80008e0:	e7f0      	b.n	80008c4 <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008e2:	f7ff ff71 	bl	80007c8 <HAL_GetTick>
 80008e6:	1b40      	subs	r0, r0, r5
 80008e8:	280a      	cmp	r0, #10
 80008ea:	d9a1      	bls.n	8000830 <HAL_CAN_Init+0x38>
 80008ec:	e7f0      	b.n	80008d0 <HAL_CAN_Init+0xd8>

080008ee <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80008ee:	b570      	push	{r4, r5, r6, lr}
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 80008f0:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 80008f4:	3b01      	subs	r3, #1
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d862      	bhi.n	80009c0 <HAL_CAN_ConfigFilter+0xd2>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80008fa:	2401      	movs	r4, #1
  CAN_TypeDef *can_ip = hcan->Instance;
 80008fc:	6803      	ldr	r3, [r0, #0]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80008fe:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000902:	f042 0201 	orr.w	r2, r2, #1
 8000906:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800090a:	694a      	ldr	r2, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800090c:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000910:	f002 001f 	and.w	r0, r2, #31
 8000914:	fa04 f000 	lsl.w	r0, r4, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000918:	ea25 0500 	bic.w	r5, r5, r0
 800091c:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000920:	69cd      	ldr	r5, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000922:	43c4      	mvns	r4, r0
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000924:	bb85      	cbnz	r5, 8000988 <HAL_CAN_ConfigFilter+0x9a>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000926:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800092a:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800092c:	4025      	ands	r5, r4
 800092e:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000932:	888d      	ldrh	r5, [r1, #4]
 8000934:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000938:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800093c:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000940:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000942:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000944:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000948:	f8c2 5244 	str.w	r5, [r2, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800094c:	698a      	ldr	r2, [r1, #24]
 800094e:	bb6a      	cbnz	r2, 80009ac <HAL_CAN_ConfigFilter+0xbe>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000950:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000954:	4022      	ands	r2, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000956:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800095a:	690a      	ldr	r2, [r1, #16]
 800095c:	bb52      	cbnz	r2, 80009b4 <HAL_CAN_ConfigFilter+0xc6>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800095e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000962:	4014      	ands	r4, r2
 8000964:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000968:	6a0a      	ldr	r2, [r1, #32]
 800096a:	2a01      	cmp	r2, #1
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800096c:	bf02      	ittt	eq
 800096e:	f8d3 221c 	ldreq.w	r2, [r3, #540]	; 0x21c
 8000972:	4310      	orreq	r0, r2
 8000974:	f8c3 021c 	streq.w	r0, [r3, #540]	; 0x21c

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);

    /* Return function status */
    return HAL_OK;
 8000978:	2000      	movs	r0, #0
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800097a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800097e:	f022 0201 	bic.w	r2, r2, #1
 8000982:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8000986:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000988:	2d01      	cmp	r5, #1
 800098a:	d1df      	bne.n	800094c <HAL_CAN_ConfigFilter+0x5e>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800098c:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000990:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000992:	4305      	orrs	r5, r0
 8000994:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000998:	888d      	ldrh	r5, [r1, #4]
 800099a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800099e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009a2:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009a6:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80009a8:	898d      	ldrh	r5, [r1, #12]
 80009aa:	e7cb      	b.n	8000944 <HAL_CAN_ConfigFilter+0x56>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80009ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80009b0:	4302      	orrs	r2, r0
 80009b2:	e7d0      	b.n	8000956 <HAL_CAN_ConfigFilter+0x68>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80009b4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80009b8:	4302      	orrs	r2, r0
 80009ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80009be:	e7d3      	b.n	8000968 <HAL_CAN_ConfigFilter+0x7a>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80009c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80009c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009c6:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 80009c8:	2001      	movs	r0, #1
 80009ca:	e7dc      	b.n	8000986 <HAL_CAN_ConfigFilter+0x98>

080009cc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80009cc:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80009ce:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 80009d2:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	b2dd      	uxtb	r5, r3
 80009d8:	d120      	bne.n	8000a1c <HAL_CAN_Start+0x50>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80009da:	2302      	movs	r3, #2

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80009dc:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 80009de:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80009e2:	6813      	ldr	r3, [r2, #0]
 80009e4:	f023 0301 	bic.w	r3, r3, #1
 80009e8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80009ea:	f7ff feed 	bl	80007c8 <HAL_GetTick>
 80009ee:	4606      	mov	r6, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80009f0:	6823      	ldr	r3, [r4, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	f013 0301 	ands.w	r3, r3, #1
 80009f8:	d102      	bne.n	8000a00 <HAL_CAN_Start+0x34>

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;

    /* Return function status */
    return HAL_OK;
 80009fa:	461d      	mov	r5, r3
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80009fc:	6263      	str	r3, [r4, #36]	; 0x24
    return HAL_OK;
 80009fe:	e00b      	b.n	8000a18 <HAL_CAN_Start+0x4c>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a00:	f7ff fee2 	bl	80007c8 <HAL_GetTick>
 8000a04:	1b80      	subs	r0, r0, r6
 8000a06:	280a      	cmp	r0, #10
 8000a08:	d9f2      	bls.n	80009f0 <HAL_CAN_Start+0x24>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a10:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8000a12:	2305      	movs	r3, #5
 8000a14:	f884 3020 	strb.w	r3, [r4, #32]
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 8000a18:	4628      	mov	r0, r5
 8000a1a:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000a1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8000a1e:	2501      	movs	r5, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000a20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a24:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8000a26:	e7f7      	b.n	8000a18 <HAL_CAN_Start+0x4c>

08000a28 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8000a28:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8000a2a:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8000a2e:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	d122      	bne.n	8000a7a <HAL_CAN_Stop+0x52>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a34:	6802      	ldr	r2, [r0, #0]
 8000a36:	6813      	ldr	r3, [r2, #0]
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000a3e:	f7ff fec3 	bl	80007c8 <HAL_GetTick>
 8000a42:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a44:	6823      	ldr	r3, [r4, #0]
 8000a46:	685a      	ldr	r2, [r3, #4]
 8000a48:	07d2      	lsls	r2, r2, #31
 8000a4a:	d508      	bpl.n	8000a5e <HAL_CAN_Stop+0x36>
        return HAL_ERROR;
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a4c:	681a      	ldr	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;

    /* Return function status */
    return HAL_OK;
 8000a4e:	2000      	movs	r0, #0
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a50:	f022 0202 	bic.w	r2, r2, #2
 8000a54:	601a      	str	r2, [r3, #0]
    hcan->State = HAL_CAN_STATE_READY;
 8000a56:	2301      	movs	r3, #1
 8000a58:	f884 3020 	strb.w	r3, [r4, #32]
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;

    return HAL_ERROR;
  }
}
 8000a5c:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a5e:	f7ff feb3 	bl	80007c8 <HAL_GetTick>
 8000a62:	1b40      	subs	r0, r0, r5
 8000a64:	280a      	cmp	r0, #10
 8000a66:	d9ed      	bls.n	8000a44 <HAL_CAN_Stop+0x1c>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a6e:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8000a70:	2305      	movs	r3, #5
 8000a72:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8000a76:	2001      	movs	r0, #1
 8000a78:	e7f0      	b.n	8000a5c <HAL_CAN_Stop+0x34>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8000a7a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000a7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a80:	6243      	str	r3, [r0, #36]	; 0x24
 8000a82:	e7f8      	b.n	8000a76 <HAL_CAN_Stop+0x4e>

08000a84 <HAL_CAN_DeInit>:
{
 8000a84:	b510      	push	{r4, lr}
  if (hcan == NULL)
 8000a86:	4604      	mov	r4, r0
 8000a88:	b170      	cbz	r0, 8000aa8 <HAL_CAN_DeInit+0x24>
  (void)HAL_CAN_Stop(hcan);
 8000a8a:	f7ff ffcd 	bl	8000a28 <HAL_CAN_Stop>
  HAL_CAN_MspDeInit(hcan);
 8000a8e:	4620      	mov	r0, r4
 8000a90:	f003 f880 	bl	8003b94 <HAL_CAN_MspDeInit>
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a94:	2000      	movs	r0, #0
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 8000a96:	6822      	ldr	r2, [r4, #0]
 8000a98:	6813      	ldr	r3, [r2, #0]
 8000a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a9e:	6013      	str	r3, [r2, #0]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000aa0:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_RESET;
 8000aa2:	f884 0020 	strb.w	r0, [r4, #32]
}
 8000aa6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	e7fc      	b.n	8000aa6 <HAL_CAN_DeInit+0x22>

08000aac <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000aac:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000aae:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000ab2:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ab4:	3d01      	subs	r5, #1
 8000ab6:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000ab8:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 8000aba:	d841      	bhi.n	8000b40 <HAL_CAN_AddTxMessage+0x94>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000abc:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8000ac0:	d03a      	beq.n	8000b38 <HAL_CAN_AddTxMessage+0x8c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000ac2:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000ac6:	2c03      	cmp	r4, #3
 8000ac8:	f04f 0501 	mov.w	r5, #1
 8000acc:	d105      	bne.n	8000ada <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000ace:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000ad0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ad4:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	e028      	b.n	8000b2c <HAL_CAN_AddTxMessage+0x80>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000ada:	40a5      	lsls	r5, r4
 8000adc:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 8000ade:	e9d1 0702 	ldrd	r0, r7, [r1, #8]
 8000ae2:	f104 0318 	add.w	r3, r4, #24
 8000ae6:	bb10      	cbnz	r0, 8000b2e <HAL_CAN_AddTxMessage+0x82>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000ae8:	6808      	ldr	r0, [r1, #0]
 8000aea:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000aee:	011b      	lsls	r3, r3, #4
 8000af0:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000af2:	0120      	lsls	r0, r4, #4
 8000af4:	eb06 1304 	add.w	r3, r6, r4, lsl #4
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000af8:	4406      	add	r6, r0
      return HAL_OK;
 8000afa:	2000      	movs	r0, #0
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000afc:	690d      	ldr	r5, [r1, #16]
 8000afe:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000b02:	7d09      	ldrb	r1, [r1, #20]
 8000b04:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000b06:	bf02      	ittt	eq
 8000b08:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 8000b0c:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 8000b10:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000b14:	6851      	ldr	r1, [r2, #4]
 8000b16:	f8c6 118c 	str.w	r1, [r6, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000b1a:	6812      	ldr	r2, [r2, #0]
 8000b1c:	f8c6 2188 	str.w	r2, [r6, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000b20:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8000b24:	f042 0201 	orr.w	r2, r2, #1
 8000b28:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8000b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b2e:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8000b30:	4338      	orrs	r0, r7
 8000b32:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 8000b36:	e7da      	b.n	8000aee <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000b38:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000b3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b3e:	e7c9      	b.n	8000ad4 <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b40:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000b42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b46:	e7c5      	b.n	8000ad4 <HAL_CAN_AddTxMessage+0x28>

08000b48 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000b48:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b4a:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000b4e:	3c01      	subs	r4, #1
 8000b50:	2c01      	cmp	r4, #1
 8000b52:	d86c      	bhi.n	8000c2e <HAL_CAN_GetRxMessage+0xe6>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000b54:	6806      	ldr	r6, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000b56:	b941      	cbnz	r1, 8000b6a <HAL_CAN_GetRxMessage+0x22>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000b58:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000b5a:	07a4      	lsls	r4, r4, #30
 8000b5c:	d107      	bne.n	8000b6e <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000b5e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000b60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b64:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000b66:	2001      	movs	r0, #1
 8000b68:	e056      	b.n	8000c18 <HAL_CAN_GetRxMessage+0xd0>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000b6a:	6934      	ldr	r4, [r6, #16]
 8000b6c:	e7f5      	b.n	8000b5a <HAL_CAN_GetRxMessage+0x12>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000b6e:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 8000b72:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000b76:	010c      	lsls	r4, r1, #4
 8000b78:	f007 0704 	and.w	r7, r7, #4
 8000b7c:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000b7e:	2f00      	cmp	r7, #0
 8000b80:	d14b      	bne.n	8000c1a <HAL_CAN_GetRxMessage+0xd2>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000b82:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000b86:	0d7f      	lsrs	r7, r7, #21
 8000b88:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000b8a:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000b8e:	4426      	add	r6, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000b90:	f007 0702 	and.w	r7, r7, #2
 8000b94:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000b96:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 8000b9a:	f007 070f 	and.w	r7, r7, #15
 8000b9e:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000ba0:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000ba4:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000ba8:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000bac:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000bae:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000bb0:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000bb2:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 8000bb6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000bb8:	6802      	ldr	r2, [r0, #0]
 8000bba:	4422      	add	r2, r4
 8000bbc:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000bc0:	0a12      	lsrs	r2, r2, #8
 8000bc2:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000bc4:	6802      	ldr	r2, [r0, #0]
 8000bc6:	4422      	add	r2, r4
 8000bc8:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000bcc:	0c12      	lsrs	r2, r2, #16
 8000bce:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000bd0:	6802      	ldr	r2, [r0, #0]
 8000bd2:	4422      	add	r2, r4
 8000bd4:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000bd8:	0e12      	lsrs	r2, r2, #24
 8000bda:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000bdc:	6802      	ldr	r2, [r0, #0]
 8000bde:	4422      	add	r2, r4
 8000be0:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000be4:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000be6:	6802      	ldr	r2, [r0, #0]
 8000be8:	4422      	add	r2, r4
 8000bea:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000bee:	0a12      	lsrs	r2, r2, #8
 8000bf0:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000bf2:	6802      	ldr	r2, [r0, #0]
 8000bf4:	4422      	add	r2, r4
 8000bf6:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000bfa:	0c12      	lsrs	r2, r2, #16
 8000bfc:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000bfe:	6802      	ldr	r2, [r0, #0]
 8000c00:	4422      	add	r2, r4
 8000c02:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000c06:	0e12      	lsrs	r2, r2, #24
 8000c08:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000c0a:	6803      	ldr	r3, [r0, #0]
 8000c0c:	b951      	cbnz	r1, 8000c24 <HAL_CAN_GetRxMessage+0xdc>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000c0e:	68da      	ldr	r2, [r3, #12]
 8000c10:	f042 0220 	orr.w	r2, r2, #32
 8000c14:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 8000c16:	2000      	movs	r0, #0
  }
}
 8000c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000c1a:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000c1e:	08ff      	lsrs	r7, r7, #3
 8000c20:	6057      	str	r7, [r2, #4]
 8000c22:	e7b2      	b.n	8000b8a <HAL_CAN_GetRxMessage+0x42>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000c24:	691a      	ldr	r2, [r3, #16]
 8000c26:	f042 0220 	orr.w	r2, r2, #32
 8000c2a:	611a      	str	r2, [r3, #16]
 8000c2c:	e7f3      	b.n	8000c16 <HAL_CAN_GetRxMessage+0xce>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c2e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c34:	e796      	b.n	8000b64 <HAL_CAN_GetRxMessage+0x1c>

08000c36 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c36:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d805      	bhi.n	8000c4c <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000c40:	6802      	ldr	r2, [r0, #0]

    /* Return function status */
    return HAL_OK;
 8000c42:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000c44:	6953      	ldr	r3, [r2, #20]
 8000c46:	4319      	orrs	r1, r3
 8000c48:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8000c4a:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000c4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c52:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000c54:	2001      	movs	r0, #1
  }
}
 8000c56:	4770      	bx	lr

08000c58 <HAL_CAN_TxMailbox0AbortCallback>:
 8000c58:	4770      	bx	lr

08000c5a <HAL_CAN_TxMailbox1AbortCallback>:
 8000c5a:	4770      	bx	lr

08000c5c <HAL_CAN_TxMailbox2AbortCallback>:
 8000c5c:	4770      	bx	lr

08000c5e <HAL_CAN_SleepCallback>:
 8000c5e:	4770      	bx	lr

08000c60 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8000c60:	4770      	bx	lr

08000c62 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000c62:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000c66:	6803      	ldr	r3, [r0, #0]
{
 8000c68:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000c6a:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000c6c:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000c70:	f016 0401 	ands.w	r4, r6, #1
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000c74:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000c76:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000c7a:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000c7e:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000c82:	d022      	beq.n	8000cca <HAL_CAN_IRQHandler+0x68>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000c84:	f017 0401 	ands.w	r4, r7, #1
 8000c88:	d007      	beq.n	8000c9a <HAL_CAN_IRQHandler+0x38>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000c8a:	2201      	movs	r2, #1

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000c8c:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000c8e:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000c90:	f140 80a5 	bpl.w	8000dde <HAL_CAN_IRQHandler+0x17c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000c94:	f001 fc80 	bl	8002598 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000c98:	2400      	movs	r4, #0
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000c9a:	05fb      	lsls	r3, r7, #23
 8000c9c:	d509      	bpl.n	8000cb2 <HAL_CAN_IRQHandler+0x50>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000c9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ca2:	682b      	ldr	r3, [r5, #0]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000ca4:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000ca6:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000ca8:	f140 80a7 	bpl.w	8000dfa <HAL_CAN_IRQHandler+0x198>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000cac:	4628      	mov	r0, r5
 8000cae:	f001 fc74 	bl	800259a <HAL_CAN_TxMailbox1CompleteCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000cb2:	03fb      	lsls	r3, r7, #15
 8000cb4:	d509      	bpl.n	8000cca <HAL_CAN_IRQHandler+0x68>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000cb6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cba:	682b      	ldr	r3, [r5, #0]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000cbc:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000cbe:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000cc0:	f140 80a9 	bpl.w	8000e16 <HAL_CAN_IRQHandler+0x1b4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000cc4:	4628      	mov	r0, r5
 8000cc6:	f001 fc69 	bl	800259c <HAL_CAN_TxMailbox2CompleteCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000cca:	0733      	lsls	r3, r6, #28
 8000ccc:	d507      	bpl.n	8000cde <HAL_CAN_IRQHandler+0x7c>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000cce:	f01b 0f10 	tst.w	fp, #16
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000cd2:	bf1f      	itttt	ne
 8000cd4:	2210      	movne	r2, #16
 8000cd6:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000cd8:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000cdc:	60da      	strne	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000cde:	0777      	lsls	r7, r6, #29
 8000ce0:	d508      	bpl.n	8000cf4 <HAL_CAN_IRQHandler+0x92>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000ce2:	f01b 0f08 	tst.w	fp, #8
 8000ce6:	d005      	beq.n	8000cf4 <HAL_CAN_IRQHandler+0x92>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000ce8:	2208      	movs	r2, #8
 8000cea:	682b      	ldr	r3, [r5, #0]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000cec:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000cee:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000cf0:	f003 f870 	bl	8003dd4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000cf4:	07b0      	lsls	r0, r6, #30
 8000cf6:	d506      	bpl.n	8000d06 <HAL_CAN_IRQHandler+0xa4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000cf8:	682b      	ldr	r3, [r5, #0]
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	0799      	lsls	r1, r3, #30
 8000cfe:	d002      	beq.n	8000d06 <HAL_CAN_IRQHandler+0xa4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000d00:	4628      	mov	r0, r5
 8000d02:	f003 f82d 	bl	8003d60 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000d06:	0672      	lsls	r2, r6, #25
 8000d08:	d507      	bpl.n	8000d1a <HAL_CAN_IRQHandler+0xb8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000d0a:	f01a 0f10 	tst.w	sl, #16
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000d0e:	bf1f      	itttt	ne
 8000d10:	2210      	movne	r2, #16
 8000d12:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000d14:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000d18:	611a      	strne	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000d1a:	06b3      	lsls	r3, r6, #26
 8000d1c:	d508      	bpl.n	8000d30 <HAL_CAN_IRQHandler+0xce>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000d1e:	f01a 0f08 	tst.w	sl, #8
 8000d22:	d005      	beq.n	8000d30 <HAL_CAN_IRQHandler+0xce>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000d24:	2208      	movs	r2, #8
 8000d26:	682b      	ldr	r3, [r5, #0]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000d28:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000d2a:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000d2c:	f003 f854 	bl	8003dd8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000d30:	06f7      	lsls	r7, r6, #27
 8000d32:	d506      	bpl.n	8000d42 <HAL_CAN_IRQHandler+0xe0>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000d34:	682b      	ldr	r3, [r5, #0]
 8000d36:	691b      	ldr	r3, [r3, #16]
 8000d38:	0798      	lsls	r0, r3, #30
 8000d3a:	d002      	beq.n	8000d42 <HAL_CAN_IRQHandler+0xe0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000d3c:	4628      	mov	r0, r5
 8000d3e:	f002 ffd5 	bl	8003cec <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000d42:	03b1      	lsls	r1, r6, #14
 8000d44:	d508      	bpl.n	8000d58 <HAL_CAN_IRQHandler+0xf6>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000d46:	f019 0f10 	tst.w	r9, #16
 8000d4a:	d005      	beq.n	8000d58 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000d4c:	2210      	movs	r2, #16
 8000d4e:	682b      	ldr	r3, [r5, #0]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000d50:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000d52:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8000d54:	f7ff ff83 	bl	8000c5e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000d58:	03f2      	lsls	r2, r6, #15
 8000d5a:	d508      	bpl.n	8000d6e <HAL_CAN_IRQHandler+0x10c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000d5c:	f019 0f08 	tst.w	r9, #8
 8000d60:	d005      	beq.n	8000d6e <HAL_CAN_IRQHandler+0x10c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000d62:	2208      	movs	r2, #8
 8000d64:	682b      	ldr	r3, [r5, #0]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000d66:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000d68:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000d6a:	f7ff ff79 	bl	8000c60 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000d6e:	0433      	lsls	r3, r6, #16
 8000d70:	d52c      	bpl.n	8000dcc <HAL_CAN_IRQHandler+0x16a>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000d72:	f019 0f04 	tst.w	r9, #4
 8000d76:	682a      	ldr	r2, [r5, #0]
 8000d78:	d026      	beq.n	8000dc8 <HAL_CAN_IRQHandler+0x166>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000d7a:	05f7      	lsls	r7, r6, #23
 8000d7c:	d504      	bpl.n	8000d88 <HAL_CAN_IRQHandler+0x126>
 8000d7e:	f018 0f01 	tst.w	r8, #1
          ((esrflags & CAN_ESR_EWGF) != 0U))
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000d82:	bf18      	it	ne
 8000d84:	f044 0401 	orrne.w	r4, r4, #1

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000d88:	05b0      	lsls	r0, r6, #22
 8000d8a:	d504      	bpl.n	8000d96 <HAL_CAN_IRQHandler+0x134>
 8000d8c:	f018 0f02 	tst.w	r8, #2
          ((esrflags & CAN_ESR_EPVF) != 0U))
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000d90:	bf18      	it	ne
 8000d92:	f044 0402 	orrne.w	r4, r4, #2

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000d96:	0571      	lsls	r1, r6, #21
 8000d98:	d504      	bpl.n	8000da4 <HAL_CAN_IRQHandler+0x142>
 8000d9a:	f018 0f04 	tst.w	r8, #4
          ((esrflags & CAN_ESR_BOFF) != 0U))
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000d9e:	bf18      	it	ne
 8000da0:	f044 0404 	orrne.w	r4, r4, #4

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000da4:	0533      	lsls	r3, r6, #20
 8000da6:	d50f      	bpl.n	8000dc8 <HAL_CAN_IRQHandler+0x166>
 8000da8:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 8000dac:	d00c      	beq.n	8000dc8 <HAL_CAN_IRQHandler+0x166>
          ((esrflags & CAN_ESR_LEC) != 0U))
      {
        switch (esrflags & CAN_ESR_LEC)
 8000dae:	2b40      	cmp	r3, #64	; 0x40
 8000db0:	d04f      	beq.n	8000e52 <HAL_CAN_IRQHandler+0x1f0>
 8000db2:	d83e      	bhi.n	8000e32 <HAL_CAN_IRQHandler+0x1d0>
 8000db4:	2b20      	cmp	r3, #32
 8000db6:	d046      	beq.n	8000e46 <HAL_CAN_IRQHandler+0x1e4>
 8000db8:	2b30      	cmp	r3, #48	; 0x30
 8000dba:	d047      	beq.n	8000e4c <HAL_CAN_IRQHandler+0x1ea>
 8000dbc:	2b10      	cmp	r3, #16
 8000dbe:	d03f      	beq.n	8000e40 <HAL_CAN_IRQHandler+0x1de>
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000dc0:	6993      	ldr	r3, [r2, #24]
 8000dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000dc6:	6193      	str	r3, [r2, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000dc8:	2304      	movs	r3, #4
 8000dca:	6053      	str	r3, [r2, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000dcc:	b12c      	cbz	r4, 8000dda <HAL_CAN_IRQHandler+0x178>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000dce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000dd0:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 8000dd2:	431c      	orrs	r4, r3
 8000dd4:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8000dd6:	f003 f801 	bl	8003ddc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8000dda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000dde:	077a      	lsls	r2, r7, #29
 8000de0:	d405      	bmi.n	8000dee <HAL_CAN_IRQHandler+0x18c>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000de2:	f017 0408 	ands.w	r4, r7, #8
 8000de6:	d105      	bne.n	8000df4 <HAL_CAN_IRQHandler+0x192>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000de8:	f7ff ff36 	bl	8000c58 <HAL_CAN_TxMailbox0AbortCallback>
 8000dec:	e755      	b.n	8000c9a <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000dee:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8000df2:	e752      	b.n	8000c9a <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000df4:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8000df8:	e74f      	b.n	8000c9a <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000dfa:	0579      	lsls	r1, r7, #21
 8000dfc:	d502      	bpl.n	8000e04 <HAL_CAN_IRQHandler+0x1a2>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000dfe:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8000e02:	e756      	b.n	8000cb2 <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000e04:	053a      	lsls	r2, r7, #20
 8000e06:	d502      	bpl.n	8000e0e <HAL_CAN_IRQHandler+0x1ac>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000e08:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000e0c:	e751      	b.n	8000cb2 <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000e0e:	4628      	mov	r0, r5
 8000e10:	f7ff ff23 	bl	8000c5a <HAL_CAN_TxMailbox1AbortCallback>
 8000e14:	e74d      	b.n	8000cb2 <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000e16:	0379      	lsls	r1, r7, #13
 8000e18:	d502      	bpl.n	8000e20 <HAL_CAN_IRQHandler+0x1be>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000e1a:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8000e1e:	e754      	b.n	8000cca <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000e20:	033a      	lsls	r2, r7, #12
 8000e22:	d502      	bpl.n	8000e2a <HAL_CAN_IRQHandler+0x1c8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000e24:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8000e28:	e74f      	b.n	8000cca <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000e2a:	4628      	mov	r0, r5
 8000e2c:	f7ff ff16 	bl	8000c5c <HAL_CAN_TxMailbox2AbortCallback>
 8000e30:	e74b      	b.n	8000cca <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8000e32:	2b50      	cmp	r3, #80	; 0x50
 8000e34:	d010      	beq.n	8000e58 <HAL_CAN_IRQHandler+0x1f6>
 8000e36:	2b60      	cmp	r3, #96	; 0x60
 8000e38:	d1c2      	bne.n	8000dc0 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000e3a:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 8000e3e:	e7bf      	b.n	8000dc0 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_STF;
 8000e40:	f044 0408 	orr.w	r4, r4, #8
            break;
 8000e44:	e7bc      	b.n	8000dc0 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000e46:	f044 0410 	orr.w	r4, r4, #16
            break;
 8000e4a:	e7b9      	b.n	8000dc0 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000e4c:	f044 0420 	orr.w	r4, r4, #32
            break;
 8000e50:	e7b6      	b.n	8000dc0 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BR;
 8000e52:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 8000e56:	e7b3      	b.n	8000dc0 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BD;
 8000e58:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 8000e5c:	e7b0      	b.n	8000dc0 <HAL_CAN_IRQHandler+0x15e>

08000e5e <HAL_CAN_GetState>:
  *         the configuration information for the specified CAN.
  * @retval HAL state
  */
HAL_CAN_StateTypeDef HAL_CAN_GetState(CAN_HandleTypeDef *hcan)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e5e:	f890 2020 	ldrb.w	r2, [r0, #32]
{
 8000e62:	4603      	mov	r3, r0
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e64:	b2d0      	uxtb	r0, r2

  if ((state == HAL_CAN_STATE_READY) ||
 8000e66:	3a01      	subs	r2, #1
 8000e68:	2a01      	cmp	r2, #1
 8000e6a:	d80a      	bhi.n	8000e82 <HAL_CAN_GetState+0x24>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check sleep mode acknowledge flag */
    if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	685a      	ldr	r2, [r3, #4]
 8000e70:	0792      	lsls	r2, r2, #30
 8000e72:	d405      	bmi.n	8000e80 <HAL_CAN_GetState+0x22>
    {
      /* Sleep mode is active */
      state = HAL_CAN_STATE_SLEEP_ACTIVE;
    }
    /* Check sleep mode request flag */
    else if ((hcan->Instance->MCR & CAN_MCR_SLEEP) != 0U)
 8000e74:	681b      	ldr	r3, [r3, #0]
    {
      /* Sleep mode request is pending */
      state = HAL_CAN_STATE_SLEEP_PENDING;
 8000e76:	f013 0f02 	tst.w	r3, #2
 8000e7a:	bf18      	it	ne
 8000e7c:	2003      	movne	r0, #3
 8000e7e:	4770      	bx	lr
      state = HAL_CAN_STATE_SLEEP_ACTIVE;
 8000e80:	2004      	movs	r0, #4
    }
  }

  /* Return CAN state */
  return state;
}
 8000e82:	4770      	bx	lr

08000e84 <HAL_CAN_ResetError>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
  HAL_StatusTypeDef status = HAL_OK;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e84:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	2b01      	cmp	r3, #1
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8000e8c:	bf95      	itete	ls
 8000e8e:	2300      	movls	r3, #0
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e90:	6a43      	ldrhi	r3, [r0, #36]	; 0x24
    hcan->ErrorCode = 0U;
 8000e92:	6243      	strls	r3, [r0, #36]	; 0x24
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e94:	f443 2380 	orrhi.w	r3, r3, #262144	; 0x40000
  HAL_StatusTypeDef status = HAL_OK;
 8000e98:	bf92      	itee	ls
 8000e9a:	4618      	movls	r0, r3
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e9c:	6243      	strhi	r3, [r0, #36]	; 0x24

    status = HAL_ERROR;
 8000e9e:	2001      	movhi	r0, #1
  }

  /* Return the status */
  return status;
}
 8000ea0:	4770      	bx	lr
	...

08000ea4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea4:	4907      	ldr	r1, [pc, #28]	; (8000ec4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ea6:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea8:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000eaa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000eb2:	0412      	lsls	r2, r2, #16
 8000eb4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000ec0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000ec2:	4770      	bx	lr
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec8:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eca:	b530      	push	{r4, r5, lr}
 8000ecc:	68dc      	ldr	r4, [r3, #12]
 8000ece:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed8:	2b04      	cmp	r3, #4
 8000eda:	bf28      	it	cs
 8000edc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ede:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee0:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee4:	bf98      	it	ls
 8000ee6:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eec:	bf88      	it	hi
 8000eee:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	ea21 0303 	bic.w	r3, r1, r3
 8000ef4:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef6:	fa05 f404 	lsl.w	r4, r5, r4
 8000efa:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000efe:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f00:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f04:	bfac      	ite	ge
 8000f06:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0a:	4a07      	ldrlt	r2, [pc, #28]	; (8000f28 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	bfab      	itete	ge
 8000f14:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f18:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f20:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000f22:	bd30      	pop	{r4, r5, pc}
 8000f24:	e000ed00 	.word	0xe000ed00
 8000f28:	e000ed14 	.word	0xe000ed14

08000f2c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000f2c:	2800      	cmp	r0, #0
 8000f2e:	db08      	blt.n	8000f42 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f30:	2301      	movs	r3, #1
 8000f32:	0942      	lsrs	r2, r0, #5
 8000f34:	f000 001f 	and.w	r0, r0, #31
 8000f38:	fa03 f000 	lsl.w	r0, r3, r0
 8000f3c:	4b01      	ldr	r3, [pc, #4]	; (8000f44 <HAL_NVIC_EnableIRQ+0x18>)
 8000f3e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000f42:	4770      	bx	lr
 8000f44:	e000e100 	.word	0xe000e100

08000f48 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000f48:	2800      	cmp	r0, #0
 8000f4a:	db0d      	blt.n	8000f68 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	0943      	lsrs	r3, r0, #5
 8000f50:	f000 001f 	and.w	r0, r0, #31
 8000f54:	fa02 f000 	lsl.w	r0, r2, r0
 8000f58:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <HAL_NVIC_DisableIRQ+0x24>)
 8000f5a:	3320      	adds	r3, #32
 8000f5c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f64:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000e100 	.word	0xe000e100

08000f70 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f70:	3801      	subs	r0, #1
 8000f72:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000f76:	d20b      	bcs.n	8000f90 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f78:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7c:	21f0      	movs	r1, #240	; 0xf0
 8000f7e:	4a05      	ldr	r2, [pc, #20]	; (8000f94 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f80:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f82:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f86:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f88:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f8a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f8c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f8e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000f90:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f98:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000f9a:	b320      	cbz	r0, 8000fe6 <HAL_DMA_Init+0x4e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f9c:	2214      	movs	r2, #20
 8000f9e:	6801      	ldr	r1, [r0, #0]
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_DMA_Init+0x54>)
 8000fa2:	440b      	add	r3, r1
 8000fa4:	fbb3 f3f2 	udiv	r3, r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000fac:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <HAL_DMA_Init+0x58>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000fae:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8000fb0:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000fb2:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8000fb6:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fb8:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000fba:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fbe:	4323      	orrs	r3, r4
 8000fc0:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000fc2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fc6:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fc8:	6944      	ldr	r4, [r0, #20]
 8000fca:	4323      	orrs	r3, r4
 8000fcc:	6984      	ldr	r4, [r0, #24]
 8000fce:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fd0:	69c4      	ldr	r4, [r0, #28]
 8000fd2:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8000fd4:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000fd6:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000fd8:	f44f 7280 	mov.w	r2, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fdc:	2300      	movs	r3, #0
  hdma->Lock = HAL_UNLOCKED;
 8000fde:	8402      	strh	r2, [r0, #32]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fe0:	6383      	str	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8000fe2:	4618      	mov	r0, r3
}
 8000fe4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	e7fc      	b.n	8000fe4 <HAL_DMA_Init+0x4c>
 8000fea:	bf00      	nop
 8000fec:	bffdfff8 	.word	0xbffdfff8
 8000ff0:	40020000 	.word	0x40020000

08000ff4 <HAL_DMA_DeInit>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000ff4:	4603      	mov	r3, r0
{
 8000ff6:	b510      	push	{r4, lr}
  if(hdma == NULL)
 8000ff8:	b1e8      	cbz	r0, 8001036 <HAL_DMA_DeInit+0x42>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8000ffa:	6801      	ldr	r1, [r0, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8000ffc:	2000      	movs	r0, #0
  __HAL_DMA_DISABLE(hdma);
 8000ffe:	680a      	ldr	r2, [r1, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
 8001000:	4c0e      	ldr	r4, [pc, #56]	; (800103c <HAL_DMA_DeInit+0x48>)
  __HAL_DMA_DISABLE(hdma);
 8001002:	f022 0201 	bic.w	r2, r2, #1
 8001006:	600a      	str	r2, [r1, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001008:	4a0d      	ldr	r2, [pc, #52]	; (8001040 <HAL_DMA_DeInit+0x4c>)
  hdma->Instance->CCR  = 0U;
 800100a:	6008      	str	r0, [r1, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800100c:	440a      	add	r2, r1
  hdma->Instance->CNDTR = 0U;
 800100e:	6048      	str	r0, [r1, #4]
  hdma->Instance->CPAR  = 0U;
 8001010:	6088      	str	r0, [r1, #8]
  hdma->Instance->CMAR = 0U;
 8001012:	60c8      	str	r0, [r1, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001014:	2114      	movs	r1, #20
 8001016:	fbb2 f2f1 	udiv	r2, r2, r1
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 800101a:	2101      	movs	r1, #1
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800101c:	0092      	lsls	r2, r2, #2
 800101e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8001020:	fa01 f202 	lsl.w	r2, r1, r2
  hdma->DmaBaseAddress = DMA1;
 8001024:	63dc      	str	r4, [r3, #60]	; 0x3c
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8001026:	6062      	str	r2, [r4, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
  hdma->XferHalfCpltCallback = NULL;
 8001028:	e9c3 000a 	strd	r0, r0, [r3, #40]	; 0x28
  hdma->XferErrorCallback = NULL;
  hdma->XferAbortCallback = NULL;
 800102c:	e9c3 000c 	strd	r0, r0, [r3, #48]	; 0x30

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001030:	6398      	str	r0, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001032:	8418      	strh	r0, [r3, #32]

  return HAL_OK;
}
 8001034:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001036:	2001      	movs	r0, #1
 8001038:	e7fc      	b.n	8001034 <HAL_DMA_DeInit+0x40>
 800103a:	bf00      	nop
 800103c:	40020000 	.word	0x40020000
 8001040:	bffdfff8 	.word	0xbffdfff8

08001044 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001044:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001046:	f890 4020 	ldrb.w	r4, [r0, #32]
 800104a:	2c01      	cmp	r4, #1
 800104c:	d034      	beq.n	80010b8 <HAL_DMA_Start_IT+0x74>
 800104e:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001050:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001054:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001058:	42a5      	cmp	r5, r4
 800105a:	f04f 0600 	mov.w	r6, #0
 800105e:	f04f 0402 	mov.w	r4, #2
 8001062:	d127      	bne.n	80010b4 <HAL_DMA_Start_IT+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001064:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001068:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800106a:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 800106c:	6826      	ldr	r6, [r4, #0]
 800106e:	f026 0601 	bic.w	r6, r6, #1
 8001072:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001074:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 8001078:	40bd      	lsls	r5, r7
 800107a:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800107c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800107e:	6843      	ldr	r3, [r0, #4]
 8001080:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8001082:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001084:	bf0b      	itete	eq
 8001086:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001088:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800108a:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800108c:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 800108e:	b14b      	cbz	r3, 80010a4 <HAL_DMA_Start_IT+0x60>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001090:	6823      	ldr	r3, [r4, #0]
 8001092:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8001096:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001098:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800109a:	6823      	ldr	r3, [r4, #0]
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6023      	str	r3, [r4, #0]
}
 80010a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010a4:	6823      	ldr	r3, [r4, #0]
 80010a6:	f023 0304 	bic.w	r3, r3, #4
 80010aa:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80010ac:	6823      	ldr	r3, [r4, #0]
 80010ae:	f043 030a 	orr.w	r3, r3, #10
 80010b2:	e7f0      	b.n	8001096 <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 80010b4:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 80010b8:	2002      	movs	r0, #2
 80010ba:	e7f2      	b.n	80010a2 <HAL_DMA_Start_IT+0x5e>

080010bc <HAL_DMA_Abort_IT>:
{  
 80010bc:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010be:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d003      	beq.n	80010ce <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010c6:	2304      	movs	r3, #4
 80010c8:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80010ca:	2001      	movs	r0, #1
}
 80010cc:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010ce:	6803      	ldr	r3, [r0, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	f022 020e 	bic.w	r2, r2, #14
 80010d6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	f022 0201 	bic.w	r2, r2, #1
 80010de:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80010e0:	4a17      	ldr	r2, [pc, #92]	; (8001140 <HAL_DMA_Abort_IT+0x84>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d01c      	beq.n	8001120 <HAL_DMA_Abort_IT+0x64>
 80010e6:	3214      	adds	r2, #20
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d01b      	beq.n	8001124 <HAL_DMA_Abort_IT+0x68>
 80010ec:	3214      	adds	r2, #20
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d01a      	beq.n	8001128 <HAL_DMA_Abort_IT+0x6c>
 80010f2:	3214      	adds	r2, #20
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d01a      	beq.n	800112e <HAL_DMA_Abort_IT+0x72>
 80010f8:	3214      	adds	r2, #20
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d01a      	beq.n	8001134 <HAL_DMA_Abort_IT+0x78>
 80010fe:	3214      	adds	r2, #20
 8001100:	4293      	cmp	r3, r2
 8001102:	bf0c      	ite	eq
 8001104:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8001108:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 800110c:	4a0d      	ldr	r2, [pc, #52]	; (8001144 <HAL_DMA_Abort_IT+0x88>)
 800110e:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001110:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001114:	8403      	strh	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001116:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001118:	b17b      	cbz	r3, 800113a <HAL_DMA_Abort_IT+0x7e>
      hdma->XferAbortCallback(hdma);
 800111a:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800111c:	2000      	movs	r0, #0
 800111e:	e7d5      	b.n	80010cc <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001120:	2301      	movs	r3, #1
 8001122:	e7f3      	b.n	800110c <HAL_DMA_Abort_IT+0x50>
 8001124:	2310      	movs	r3, #16
 8001126:	e7f1      	b.n	800110c <HAL_DMA_Abort_IT+0x50>
 8001128:	f44f 7380 	mov.w	r3, #256	; 0x100
 800112c:	e7ee      	b.n	800110c <HAL_DMA_Abort_IT+0x50>
 800112e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001132:	e7eb      	b.n	800110c <HAL_DMA_Abort_IT+0x50>
 8001134:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001138:	e7e8      	b.n	800110c <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 800113a:	4618      	mov	r0, r3
 800113c:	e7c6      	b.n	80010cc <HAL_DMA_Abort_IT+0x10>
 800113e:	bf00      	nop
 8001140:	40020008 	.word	0x40020008
 8001144:	40020000 	.word	0x40020000

08001148 <HAL_DMA_IRQHandler>:
{
 8001148:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800114a:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800114c:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800114e:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001150:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001152:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001154:	4095      	lsls	r5, r2
 8001156:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8001158:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800115a:	d032      	beq.n	80011c2 <HAL_DMA_IRQHandler+0x7a>
 800115c:	074d      	lsls	r5, r1, #29
 800115e:	d530      	bpl.n	80011c2 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001164:	bf5e      	ittt	pl
 8001166:	681a      	ldrpl	r2, [r3, #0]
 8001168:	f022 0204 	bicpl.w	r2, r2, #4
 800116c:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800116e:	4a3d      	ldr	r2, [pc, #244]	; (8001264 <HAL_DMA_IRQHandler+0x11c>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d019      	beq.n	80011a8 <HAL_DMA_IRQHandler+0x60>
 8001174:	3214      	adds	r2, #20
 8001176:	4293      	cmp	r3, r2
 8001178:	d018      	beq.n	80011ac <HAL_DMA_IRQHandler+0x64>
 800117a:	3214      	adds	r2, #20
 800117c:	4293      	cmp	r3, r2
 800117e:	d017      	beq.n	80011b0 <HAL_DMA_IRQHandler+0x68>
 8001180:	3214      	adds	r2, #20
 8001182:	4293      	cmp	r3, r2
 8001184:	d017      	beq.n	80011b6 <HAL_DMA_IRQHandler+0x6e>
 8001186:	3214      	adds	r2, #20
 8001188:	4293      	cmp	r3, r2
 800118a:	d017      	beq.n	80011bc <HAL_DMA_IRQHandler+0x74>
 800118c:	3214      	adds	r2, #20
 800118e:	4293      	cmp	r3, r2
 8001190:	bf0c      	ite	eq
 8001192:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8001196:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 800119a:	4a33      	ldr	r2, [pc, #204]	; (8001268 <HAL_DMA_IRQHandler+0x120>)
 800119c:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800119e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d05c      	beq.n	800125e <HAL_DMA_IRQHandler+0x116>
}
 80011a4:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80011a6:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80011a8:	2304      	movs	r3, #4
 80011aa:	e7f6      	b.n	800119a <HAL_DMA_IRQHandler+0x52>
 80011ac:	2340      	movs	r3, #64	; 0x40
 80011ae:	e7f4      	b.n	800119a <HAL_DMA_IRQHandler+0x52>
 80011b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011b4:	e7f1      	b.n	800119a <HAL_DMA_IRQHandler+0x52>
 80011b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011ba:	e7ee      	b.n	800119a <HAL_DMA_IRQHandler+0x52>
 80011bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80011c0:	e7eb      	b.n	800119a <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80011c2:	2502      	movs	r5, #2
 80011c4:	4095      	lsls	r5, r2
 80011c6:	4225      	tst	r5, r4
 80011c8:	d035      	beq.n	8001236 <HAL_DMA_IRQHandler+0xee>
 80011ca:	078d      	lsls	r5, r1, #30
 80011cc:	d533      	bpl.n	8001236 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	0694      	lsls	r4, r2, #26
 80011d2:	d406      	bmi.n	80011e2 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	f022 020a 	bic.w	r2, r2, #10
 80011da:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80011dc:	2201      	movs	r2, #1
 80011de:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80011e2:	4a20      	ldr	r2, [pc, #128]	; (8001264 <HAL_DMA_IRQHandler+0x11c>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d019      	beq.n	800121c <HAL_DMA_IRQHandler+0xd4>
 80011e8:	3214      	adds	r2, #20
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d018      	beq.n	8001220 <HAL_DMA_IRQHandler+0xd8>
 80011ee:	3214      	adds	r2, #20
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d017      	beq.n	8001224 <HAL_DMA_IRQHandler+0xdc>
 80011f4:	3214      	adds	r2, #20
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d017      	beq.n	800122a <HAL_DMA_IRQHandler+0xe2>
 80011fa:	3214      	adds	r2, #20
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d017      	beq.n	8001230 <HAL_DMA_IRQHandler+0xe8>
 8001200:	3214      	adds	r2, #20
 8001202:	4293      	cmp	r3, r2
 8001204:	bf0c      	ite	eq
 8001206:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800120a:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 800120e:	4a16      	ldr	r2, [pc, #88]	; (8001268 <HAL_DMA_IRQHandler+0x120>)
 8001210:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001212:	2300      	movs	r3, #0
 8001214:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001218:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800121a:	e7c1      	b.n	80011a0 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800121c:	2302      	movs	r3, #2
 800121e:	e7f6      	b.n	800120e <HAL_DMA_IRQHandler+0xc6>
 8001220:	2320      	movs	r3, #32
 8001222:	e7f4      	b.n	800120e <HAL_DMA_IRQHandler+0xc6>
 8001224:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001228:	e7f1      	b.n	800120e <HAL_DMA_IRQHandler+0xc6>
 800122a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800122e:	e7ee      	b.n	800120e <HAL_DMA_IRQHandler+0xc6>
 8001230:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001234:	e7eb      	b.n	800120e <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001236:	2508      	movs	r5, #8
 8001238:	4095      	lsls	r5, r2
 800123a:	4225      	tst	r5, r4
 800123c:	d00f      	beq.n	800125e <HAL_DMA_IRQHandler+0x116>
 800123e:	0709      	lsls	r1, r1, #28
 8001240:	d50d      	bpl.n	800125e <HAL_DMA_IRQHandler+0x116>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001242:	6819      	ldr	r1, [r3, #0]
 8001244:	f021 010e 	bic.w	r1, r1, #14
 8001248:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800124a:	2301      	movs	r3, #1
 800124c:	fa03 f202 	lsl.w	r2, r3, r2
 8001250:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001252:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001254:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001258:	8403      	strh	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 800125a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800125c:	e7a0      	b.n	80011a0 <HAL_DMA_IRQHandler+0x58>
}
 800125e:	bc70      	pop	{r4, r5, r6}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40020008 	.word	0x40020008
 8001268:	40020000 	.word	0x40020000

0800126c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800126c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001270:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8001272:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001274:	4f64      	ldr	r7, [pc, #400]	; (8001408 <HAL_GPIO_Init+0x19c>)
 8001276:	4b65      	ldr	r3, [pc, #404]	; (800140c <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 8001278:	f8df c194 	ldr.w	ip, [pc, #404]	; 8001410 <HAL_GPIO_Init+0x1a4>
 800127c:	f8df e194 	ldr.w	lr, [pc, #404]	; 8001414 <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001280:	680d      	ldr	r5, [r1, #0]
 8001282:	fa35 f406 	lsrs.w	r4, r5, r6
 8001286:	d102      	bne.n	800128e <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8001288:	b003      	add	sp, #12
 800128a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 800128e:	f04f 0801 	mov.w	r8, #1
 8001292:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001296:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 800129a:	ea38 0505 	bics.w	r5, r8, r5
 800129e:	d17b      	bne.n	8001398 <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 80012a0:	684d      	ldr	r5, [r1, #4]
 80012a2:	2d03      	cmp	r5, #3
 80012a4:	d807      	bhi.n	80012b6 <HAL_GPIO_Init+0x4a>
 80012a6:	3d01      	subs	r5, #1
 80012a8:	2d02      	cmp	r5, #2
 80012aa:	f200 8088 	bhi.w	80013be <HAL_GPIO_Init+0x152>
 80012ae:	e8df f005 	tbb	[pc, r5]
 80012b2:	9b96      	.short	0x9b96
 80012b4:	a1          	.byte	0xa1
 80012b5:	00          	.byte	0x00
 80012b6:	2d12      	cmp	r5, #18
 80012b8:	f000 8099 	beq.w	80013ee <HAL_GPIO_Init+0x182>
 80012bc:	d86e      	bhi.n	800139c <HAL_GPIO_Init+0x130>
 80012be:	2d11      	cmp	r5, #17
 80012c0:	f000 808f 	beq.w	80013e2 <HAL_GPIO_Init+0x176>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012c4:	2cff      	cmp	r4, #255	; 0xff
 80012c6:	bf98      	it	ls
 80012c8:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012ca:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012ce:	bf88      	it	hi
 80012d0:	f100 0a04 	addhi.w	sl, r0, #4
 80012d4:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012d8:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012dc:	bf88      	it	hi
 80012de:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012e0:	fa09 fb05 	lsl.w	fp, r9, r5
 80012e4:	ea28 080b 	bic.w	r8, r8, fp
 80012e8:	fa02 f505 	lsl.w	r5, r2, r5
 80012ec:	ea48 0505 	orr.w	r5, r8, r5
 80012f0:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012f4:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80012f8:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80012fc:	d04c      	beq.n	8001398 <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012fe:	69bd      	ldr	r5, [r7, #24]
 8001300:	f026 0803 	bic.w	r8, r6, #3
 8001304:	f045 0501 	orr.w	r5, r5, #1
 8001308:	61bd      	str	r5, [r7, #24]
 800130a:	69bd      	ldr	r5, [r7, #24]
 800130c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001310:	f005 0501 	and.w	r5, r5, #1
 8001314:	9501      	str	r5, [sp, #4]
 8001316:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800131a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800131e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001320:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8001324:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001328:	fa09 f90b 	lsl.w	r9, r9, fp
 800132c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001330:	4d39      	ldr	r5, [pc, #228]	; (8001418 <HAL_GPIO_Init+0x1ac>)
 8001332:	42a8      	cmp	r0, r5
 8001334:	d062      	beq.n	80013fc <HAL_GPIO_Init+0x190>
 8001336:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800133a:	42a8      	cmp	r0, r5
 800133c:	d060      	beq.n	8001400 <HAL_GPIO_Init+0x194>
 800133e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001342:	42a8      	cmp	r0, r5
 8001344:	d05e      	beq.n	8001404 <HAL_GPIO_Init+0x198>
 8001346:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800134a:	42a8      	cmp	r0, r5
 800134c:	bf0c      	ite	eq
 800134e:	2503      	moveq	r5, #3
 8001350:	2504      	movne	r5, #4
 8001352:	fa05 f50b 	lsl.w	r5, r5, fp
 8001356:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800135a:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800135e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001360:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001364:	bf14      	ite	ne
 8001366:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001368:	43a5      	biceq	r5, r4
 800136a:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 800136c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800136e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001372:	bf14      	ite	ne
 8001374:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001376:	43a5      	biceq	r5, r4
 8001378:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800137a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800137c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001380:	bf14      	ite	ne
 8001382:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001384:	43a5      	biceq	r5, r4
 8001386:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001388:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800138a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800138e:	bf14      	ite	ne
 8001390:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001392:	ea25 0404 	biceq.w	r4, r5, r4
 8001396:	60dc      	str	r4, [r3, #12]
	position++;
 8001398:	3601      	adds	r6, #1
 800139a:	e771      	b.n	8001280 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 800139c:	f8df 907c 	ldr.w	r9, [pc, #124]	; 800141c <HAL_GPIO_Init+0x1b0>
 80013a0:	454d      	cmp	r5, r9
 80013a2:	d00c      	beq.n	80013be <HAL_GPIO_Init+0x152>
 80013a4:	d817      	bhi.n	80013d6 <HAL_GPIO_Init+0x16a>
 80013a6:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 80013aa:	454d      	cmp	r5, r9
 80013ac:	d007      	beq.n	80013be <HAL_GPIO_Init+0x152>
 80013ae:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 80013b2:	454d      	cmp	r5, r9
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x152>
 80013b6:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 80013ba:	454d      	cmp	r5, r9
 80013bc:	d182      	bne.n	80012c4 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013be:	688a      	ldr	r2, [r1, #8]
 80013c0:	b1d2      	cbz	r2, 80013f8 <HAL_GPIO_Init+0x18c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013c2:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80013c4:	bf08      	it	eq
 80013c6:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013ca:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 80013ce:	bf18      	it	ne
 80013d0:	f8c0 8014 	strne.w	r8, [r0, #20]
 80013d4:	e776      	b.n	80012c4 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80013d6:	4565      	cmp	r5, ip
 80013d8:	d0f1      	beq.n	80013be <HAL_GPIO_Init+0x152>
 80013da:	4575      	cmp	r5, lr
 80013dc:	e7ee      	b.n	80013bc <HAL_GPIO_Init+0x150>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013de:	68ca      	ldr	r2, [r1, #12]
          break;
 80013e0:	e770      	b.n	80012c4 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013e2:	68ca      	ldr	r2, [r1, #12]
 80013e4:	3204      	adds	r2, #4
          break;
 80013e6:	e76d      	b.n	80012c4 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013e8:	68ca      	ldr	r2, [r1, #12]
 80013ea:	3208      	adds	r2, #8
          break;
 80013ec:	e76a      	b.n	80012c4 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013ee:	68ca      	ldr	r2, [r1, #12]
 80013f0:	320c      	adds	r2, #12
          break;
 80013f2:	e767      	b.n	80012c4 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80013f4:	2200      	movs	r2, #0
 80013f6:	e765      	b.n	80012c4 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013f8:	2204      	movs	r2, #4
 80013fa:	e763      	b.n	80012c4 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013fc:	2500      	movs	r5, #0
 80013fe:	e7a8      	b.n	8001352 <HAL_GPIO_Init+0xe6>
 8001400:	2501      	movs	r5, #1
 8001402:	e7a6      	b.n	8001352 <HAL_GPIO_Init+0xe6>
 8001404:	2502      	movs	r5, #2
 8001406:	e7a4      	b.n	8001352 <HAL_GPIO_Init+0xe6>
 8001408:	40021000 	.word	0x40021000
 800140c:	40010400 	.word	0x40010400
 8001410:	10310000 	.word	0x10310000
 8001414:	10320000 	.word	0x10320000
 8001418:	40010800 	.word	0x40010800
 800141c:	10220000 	.word	0x10220000

08001420 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001420:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001424:	f04f 0b04 	mov.w	fp, #4
  uint32_t position = 0x00u;
 8001428:	2200      	movs	r2, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 800142a:	f04f 0a01 	mov.w	sl, #1
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800142e:	f04f 080f 	mov.w	r8, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001432:	eb00 030b 	add.w	r3, r0, fp
 8001436:	9301      	str	r3, [sp, #4]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001438:	4b2e      	ldr	r3, [pc, #184]	; (80014f4 <HAL_GPIO_DeInit+0xd4>)
  while ((GPIO_Pin >> position) != 0u)
 800143a:	fa31 f402 	lsrs.w	r4, r1, r2
 800143e:	d102      	bne.n	8001446 <HAL_GPIO_DeInit+0x26>
      CLEAR_BIT(GPIOx->ODR, iocurrent);
    }

    position++;
  }
}
 8001440:	b003      	add	sp, #12
 8001442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001446:	fa0a f702 	lsl.w	r7, sl, r2
    if (iocurrent)
 800144a:	400f      	ands	r7, r1
 800144c:	d049      	beq.n	80014e2 <HAL_GPIO_DeInit+0xc2>
      tmp = AFIO->EXTICR[position >> 2u];
 800144e:	f022 0403 	bic.w	r4, r2, #3
 8001452:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8001456:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800145a:	f002 0c03 	and.w	ip, r2, #3
      tmp = AFIO->EXTICR[position >> 2u];
 800145e:	68a5      	ldr	r5, [r4, #8]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8001460:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001464:	fa08 f90c 	lsl.w	r9, r8, ip
 8001468:	ea09 0e05 	and.w	lr, r9, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800146c:	4d22      	ldr	r5, [pc, #136]	; (80014f8 <HAL_GPIO_DeInit+0xd8>)
 800146e:	42a8      	cmp	r0, r5
 8001470:	d039      	beq.n	80014e6 <HAL_GPIO_DeInit+0xc6>
 8001472:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001476:	42a8      	cmp	r0, r5
 8001478:	d037      	beq.n	80014ea <HAL_GPIO_DeInit+0xca>
 800147a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800147e:	42a8      	cmp	r0, r5
 8001480:	d035      	beq.n	80014ee <HAL_GPIO_DeInit+0xce>
 8001482:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001486:	42a8      	cmp	r0, r5
 8001488:	bf0c      	ite	eq
 800148a:	2503      	moveq	r5, #3
 800148c:	2504      	movne	r5, #4
 800148e:	fa05 f50c 	lsl.w	r5, r5, ip
 8001492:	4575      	cmp	r5, lr
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001494:	ea6f 0607 	mvn.w	r6, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001498:	d10f      	bne.n	80014ba <HAL_GPIO_DeInit+0x9a>
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800149a:	68a5      	ldr	r5, [r4, #8]
 800149c:	ea25 0509 	bic.w	r5, r5, r9
 80014a0:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80014a2:	681c      	ldr	r4, [r3, #0]
 80014a4:	4034      	ands	r4, r6
 80014a6:	601c      	str	r4, [r3, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80014a8:	685c      	ldr	r4, [r3, #4]
 80014aa:	4034      	ands	r4, r6
 80014ac:	605c      	str	r4, [r3, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80014ae:	689c      	ldr	r4, [r3, #8]
 80014b0:	4034      	ands	r4, r6
 80014b2:	609c      	str	r4, [r3, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80014b4:	68dc      	ldr	r4, [r3, #12]
 80014b6:	4034      	ands	r4, r6
 80014b8:	60dc      	str	r4, [r3, #12]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014ba:	2fff      	cmp	r7, #255	; 0xff
 80014bc:	bf94      	ite	ls
 80014be:	4607      	movls	r7, r0
 80014c0:	9f01      	ldrhi	r7, [sp, #4]
 80014c2:	ea4f 0482 	mov.w	r4, r2, lsl #2
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80014c6:	683d      	ldr	r5, [r7, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014c8:	bf88      	it	hi
 80014ca:	3c20      	subhi	r4, #32
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80014cc:	fa08 fc04 	lsl.w	ip, r8, r4
 80014d0:	ea25 050c 	bic.w	r5, r5, ip
 80014d4:	fa0b f404 	lsl.w	r4, fp, r4
 80014d8:	4325      	orrs	r5, r4
 80014da:	603d      	str	r5, [r7, #0]
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80014dc:	68c4      	ldr	r4, [r0, #12]
 80014de:	4026      	ands	r6, r4
 80014e0:	60c6      	str	r6, [r0, #12]
    position++;
 80014e2:	3201      	adds	r2, #1
 80014e4:	e7a9      	b.n	800143a <HAL_GPIO_DeInit+0x1a>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80014e6:	2500      	movs	r5, #0
 80014e8:	e7d1      	b.n	800148e <HAL_GPIO_DeInit+0x6e>
 80014ea:	2501      	movs	r5, #1
 80014ec:	e7cf      	b.n	800148e <HAL_GPIO_DeInit+0x6e>
 80014ee:	2502      	movs	r5, #2
 80014f0:	e7cd      	b.n	800148e <HAL_GPIO_DeInit+0x6e>
 80014f2:	bf00      	nop
 80014f4:	40010400 	.word	0x40010400
 80014f8:	40010800 	.word	0x40010800

080014fc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014fc:	6883      	ldr	r3, [r0, #8]
 80014fe:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001500:	bf14      	ite	ne
 8001502:	2001      	movne	r0, #1
 8001504:	2000      	moveq	r0, #0
 8001506:	4770      	bx	lr

08001508 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001508:	2201      	movs	r2, #1
 800150a:	4b01      	ldr	r3, [pc, #4]	; (8001510 <HAL_PWR_EnableBkUpAccess+0x8>)
 800150c:	621a      	str	r2, [r3, #32]
}
 800150e:	4770      	bx	lr
 8001510:	420e0000 	.word	0x420e0000

08001514 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001514:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001518:	4605      	mov	r5, r0
 800151a:	b338      	cbz	r0, 800156c <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800151c:	6803      	ldr	r3, [r0, #0]
 800151e:	07db      	lsls	r3, r3, #31
 8001520:	d410      	bmi.n	8001544 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001522:	682b      	ldr	r3, [r5, #0]
 8001524:	079f      	lsls	r7, r3, #30
 8001526:	d45e      	bmi.n	80015e6 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001528:	682b      	ldr	r3, [r5, #0]
 800152a:	0719      	lsls	r1, r3, #28
 800152c:	f100 8095 	bmi.w	800165a <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001530:	682b      	ldr	r3, [r5, #0]
 8001532:	075a      	lsls	r2, r3, #29
 8001534:	f100 80c1 	bmi.w	80016ba <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001538:	69e8      	ldr	r0, [r5, #28]
 800153a:	2800      	cmp	r0, #0
 800153c:	f040 812c 	bne.w	8001798 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8001540:	2000      	movs	r0, #0
 8001542:	e029      	b.n	8001598 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001544:	4c90      	ldr	r4, [pc, #576]	; (8001788 <HAL_RCC_OscConfig+0x274>)
 8001546:	6863      	ldr	r3, [r4, #4]
 8001548:	f003 030c 	and.w	r3, r3, #12
 800154c:	2b04      	cmp	r3, #4
 800154e:	d007      	beq.n	8001560 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001550:	6863      	ldr	r3, [r4, #4]
 8001552:	f003 030c 	and.w	r3, r3, #12
 8001556:	2b08      	cmp	r3, #8
 8001558:	d10a      	bne.n	8001570 <HAL_RCC_OscConfig+0x5c>
 800155a:	6863      	ldr	r3, [r4, #4]
 800155c:	03de      	lsls	r6, r3, #15
 800155e:	d507      	bpl.n	8001570 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001560:	6823      	ldr	r3, [r4, #0]
 8001562:	039c      	lsls	r4, r3, #14
 8001564:	d5dd      	bpl.n	8001522 <HAL_RCC_OscConfig+0xe>
 8001566:	686b      	ldr	r3, [r5, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1da      	bne.n	8001522 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 800156c:	2001      	movs	r0, #1
 800156e:	e013      	b.n	8001598 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001570:	686b      	ldr	r3, [r5, #4]
 8001572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001576:	d112      	bne.n	800159e <HAL_RCC_OscConfig+0x8a>
 8001578:	6823      	ldr	r3, [r4, #0]
 800157a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800157e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001580:	f7ff f922 	bl	80007c8 <HAL_GetTick>
 8001584:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001586:	6823      	ldr	r3, [r4, #0]
 8001588:	0398      	lsls	r0, r3, #14
 800158a:	d4ca      	bmi.n	8001522 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800158c:	f7ff f91c 	bl	80007c8 <HAL_GetTick>
 8001590:	1b80      	subs	r0, r0, r6
 8001592:	2864      	cmp	r0, #100	; 0x64
 8001594:	d9f7      	bls.n	8001586 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8001596:	2003      	movs	r0, #3
}
 8001598:	b002      	add	sp, #8
 800159a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800159e:	b99b      	cbnz	r3, 80015c8 <HAL_RCC_OscConfig+0xb4>
 80015a0:	6823      	ldr	r3, [r4, #0]
 80015a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015a6:	6023      	str	r3, [r4, #0]
 80015a8:	6823      	ldr	r3, [r4, #0]
 80015aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ae:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80015b0:	f7ff f90a 	bl	80007c8 <HAL_GetTick>
 80015b4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b6:	6823      	ldr	r3, [r4, #0]
 80015b8:	0399      	lsls	r1, r3, #14
 80015ba:	d5b2      	bpl.n	8001522 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015bc:	f7ff f904 	bl	80007c8 <HAL_GetTick>
 80015c0:	1b80      	subs	r0, r0, r6
 80015c2:	2864      	cmp	r0, #100	; 0x64
 80015c4:	d9f7      	bls.n	80015b6 <HAL_RCC_OscConfig+0xa2>
 80015c6:	e7e6      	b.n	8001596 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015cc:	6823      	ldr	r3, [r4, #0]
 80015ce:	d103      	bne.n	80015d8 <HAL_RCC_OscConfig+0xc4>
 80015d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d4:	6023      	str	r3, [r4, #0]
 80015d6:	e7cf      	b.n	8001578 <HAL_RCC_OscConfig+0x64>
 80015d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015dc:	6023      	str	r3, [r4, #0]
 80015de:	6823      	ldr	r3, [r4, #0]
 80015e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015e4:	e7cb      	b.n	800157e <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015e6:	4c68      	ldr	r4, [pc, #416]	; (8001788 <HAL_RCC_OscConfig+0x274>)
 80015e8:	6863      	ldr	r3, [r4, #4]
 80015ea:	f013 0f0c 	tst.w	r3, #12
 80015ee:	d007      	beq.n	8001600 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015f0:	6863      	ldr	r3, [r4, #4]
 80015f2:	f003 030c 	and.w	r3, r3, #12
 80015f6:	2b08      	cmp	r3, #8
 80015f8:	d110      	bne.n	800161c <HAL_RCC_OscConfig+0x108>
 80015fa:	6863      	ldr	r3, [r4, #4]
 80015fc:	03da      	lsls	r2, r3, #15
 80015fe:	d40d      	bmi.n	800161c <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001600:	6823      	ldr	r3, [r4, #0]
 8001602:	079b      	lsls	r3, r3, #30
 8001604:	d502      	bpl.n	800160c <HAL_RCC_OscConfig+0xf8>
 8001606:	692b      	ldr	r3, [r5, #16]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d1af      	bne.n	800156c <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160c:	6823      	ldr	r3, [r4, #0]
 800160e:	696a      	ldr	r2, [r5, #20]
 8001610:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001614:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001618:	6023      	str	r3, [r4, #0]
 800161a:	e785      	b.n	8001528 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800161c:	692a      	ldr	r2, [r5, #16]
 800161e:	4b5b      	ldr	r3, [pc, #364]	; (800178c <HAL_RCC_OscConfig+0x278>)
 8001620:	b16a      	cbz	r2, 800163e <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8001622:	2201      	movs	r2, #1
 8001624:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001626:	f7ff f8cf 	bl	80007c8 <HAL_GetTick>
 800162a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162c:	6823      	ldr	r3, [r4, #0]
 800162e:	079f      	lsls	r7, r3, #30
 8001630:	d4ec      	bmi.n	800160c <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001632:	f7ff f8c9 	bl	80007c8 <HAL_GetTick>
 8001636:	1b80      	subs	r0, r0, r6
 8001638:	2802      	cmp	r0, #2
 800163a:	d9f7      	bls.n	800162c <HAL_RCC_OscConfig+0x118>
 800163c:	e7ab      	b.n	8001596 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 800163e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001640:	f7ff f8c2 	bl	80007c8 <HAL_GetTick>
 8001644:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001646:	6823      	ldr	r3, [r4, #0]
 8001648:	0798      	lsls	r0, r3, #30
 800164a:	f57f af6d 	bpl.w	8001528 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800164e:	f7ff f8bb 	bl	80007c8 <HAL_GetTick>
 8001652:	1b80      	subs	r0, r0, r6
 8001654:	2802      	cmp	r0, #2
 8001656:	d9f6      	bls.n	8001646 <HAL_RCC_OscConfig+0x132>
 8001658:	e79d      	b.n	8001596 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800165a:	69aa      	ldr	r2, [r5, #24]
 800165c:	4e4a      	ldr	r6, [pc, #296]	; (8001788 <HAL_RCC_OscConfig+0x274>)
 800165e:	4b4b      	ldr	r3, [pc, #300]	; (800178c <HAL_RCC_OscConfig+0x278>)
 8001660:	b1e2      	cbz	r2, 800169c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001662:	2201      	movs	r2, #1
 8001664:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001668:	f7ff f8ae 	bl	80007c8 <HAL_GetTick>
 800166c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800166e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001670:	079b      	lsls	r3, r3, #30
 8001672:	d50d      	bpl.n	8001690 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001674:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001678:	4b45      	ldr	r3, [pc, #276]	; (8001790 <HAL_RCC_OscConfig+0x27c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001680:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001682:	bf00      	nop
  }
  while (Delay --);
 8001684:	9b01      	ldr	r3, [sp, #4]
 8001686:	1e5a      	subs	r2, r3, #1
 8001688:	9201      	str	r2, [sp, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f9      	bne.n	8001682 <HAL_RCC_OscConfig+0x16e>
 800168e:	e74f      	b.n	8001530 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001690:	f7ff f89a 	bl	80007c8 <HAL_GetTick>
 8001694:	1b00      	subs	r0, r0, r4
 8001696:	2802      	cmp	r0, #2
 8001698:	d9e9      	bls.n	800166e <HAL_RCC_OscConfig+0x15a>
 800169a:	e77c      	b.n	8001596 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 800169c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80016a0:	f7ff f892 	bl	80007c8 <HAL_GetTick>
 80016a4:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80016a8:	079f      	lsls	r7, r3, #30
 80016aa:	f57f af41 	bpl.w	8001530 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ae:	f7ff f88b 	bl	80007c8 <HAL_GetTick>
 80016b2:	1b00      	subs	r0, r0, r4
 80016b4:	2802      	cmp	r0, #2
 80016b6:	d9f6      	bls.n	80016a6 <HAL_RCC_OscConfig+0x192>
 80016b8:	e76d      	b.n	8001596 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ba:	4c33      	ldr	r4, [pc, #204]	; (8001788 <HAL_RCC_OscConfig+0x274>)
 80016bc:	69e3      	ldr	r3, [r4, #28]
 80016be:	00d8      	lsls	r0, r3, #3
 80016c0:	d424      	bmi.n	800170c <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 80016c2:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80016c4:	69e3      	ldr	r3, [r4, #28]
 80016c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ca:	61e3      	str	r3, [r4, #28]
 80016cc:	69e3      	ldr	r3, [r4, #28]
 80016ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d6:	4e2f      	ldr	r6, [pc, #188]	; (8001794 <HAL_RCC_OscConfig+0x280>)
 80016d8:	6833      	ldr	r3, [r6, #0]
 80016da:	05d9      	lsls	r1, r3, #23
 80016dc:	d518      	bpl.n	8001710 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016de:	68eb      	ldr	r3, [r5, #12]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d126      	bne.n	8001732 <HAL_RCC_OscConfig+0x21e>
 80016e4:	6a23      	ldr	r3, [r4, #32]
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80016ec:	f7ff f86c 	bl	80007c8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016f0:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80016f4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f6:	6a23      	ldr	r3, [r4, #32]
 80016f8:	079b      	lsls	r3, r3, #30
 80016fa:	d53f      	bpl.n	800177c <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 80016fc:	2f00      	cmp	r7, #0
 80016fe:	f43f af1b 	beq.w	8001538 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001702:	69e3      	ldr	r3, [r4, #28]
 8001704:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001708:	61e3      	str	r3, [r4, #28]
 800170a:	e715      	b.n	8001538 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 800170c:	2700      	movs	r7, #0
 800170e:	e7e2      	b.n	80016d6 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001710:	6833      	ldr	r3, [r6, #0]
 8001712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001716:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001718:	f7ff f856 	bl	80007c8 <HAL_GetTick>
 800171c:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171e:	6833      	ldr	r3, [r6, #0]
 8001720:	05da      	lsls	r2, r3, #23
 8001722:	d4dc      	bmi.n	80016de <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001724:	f7ff f850 	bl	80007c8 <HAL_GetTick>
 8001728:	eba0 0008 	sub.w	r0, r0, r8
 800172c:	2864      	cmp	r0, #100	; 0x64
 800172e:	d9f6      	bls.n	800171e <HAL_RCC_OscConfig+0x20a>
 8001730:	e731      	b.n	8001596 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001732:	b9ab      	cbnz	r3, 8001760 <HAL_RCC_OscConfig+0x24c>
 8001734:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001736:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800173a:	f023 0301 	bic.w	r3, r3, #1
 800173e:	6223      	str	r3, [r4, #32]
 8001740:	6a23      	ldr	r3, [r4, #32]
 8001742:	f023 0304 	bic.w	r3, r3, #4
 8001746:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001748:	f7ff f83e 	bl	80007c8 <HAL_GetTick>
 800174c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800174e:	6a23      	ldr	r3, [r4, #32]
 8001750:	0798      	lsls	r0, r3, #30
 8001752:	d5d3      	bpl.n	80016fc <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001754:	f7ff f838 	bl	80007c8 <HAL_GetTick>
 8001758:	1b80      	subs	r0, r0, r6
 800175a:	4540      	cmp	r0, r8
 800175c:	d9f7      	bls.n	800174e <HAL_RCC_OscConfig+0x23a>
 800175e:	e71a      	b.n	8001596 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001760:	2b05      	cmp	r3, #5
 8001762:	6a23      	ldr	r3, [r4, #32]
 8001764:	d103      	bne.n	800176e <HAL_RCC_OscConfig+0x25a>
 8001766:	f043 0304 	orr.w	r3, r3, #4
 800176a:	6223      	str	r3, [r4, #32]
 800176c:	e7ba      	b.n	80016e4 <HAL_RCC_OscConfig+0x1d0>
 800176e:	f023 0301 	bic.w	r3, r3, #1
 8001772:	6223      	str	r3, [r4, #32]
 8001774:	6a23      	ldr	r3, [r4, #32]
 8001776:	f023 0304 	bic.w	r3, r3, #4
 800177a:	e7b6      	b.n	80016ea <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800177c:	f7ff f824 	bl	80007c8 <HAL_GetTick>
 8001780:	1b80      	subs	r0, r0, r6
 8001782:	4540      	cmp	r0, r8
 8001784:	d9b7      	bls.n	80016f6 <HAL_RCC_OscConfig+0x1e2>
 8001786:	e706      	b.n	8001596 <HAL_RCC_OscConfig+0x82>
 8001788:	40021000 	.word	0x40021000
 800178c:	42420000 	.word	0x42420000
 8001790:	20000008 	.word	0x20000008
 8001794:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001798:	4c2a      	ldr	r4, [pc, #168]	; (8001844 <HAL_RCC_OscConfig+0x330>)
 800179a:	6863      	ldr	r3, [r4, #4]
 800179c:	f003 030c 	and.w	r3, r3, #12
 80017a0:	2b08      	cmp	r3, #8
 80017a2:	d03e      	beq.n	8001822 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017a4:	2200      	movs	r2, #0
 80017a6:	4b28      	ldr	r3, [pc, #160]	; (8001848 <HAL_RCC_OscConfig+0x334>)
 80017a8:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80017aa:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ac:	d12c      	bne.n	8001808 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80017ae:	f7ff f80b 	bl	80007c8 <HAL_GetTick>
 80017b2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017b4:	6823      	ldr	r3, [r4, #0]
 80017b6:	0199      	lsls	r1, r3, #6
 80017b8:	d420      	bmi.n	80017fc <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017ba:	6a2b      	ldr	r3, [r5, #32]
 80017bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017c0:	d105      	bne.n	80017ce <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017c2:	6862      	ldr	r2, [r4, #4]
 80017c4:	68a9      	ldr	r1, [r5, #8]
 80017c6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80017ca:	430a      	orrs	r2, r1
 80017cc:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017ce:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80017d0:	6862      	ldr	r2, [r4, #4]
 80017d2:	430b      	orrs	r3, r1
 80017d4:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80017d8:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 80017da:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017dc:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80017de:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <HAL_RCC_OscConfig+0x334>)
 80017e0:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80017e2:	f7fe fff1 	bl	80007c8 <HAL_GetTick>
 80017e6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017e8:	6823      	ldr	r3, [r4, #0]
 80017ea:	019a      	lsls	r2, r3, #6
 80017ec:	f53f aea8 	bmi.w	8001540 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f0:	f7fe ffea 	bl	80007c8 <HAL_GetTick>
 80017f4:	1b40      	subs	r0, r0, r5
 80017f6:	2802      	cmp	r0, #2
 80017f8:	d9f6      	bls.n	80017e8 <HAL_RCC_OscConfig+0x2d4>
 80017fa:	e6cc      	b.n	8001596 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017fc:	f7fe ffe4 	bl	80007c8 <HAL_GetTick>
 8001800:	1b80      	subs	r0, r0, r6
 8001802:	2802      	cmp	r0, #2
 8001804:	d9d6      	bls.n	80017b4 <HAL_RCC_OscConfig+0x2a0>
 8001806:	e6c6      	b.n	8001596 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001808:	f7fe ffde 	bl	80007c8 <HAL_GetTick>
 800180c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800180e:	6823      	ldr	r3, [r4, #0]
 8001810:	019b      	lsls	r3, r3, #6
 8001812:	f57f ae95 	bpl.w	8001540 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001816:	f7fe ffd7 	bl	80007c8 <HAL_GetTick>
 800181a:	1b40      	subs	r0, r0, r5
 800181c:	2802      	cmp	r0, #2
 800181e:	d9f6      	bls.n	800180e <HAL_RCC_OscConfig+0x2fa>
 8001820:	e6b9      	b.n	8001596 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001822:	2801      	cmp	r0, #1
 8001824:	f43f aeb8 	beq.w	8001598 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8001828:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800182a:	6a2a      	ldr	r2, [r5, #32]
 800182c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001830:	4291      	cmp	r1, r2
 8001832:	f47f ae9b 	bne.w	800156c <HAL_RCC_OscConfig+0x58>
 8001836:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001838:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183c:	4293      	cmp	r3, r2
 800183e:	f43f ae7f 	beq.w	8001540 <HAL_RCC_OscConfig+0x2c>
 8001842:	e693      	b.n	800156c <HAL_RCC_OscConfig+0x58>
 8001844:	40021000 	.word	0x40021000
 8001848:	42420000 	.word	0x42420000

0800184c <HAL_RCC_GetSysClockFreq>:
{
 800184c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800184e:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8001850:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001852:	ac02      	add	r4, sp, #8
 8001854:	f103 0510 	add.w	r5, r3, #16
 8001858:	4622      	mov	r2, r4
 800185a:	6818      	ldr	r0, [r3, #0]
 800185c:	6859      	ldr	r1, [r3, #4]
 800185e:	3308      	adds	r3, #8
 8001860:	c203      	stmia	r2!, {r0, r1}
 8001862:	42ab      	cmp	r3, r5
 8001864:	4614      	mov	r4, r2
 8001866:	d1f7      	bne.n	8001858 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001868:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 800186c:	4911      	ldr	r1, [pc, #68]	; (80018b4 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800186e:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001872:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001874:	f003 020c 	and.w	r2, r3, #12
 8001878:	2a08      	cmp	r2, #8
 800187a:	d117      	bne.n	80018ac <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800187c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001880:	3218      	adds	r2, #24
 8001882:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001884:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001886:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800188a:	d50c      	bpl.n	80018a6 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800188c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800188e:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001890:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001894:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001896:	3318      	adds	r3, #24
 8001898:	446b      	add	r3, sp
 800189a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800189e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80018a2:	b007      	add	sp, #28
 80018a4:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018a6:	4b05      	ldr	r3, [pc, #20]	; (80018bc <HAL_RCC_GetSysClockFreq+0x70>)
 80018a8:	4358      	muls	r0, r3
 80018aa:	e7fa      	b.n	80018a2 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 80018ac:	4802      	ldr	r0, [pc, #8]	; (80018b8 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 80018ae:	e7f8      	b.n	80018a2 <HAL_RCC_GetSysClockFreq+0x56>
 80018b0:	080046c4 	.word	0x080046c4
 80018b4:	40021000 	.word	0x40021000
 80018b8:	007a1200 	.word	0x007a1200
 80018bc:	003d0900 	.word	0x003d0900

080018c0 <HAL_RCC_ClockConfig>:
{
 80018c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018c4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80018c6:	4604      	mov	r4, r0
 80018c8:	b910      	cbnz	r0, 80018d0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80018ca:	2001      	movs	r0, #1
}
 80018cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018d0:	4a44      	ldr	r2, [pc, #272]	; (80019e4 <HAL_RCC_ClockConfig+0x124>)
 80018d2:	6813      	ldr	r3, [r2, #0]
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	428b      	cmp	r3, r1
 80018da:	d328      	bcc.n	800192e <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018dc:	6821      	ldr	r1, [r4, #0]
 80018de:	078e      	lsls	r6, r1, #30
 80018e0:	d430      	bmi.n	8001944 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018e2:	07ca      	lsls	r2, r1, #31
 80018e4:	d443      	bmi.n	800196e <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018e6:	4a3f      	ldr	r2, [pc, #252]	; (80019e4 <HAL_RCC_ClockConfig+0x124>)
 80018e8:	6813      	ldr	r3, [r2, #0]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	42ab      	cmp	r3, r5
 80018f0:	d865      	bhi.n	80019be <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f2:	6822      	ldr	r2, [r4, #0]
 80018f4:	4d3c      	ldr	r5, [pc, #240]	; (80019e8 <HAL_RCC_ClockConfig+0x128>)
 80018f6:	f012 0f04 	tst.w	r2, #4
 80018fa:	d16c      	bne.n	80019d6 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018fc:	0713      	lsls	r3, r2, #28
 80018fe:	d506      	bpl.n	800190e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001900:	686b      	ldr	r3, [r5, #4]
 8001902:	6922      	ldr	r2, [r4, #16]
 8001904:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001908:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800190c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800190e:	f7ff ff9d 	bl	800184c <HAL_RCC_GetSysClockFreq>
 8001912:	686b      	ldr	r3, [r5, #4]
 8001914:	4a35      	ldr	r2, [pc, #212]	; (80019ec <HAL_RCC_ClockConfig+0x12c>)
 8001916:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800191a:	5cd3      	ldrb	r3, [r2, r3]
 800191c:	40d8      	lsrs	r0, r3
 800191e:	4b34      	ldr	r3, [pc, #208]	; (80019f0 <HAL_RCC_ClockConfig+0x130>)
 8001920:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001922:	4b34      	ldr	r3, [pc, #208]	; (80019f4 <HAL_RCC_ClockConfig+0x134>)
 8001924:	6818      	ldr	r0, [r3, #0]
 8001926:	f7fe ff0d 	bl	8000744 <HAL_InitTick>
  return HAL_OK;
 800192a:	2000      	movs	r0, #0
 800192c:	e7ce      	b.n	80018cc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192e:	6813      	ldr	r3, [r2, #0]
 8001930:	f023 0307 	bic.w	r3, r3, #7
 8001934:	430b      	orrs	r3, r1
 8001936:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001938:	6813      	ldr	r3, [r2, #0]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	428b      	cmp	r3, r1
 8001940:	d1c3      	bne.n	80018ca <HAL_RCC_ClockConfig+0xa>
 8001942:	e7cb      	b.n	80018dc <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001944:	4b28      	ldr	r3, [pc, #160]	; (80019e8 <HAL_RCC_ClockConfig+0x128>)
 8001946:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800194a:	bf1e      	ittt	ne
 800194c:	685a      	ldrne	r2, [r3, #4]
 800194e:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001952:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001954:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001956:	bf42      	ittt	mi
 8001958:	685a      	ldrmi	r2, [r3, #4]
 800195a:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800195e:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	68a0      	ldr	r0, [r4, #8]
 8001964:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001968:	4302      	orrs	r2, r0
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	e7b9      	b.n	80018e2 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800196e:	6862      	ldr	r2, [r4, #4]
 8001970:	4e1d      	ldr	r6, [pc, #116]	; (80019e8 <HAL_RCC_ClockConfig+0x128>)
 8001972:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001974:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001976:	d11a      	bne.n	80019ae <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001978:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800197c:	d0a5      	beq.n	80018ca <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800197e:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001980:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001984:	f023 0303 	bic.w	r3, r3, #3
 8001988:	4313      	orrs	r3, r2
 800198a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800198c:	f7fe ff1c 	bl	80007c8 <HAL_GetTick>
 8001990:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001992:	6873      	ldr	r3, [r6, #4]
 8001994:	6862      	ldr	r2, [r4, #4]
 8001996:	f003 030c 	and.w	r3, r3, #12
 800199a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800199e:	d0a2      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a0:	f7fe ff12 	bl	80007c8 <HAL_GetTick>
 80019a4:	1bc0      	subs	r0, r0, r7
 80019a6:	4540      	cmp	r0, r8
 80019a8:	d9f3      	bls.n	8001992 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 80019aa:	2003      	movs	r0, #3
 80019ac:	e78e      	b.n	80018cc <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ae:	2a02      	cmp	r2, #2
 80019b0:	d102      	bne.n	80019b8 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80019b6:	e7e1      	b.n	800197c <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b8:	f013 0f02 	tst.w	r3, #2
 80019bc:	e7de      	b.n	800197c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019be:	6813      	ldr	r3, [r2, #0]
 80019c0:	f023 0307 	bic.w	r3, r3, #7
 80019c4:	432b      	orrs	r3, r5
 80019c6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c8:	6813      	ldr	r3, [r2, #0]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	42ab      	cmp	r3, r5
 80019d0:	f47f af7b 	bne.w	80018ca <HAL_RCC_ClockConfig+0xa>
 80019d4:	e78d      	b.n	80018f2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019d6:	686b      	ldr	r3, [r5, #4]
 80019d8:	68e1      	ldr	r1, [r4, #12]
 80019da:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80019de:	430b      	orrs	r3, r1
 80019e0:	606b      	str	r3, [r5, #4]
 80019e2:	e78b      	b.n	80018fc <HAL_RCC_ClockConfig+0x3c>
 80019e4:	40022000 	.word	0x40022000
 80019e8:	40021000 	.word	0x40021000
 80019ec:	08004bcc 	.word	0x08004bcc
 80019f0:	20000008 	.word	0x20000008
 80019f4:	20000004 	.word	0x20000004

080019f8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019f8:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <HAL_RCC_GetPCLK1Freq+0x14>)
 80019fa:	4a05      	ldr	r2, [pc, #20]	; (8001a10 <HAL_RCC_GetPCLK1Freq+0x18>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001a02:	5cd3      	ldrb	r3, [r2, r3]
 8001a04:	4a03      	ldr	r2, [pc, #12]	; (8001a14 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001a06:	6810      	ldr	r0, [r2, #0]
}
 8001a08:	40d8      	lsrs	r0, r3
 8001a0a:	4770      	bx	lr
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	08004bdc 	.word	0x08004bdc
 8001a14:	20000008 	.word	0x20000008

08001a18 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a18:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <HAL_RCC_GetPCLK2Freq+0x14>)
 8001a1a:	4a05      	ldr	r2, [pc, #20]	; (8001a30 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001a22:	5cd3      	ldrb	r3, [r2, r3]
 8001a24:	4a03      	ldr	r2, [pc, #12]	; (8001a34 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001a26:	6810      	ldr	r0, [r2, #0]
}
 8001a28:	40d8      	lsrs	r0, r3
 8001a2a:	4770      	bx	lr
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	08004bdc 	.word	0x08004bdc
 8001a34:	20000008 	.word	0x20000008

08001a38 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001a38:	6803      	ldr	r3, [r0, #0]
{
 8001a3a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001a3e:	07d9      	lsls	r1, r3, #31
{
 8001a40:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001a42:	d520      	bpl.n	8001a86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a44:	4c36      	ldr	r4, [pc, #216]	; (8001b20 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001a46:	69e3      	ldr	r3, [r4, #28]
 8001a48:	00da      	lsls	r2, r3, #3
 8001a4a:	d432      	bmi.n	8001ab2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001a4c:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a4e:	69e3      	ldr	r3, [r4, #28]
 8001a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a54:	61e3      	str	r3, [r4, #28]
 8001a56:	69e3      	ldr	r3, [r4, #28]
 8001a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5c:	9301      	str	r3, [sp, #4]
 8001a5e:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a60:	4f30      	ldr	r7, [pc, #192]	; (8001b24 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	05db      	lsls	r3, r3, #23
 8001a66:	d526      	bpl.n	8001ab6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a68:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a6a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001a6e:	d136      	bne.n	8001ade <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a70:	6a23      	ldr	r3, [r4, #32]
 8001a72:	686a      	ldr	r2, [r5, #4]
 8001a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a7c:	b11e      	cbz	r6, 8001a86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a7e:	69e3      	ldr	r3, [r4, #28]
 8001a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a84:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001a86:	6828      	ldr	r0, [r5, #0]
 8001a88:	0783      	lsls	r3, r0, #30
 8001a8a:	d506      	bpl.n	8001a9a <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001a8c:	4924      	ldr	r1, [pc, #144]	; (8001b20 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001a8e:	68ab      	ldr	r3, [r5, #8]
 8001a90:	684a      	ldr	r2, [r1, #4]
 8001a92:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001a96:	431a      	orrs	r2, r3
 8001a98:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001a9a:	f010 0010 	ands.w	r0, r0, #16
 8001a9e:	d01b      	beq.n	8001ad8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001aa0:	4a1f      	ldr	r2, [pc, #124]	; (8001b20 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001aa2:	68e9      	ldr	r1, [r5, #12]
 8001aa4:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001aa6:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001aa8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001aac:	430b      	orrs	r3, r1
 8001aae:	6053      	str	r3, [r2, #4]
 8001ab0:	e012      	b.n	8001ad8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001ab2:	2600      	movs	r6, #0
 8001ab4:	e7d4      	b.n	8001a60 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001abc:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001abe:	f7fe fe83 	bl	80007c8 <HAL_GetTick>
 8001ac2:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	05d8      	lsls	r0, r3, #23
 8001ac8:	d4ce      	bmi.n	8001a68 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aca:	f7fe fe7d 	bl	80007c8 <HAL_GetTick>
 8001ace:	eba0 0008 	sub.w	r0, r0, r8
 8001ad2:	2864      	cmp	r0, #100	; 0x64
 8001ad4:	d9f6      	bls.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001ad6:	2003      	movs	r0, #3
}
 8001ad8:	b002      	add	sp, #8
 8001ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ade:	686a      	ldr	r2, [r5, #4]
 8001ae0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d0c3      	beq.n	8001a70 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ae8:	2001      	movs	r0, #1
 8001aea:	4a0f      	ldr	r2, [pc, #60]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001aec:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001aee:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001af2:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001af4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001af8:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 8001afc:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001afe:	07d9      	lsls	r1, r3, #31
 8001b00:	d5b6      	bpl.n	8001a70 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001b02:	f7fe fe61 	bl	80007c8 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b06:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001b0a:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b0c:	6a23      	ldr	r3, [r4, #32]
 8001b0e:	079a      	lsls	r2, r3, #30
 8001b10:	d4ae      	bmi.n	8001a70 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b12:	f7fe fe59 	bl	80007c8 <HAL_GetTick>
 8001b16:	1bc0      	subs	r0, r0, r7
 8001b18:	4540      	cmp	r0, r8
 8001b1a:	d9f7      	bls.n	8001b0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001b1c:	e7db      	b.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001b1e:	bf00      	nop
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40007000 	.word	0x40007000
 8001b28:	42420000 	.word	0x42420000

08001b2c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	b570      	push	{r4, r5, r6, lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b30:	4b33      	ldr	r3, [pc, #204]	; (8001c00 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>)
{
 8001b32:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b34:	ad02      	add	r5, sp, #8
 8001b36:	f103 0610 	add.w	r6, r3, #16
 8001b3a:	462c      	mov	r4, r5
 8001b3c:	6818      	ldr	r0, [r3, #0]
 8001b3e:	6859      	ldr	r1, [r3, #4]
 8001b40:	3308      	adds	r3, #8
 8001b42:	c403      	stmia	r4!, {r0, r1}
 8001b44:	42b3      	cmp	r3, r6
 8001b46:	4625      	mov	r5, r4
 8001b48:	d1f7      	bne.n	8001b3a <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b4a:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001b4e:	2a02      	cmp	r2, #2
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b50:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 8001b54:	d047      	beq.n	8001be6 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8001b56:	2a10      	cmp	r2, #16
 8001b58:	d003      	beq.n	8001b62 <HAL_RCCEx_GetPeriphCLKFreq+0x36>
 8001b5a:	2a01      	cmp	r2, #1
 8001b5c:	d024      	beq.n	8001ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
  uint32_t temp_reg = 0U, frequency = 0U;
 8001b5e:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 8001b60:	e036      	b.n	8001bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
      temp_reg = RCC->CFGR;
 8001b62:	4a28      	ldr	r2, [pc, #160]	; (8001c04 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 8001b64:	6851      	ldr	r1, [r2, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001b66:	6810      	ldr	r0, [r2, #0]
 8001b68:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8001b6c:	d030      	beq.n	8001bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b6e:	f3c1 4383 	ubfx	r3, r1, #18, #4
 8001b72:	3318      	adds	r3, #24
 8001b74:	446b      	add	r3, sp
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b76:	03c9      	lsls	r1, r1, #15
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b78:	f813 0c10 	ldrb.w	r0, [r3, #-16]
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b7c:	bf49      	itett	mi
 8001b7e:	6853      	ldrmi	r3, [r2, #4]
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b80:	4b21      	ldrpl	r3, [pc, #132]	; (8001c08 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b82:	f3c3 4340 	ubfxmi	r3, r3, #17, #1
 8001b86:	3318      	addmi	r3, #24
 8001b88:	bf41      	itttt	mi
 8001b8a:	446b      	addmi	r3, sp
 8001b8c:	f813 1c14 	ldrbmi.w	r1, [r3, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001b90:	4b1e      	ldrmi	r3, [pc, #120]	; (8001c0c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8001b92:	fbb3 f3f1 	udivmi	r3, r3, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b96:	4358      	muls	r0, r3
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001b98:	6853      	ldr	r3, [r2, #4]
 8001b9a:	025b      	lsls	r3, r3, #9
 8001b9c:	d418      	bmi.n	8001bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
          frequency = (pllclk * 2) / 3;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001ba2:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001ba6:	e013      	b.n	8001bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001ba8:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8001bac:	4a15      	ldr	r2, [pc, #84]	; (8001c04 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 8001bae:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001bb0:	4019      	ands	r1, r3
 8001bb2:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8001bb6:	d01f      	beq.n	8001bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001bb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bc0:	d108      	bne.n	8001bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
        frequency = LSI_VALUE;
 8001bc2:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001bc6:	6a50      	ldr	r0, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8001bc8:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 8001bcc:	bf18      	it	ne
 8001bce:	4618      	movne	r0, r3
}
 8001bd0:	b006      	add	sp, #24
 8001bd2:	bd70      	pop	{r4, r5, r6, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001bd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001bd8:	d1c1      	bne.n	8001b5e <HAL_RCCEx_GetPeriphCLKFreq+0x32>
 8001bda:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8001bdc:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001be0:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8001be4:	e7f2      	b.n	8001bcc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001be6:	f7ff ff17 	bl	8001a18 <HAL_RCC_GetPCLK2Freq>
 8001bea:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	e7d4      	b.n	8001ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        frequency = LSE_VALUE;
 8001bf8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001bfc:	e7e8      	b.n	8001bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 8001bfe:	bf00      	nop
 8001c00:	080046c4 	.word	0x080046c4
 8001c04:	40021000 	.word	0x40021000
 8001c08:	003d0900 	.word	0x003d0900
 8001c0c:	007a1200 	.word	0x007a1200

08001c10 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001c10:	b538      	push	{r3, r4, r5, lr}
 8001c12:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  tickstart = HAL_GetTick();
 8001c14:	f7fe fdd8 	bl	80007c8 <HAL_GetTick>
 8001c18:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001c1a:	6823      	ldr	r3, [r4, #0]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	0692      	lsls	r2, r2, #26
 8001c20:	d505      	bpl.n	8001c2e <RTC_EnterInitMode+0x1e>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);


  return HAL_OK;
 8001c22:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	f042 0210 	orr.w	r2, r2, #16
 8001c2a:	605a      	str	r2, [r3, #4]
}
 8001c2c:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001c2e:	f7fe fdcb 	bl	80007c8 <HAL_GetTick>
 8001c32:	1b40      	subs	r0, r0, r5
 8001c34:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001c38:	d9ef      	bls.n	8001c1a <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 8001c3a:	2003      	movs	r0, #3
 8001c3c:	e7f6      	b.n	8001c2c <RTC_EnterInitMode+0x1c>

08001c3e <RTC_ExitInitMode>:
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart = 0U;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001c3e:	6802      	ldr	r2, [r0, #0]
{
 8001c40:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001c42:	6853      	ldr	r3, [r2, #4]
{
 8001c44:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001c46:	f023 0310 	bic.w	r3, r3, #16
 8001c4a:	6053      	str	r3, [r2, #4]

  tickstart = HAL_GetTick();
 8001c4c:	f7fe fdbc 	bl	80007c8 <HAL_GetTick>
 8001c50:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001c52:	6823      	ldr	r3, [r4, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	069b      	lsls	r3, r3, #26
 8001c58:	d501      	bpl.n	8001c5e <RTC_ExitInitMode+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8001c5a:	2000      	movs	r0, #0
}
 8001c5c:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001c5e:	f7fe fdb3 	bl	80007c8 <HAL_GetTick>
 8001c62:	1b40      	subs	r0, r0, r5
 8001c64:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001c68:	d9f3      	bls.n	8001c52 <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 8001c6a:	2003      	movs	r0, #3
 8001c6c:	e7f6      	b.n	8001c5c <RTC_ExitInitMode+0x1e>

08001c6e <HAL_RTC_WaitForSynchro>:
{
 8001c6e:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 8001c70:	4604      	mov	r4, r0
 8001c72:	b1a8      	cbz	r0, 8001ca0 <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8001c74:	6802      	ldr	r2, [r0, #0]
 8001c76:	6853      	ldr	r3, [r2, #4]
 8001c78:	f023 0308 	bic.w	r3, r3, #8
 8001c7c:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8001c7e:	f7fe fda3 	bl	80007c8 <HAL_GetTick>
 8001c82:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001c84:	6823      	ldr	r3, [r4, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	071b      	lsls	r3, r3, #28
 8001c8a:	d501      	bpl.n	8001c90 <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 8001c8c:	2000      	movs	r0, #0
}
 8001c8e:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001c90:	f7fe fd9a 	bl	80007c8 <HAL_GetTick>
 8001c94:	1b40      	subs	r0, r0, r5
 8001c96:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001c9a:	d9f3      	bls.n	8001c84 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8001c9c:	2003      	movs	r0, #3
 8001c9e:	e7f6      	b.n	8001c8e <HAL_RTC_WaitForSynchro+0x20>
    return HAL_ERROR;
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	e7f4      	b.n	8001c8e <HAL_RTC_WaitForSynchro+0x20>

08001ca4 <HAL_RTC_Init>:
{
 8001ca4:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8001ca6:	4604      	mov	r4, r0
 8001ca8:	b170      	cbz	r0, 8001cc8 <HAL_RTC_Init+0x24>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001caa:	7c43      	ldrb	r3, [r0, #17]
 8001cac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001cb0:	b913      	cbnz	r3, 8001cb8 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8001cb2:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8001cb4:	f002 f9dc 	bl	8004070 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001cb8:	2302      	movs	r3, #2
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001cba:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001cbc:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001cbe:	f7ff ffd6 	bl	8001c6e <HAL_RTC_WaitForSynchro>
 8001cc2:	b118      	cbz	r0, 8001ccc <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001cc4:	2304      	movs	r3, #4
 8001cc6:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8001cc8:	2001      	movs	r0, #1
 8001cca:	e036      	b.n	8001d3a <HAL_RTC_Init+0x96>
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001ccc:	4620      	mov	r0, r4
 8001cce:	f7ff ff9f 	bl	8001c10 <RTC_EnterInitMode>
 8001cd2:	2800      	cmp	r0, #0
 8001cd4:	d1f6      	bne.n	8001cc4 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001cd6:	6822      	ldr	r2, [r4, #0]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001cd8:	68a0      	ldr	r0, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001cda:	6853      	ldr	r3, [r2, #4]
 8001cdc:	f023 0307 	bic.w	r3, r3, #7
 8001ce0:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001ce2:	4a16      	ldr	r2, [pc, #88]	; (8001d3c <HAL_RTC_Init+0x98>)
 8001ce4:	b118      	cbz	r0, 8001cee <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001ce6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001ce8:	f021 0101 	bic.w	r1, r1, #1
 8001cec:	6311      	str	r1, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001cee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001cf0:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8001cf4:	4303      	orrs	r3, r0
 8001cf6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001cf8:	6860      	ldr	r0, [r4, #4]
 8001cfa:	1c43      	adds	r3, r0, #1
 8001cfc:	d105      	bne.n	8001d0a <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8001cfe:	2001      	movs	r0, #1
 8001d00:	f7ff ff14 	bl	8001b2c <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8001d04:	2800      	cmp	r0, #0
 8001d06:	d0dd      	beq.n	8001cc4 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 8001d08:	3801      	subs	r0, #1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8001d0a:	6822      	ldr	r2, [r4, #0]
 8001d0c:	6893      	ldr	r3, [r2, #8]
 8001d0e:	f023 030f 	bic.w	r3, r3, #15
 8001d12:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8001d16:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8001d18:	68d3      	ldr	r3, [r2, #12]
 8001d1a:	b280      	uxth	r0, r0
 8001d1c:	0c1b      	lsrs	r3, r3, #16
 8001d1e:	041b      	lsls	r3, r3, #16
 8001d20:	4318      	orrs	r0, r3
 8001d22:	60d0      	str	r0, [r2, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001d24:	4620      	mov	r0, r4
 8001d26:	f7ff ff8a 	bl	8001c3e <RTC_ExitInitMode>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	b110      	cbz	r0, 8001d34 <HAL_RTC_Init+0x90>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001d2e:	2204      	movs	r2, #4
 8001d30:	7462      	strb	r2, [r4, #17]
      return HAL_ERROR;
 8001d32:	e7c9      	b.n	8001cc8 <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001d34:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001d36:	81e3      	strh	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 8001d38:	7463      	strb	r3, [r4, #17]
}
 8001d3a:	bd10      	pop	{r4, pc}
 8001d3c:	40006c00 	.word	0x40006c00

08001d40 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d40:	6803      	ldr	r3, [r0, #0]
 8001d42:	68da      	ldr	r2, [r3, #12]
 8001d44:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001d48:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d4a:	695a      	ldr	r2, [r3, #20]
 8001d4c:	f022 0201 	bic.w	r2, r2, #1
 8001d50:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d52:	2320      	movs	r3, #32
 8001d54:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8001d58:	4770      	bx	lr
	...

08001d5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d5c:	b538      	push	{r3, r4, r5, lr}
 8001d5e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d60:	6803      	ldr	r3, [r0, #0]
 8001d62:	68c1      	ldr	r1, [r0, #12]
 8001d64:	691a      	ldr	r2, [r3, #16]
 8001d66:	2519      	movs	r5, #25
 8001d68:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001d70:	6882      	ldr	r2, [r0, #8]
 8001d72:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001d74:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001d76:	4302      	orrs	r2, r0
 8001d78:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001d7a:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8001d7e:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001d82:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8001d84:	430a      	orrs	r2, r1
 8001d86:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d88:	695a      	ldr	r2, [r3, #20]
 8001d8a:	69a1      	ldr	r1, [r4, #24]
 8001d8c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001d90:	430a      	orrs	r2, r1
 8001d92:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001d94:	4a10      	ldr	r2, [pc, #64]	; (8001dd8 <UART_SetConfig+0x7c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d115      	bne.n	8001dc6 <UART_SetConfig+0x6a>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001d9a:	f7ff fe3d 	bl	8001a18 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d9e:	fb05 f300 	mul.w	r3, r5, r0
 8001da2:	6862      	ldr	r2, [r4, #4]
 8001da4:	0092      	lsls	r2, r2, #2
 8001da6:	fbb3 f3f2 	udiv	r3, r3, r2
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001daa:	2264      	movs	r2, #100	; 0x64
 8001dac:	fbb3 f1f2 	udiv	r1, r3, r2
 8001db0:	fb02 3311 	mls	r3, r2, r1, r3
 8001db4:	011b      	lsls	r3, r3, #4
 8001db6:	3332      	adds	r3, #50	; 0x32
 8001db8:	fbb3 f3f2 	udiv	r3, r3, r2
 8001dbc:	6820      	ldr	r0, [r4, #0]
 8001dbe:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001dc2:	6083      	str	r3, [r0, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 8001dc4:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8001dc6:	f7ff fe17 	bl	80019f8 <HAL_RCC_GetPCLK1Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001dca:	fb05 f300 	mul.w	r3, r5, r0
 8001dce:	6860      	ldr	r0, [r4, #4]
 8001dd0:	0080      	lsls	r0, r0, #2
 8001dd2:	fbb3 f3f0 	udiv	r3, r3, r0
 8001dd6:	e7e8      	b.n	8001daa <UART_SetConfig+0x4e>
 8001dd8:	40013800 	.word	0x40013800

08001ddc <HAL_UART_Init>:
{
 8001ddc:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001dde:	4604      	mov	r4, r0
 8001de0:	b340      	cbz	r0, 8001e34 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001de2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001de6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001dea:	b91b      	cbnz	r3, 8001df4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001dec:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001df0:	f002 fa98 	bl	8004324 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001df4:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001df6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001df8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001dfc:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001dfe:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001e00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e04:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001e06:	f7ff ffa9 	bl	8001d5c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e0a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e0c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e0e:	691a      	ldr	r2, [r3, #16]
 8001e10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e16:	695a      	ldr	r2, [r3, #20]
 8001e18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e1c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e24:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001e26:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e28:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001e2a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001e2e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8001e32:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001e34:	2001      	movs	r0, #1
 8001e36:	e7fc      	b.n	8001e32 <HAL_UART_Init+0x56>

08001e38 <HAL_LIN_Init>:
{
 8001e38:	b538      	push	{r3, r4, r5, lr}
 8001e3a:	460d      	mov	r5, r1
  if (huart == NULL)
 8001e3c:	4604      	mov	r4, r0
 8001e3e:	2800      	cmp	r0, #0
 8001e40:	d033      	beq.n	8001eaa <HAL_LIN_Init+0x72>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001e42:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001e46:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e4a:	b91b      	cbnz	r3, 8001e54 <HAL_LIN_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 8001e4c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001e50:	f002 fa68 	bl	8004324 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001e54:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001e56:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001e58:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001e5c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001e5e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001e60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e64:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001e66:	f7ff ff79 	bl	8001d5c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 8001e6a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e6c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 8001e6e:	691a      	ldr	r2, [r3, #16]
 8001e70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 8001e76:	695a      	ldr	r2, [r3, #20]
 8001e78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e7c:	615a      	str	r2, [r3, #20]
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 8001e7e:	691a      	ldr	r2, [r3, #16]
 8001e80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 8001e86:	691a      	ldr	r2, [r3, #16]
 8001e88:	f022 0220 	bic.w	r2, r2, #32
 8001e8c:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, BreakDetectLength);
 8001e8e:	691a      	ldr	r2, [r3, #16]
 8001e90:	432a      	orrs	r2, r5
 8001e92:	611a      	str	r2, [r3, #16]
  __HAL_UART_ENABLE(huart);
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e9a:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001e9c:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e9e:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001ea0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001ea4:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8001ea8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001eaa:	2001      	movs	r0, #1
 8001eac:	e7fc      	b.n	8001ea8 <HAL_LIN_Init+0x70>

08001eae <HAL_UART_DeInit>:
{
 8001eae:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001eb0:	4604      	mov	r4, r0
 8001eb2:	b190      	cbz	r0, 8001eda <HAL_UART_DeInit+0x2c>
  huart->gState = HAL_UART_STATE_BUSY;
 8001eb4:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001eb6:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001eb8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001ebc:	68d3      	ldr	r3, [r2, #12]
 8001ebe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ec2:	60d3      	str	r3, [r2, #12]
  HAL_UART_MspDeInit(huart);
 8001ec4:	f002 fb22 	bl	800450c <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ec8:	2000      	movs	r0, #0
 8001eca:	63e0      	str	r0, [r4, #60]	; 0x3c
  __HAL_UNLOCK(huart);
 8001ecc:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  huart->gState = HAL_UART_STATE_RESET;
 8001ed0:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 8001ed4:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
}
 8001ed8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001eda:	2001      	movs	r0, #1
 8001edc:	e7fc      	b.n	8001ed8 <HAL_UART_DeInit+0x2a>
	...

08001ee0 <HAL_UART_Transmit_DMA>:
{
 8001ee0:	b538      	push	{r3, r4, r5, lr}
 8001ee2:	4604      	mov	r4, r0
 8001ee4:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001ee6:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001eea:	2a20      	cmp	r2, #32
 8001eec:	d12a      	bne.n	8001f44 <HAL_UART_Transmit_DMA+0x64>
    if ((pData == NULL) || (Size == 0U))
 8001eee:	b339      	cbz	r1, 8001f40 <HAL_UART_Transmit_DMA+0x60>
 8001ef0:	b333      	cbz	r3, 8001f40 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 8001ef2:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8001ef6:	2a01      	cmp	r2, #1
 8001ef8:	d024      	beq.n	8001f44 <HAL_UART_Transmit_DMA+0x64>
 8001efa:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001efc:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8001efe:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f02:	2221      	movs	r2, #33	; 0x21
    huart->TxXferCount = Size;
 8001f04:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001f06:	6b20      	ldr	r0, [r4, #48]	; 0x30
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f08:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f0a:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001f0e:	4a0e      	ldr	r2, [pc, #56]	; (8001f48 <HAL_UART_Transmit_DMA+0x68>)
    huart->TxXferSize = Size;
 8001f10:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 8001f12:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001f14:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001f16:	4a0d      	ldr	r2, [pc, #52]	; (8001f4c <HAL_UART_Transmit_DMA+0x6c>)
 8001f18:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001f1a:	4a0d      	ldr	r2, [pc, #52]	; (8001f50 <HAL_UART_Transmit_DMA+0x70>)
    huart->hdmatx->XferAbortCallback = NULL;
 8001f1c:	e9c0 250c 	strd	r2, r5, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8001f20:	6822      	ldr	r2, [r4, #0]
 8001f22:	3204      	adds	r2, #4
 8001f24:	f7ff f88e 	bl	8001044 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8001f28:	f06f 0240 	mvn.w	r2, #64	; 0x40
    return HAL_OK;
 8001f2c:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8001f2e:	6823      	ldr	r3, [r4, #0]
 8001f30:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 8001f32:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001f36:	695a      	ldr	r2, [r3, #20]
 8001f38:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f3c:	615a      	str	r2, [r3, #20]
}
 8001f3e:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8001f40:	2001      	movs	r0, #1
 8001f42:	e7fc      	b.n	8001f3e <HAL_UART_Transmit_DMA+0x5e>
    return HAL_BUSY;
 8001f44:	2002      	movs	r0, #2
 8001f46:	e7fa      	b.n	8001f3e <HAL_UART_Transmit_DMA+0x5e>
 8001f48:	08001f55 	.word	0x08001f55
 8001f4c:	08001f83 	.word	0x08001f83
 8001f50:	08002001 	.word	0x08002001

08001f54 <UART_DMATransmitCplt>:
{
 8001f54:	b508      	push	{r3, lr}
 8001f56:	4603      	mov	r3, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f58:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f5a:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f013 0320 	ands.w	r3, r3, #32
 8001f62:	d10a      	bne.n	8001f7a <UART_DMATransmitCplt+0x26>
    huart->TxXferCount = 0x00U;
 8001f64:	84c3      	strh	r3, [r0, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001f66:	6803      	ldr	r3, [r0, #0]
 8001f68:	695a      	ldr	r2, [r3, #20]
 8001f6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f6e:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001f70:	68da      	ldr	r2, [r3, #12]
 8001f72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f76:	60da      	str	r2, [r3, #12]
}
 8001f78:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8001f7a:	f001 feaf 	bl	8003cdc <HAL_UART_TxCpltCallback>
}
 8001f7e:	e7fb      	b.n	8001f78 <UART_DMATransmitCplt+0x24>

08001f80 <HAL_UART_TxHalfCpltCallback>:
 8001f80:	4770      	bx	lr

08001f82 <UART_DMATxHalfCplt>:
{
 8001f82:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8001f84:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001f86:	f7ff fffb 	bl	8001f80 <HAL_UART_TxHalfCpltCallback>
}
 8001f8a:	bd08      	pop	{r3, pc}

08001f8c <HAL_UART_RxCpltCallback>:
 8001f8c:	4770      	bx	lr

08001f8e <UART_Receive_IT.isra.0>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001f8e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8001f92:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001f94:	2b22      	cmp	r3, #34	; 0x22
 8001f96:	d124      	bne.n	8001fe2 <UART_Receive_IT.isra.0+0x54>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f98:	6881      	ldr	r1, [r0, #8]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001f9a:	6904      	ldr	r4, [r0, #16]
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f9c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001fa0:	6802      	ldr	r2, [r0, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8001fa2:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001fa4:	d122      	bne.n	8001fec <UART_Receive_IT.isra.0+0x5e>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001fa6:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001fa8:	b9e4      	cbnz	r4, 8001fe4 <UART_Receive_IT.isra.0+0x56>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001faa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fae:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001fb2:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8001fb4:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8001fbc:	b98b      	cbnz	r3, 8001fe2 <UART_Receive_IT.isra.0+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001fbe:	6803      	ldr	r3, [r0, #0]
 8001fc0:	68da      	ldr	r2, [r3, #12]
 8001fc2:	f022 0220 	bic.w	r2, r2, #32
 8001fc6:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fce:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001fd0:	695a      	ldr	r2, [r3, #20]
 8001fd2:	f022 0201 	bic.w	r2, r2, #1
 8001fd6:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001fd8:	2320      	movs	r3, #32
 8001fda:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001fde:	f7ff ffd5 	bl	8001f8c <HAL_UART_RxCpltCallback>
}
 8001fe2:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	f823 2b01 	strh.w	r2, [r3], #1
 8001fea:	e7e2      	b.n	8001fb2 <UART_Receive_IT.isra.0+0x24>
        huart->pRxBuffPtr += 1U;
 8001fec:	1c59      	adds	r1, r3, #1
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001fee:	6852      	ldr	r2, [r2, #4]
 8001ff0:	6281      	str	r1, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001ff2:	b90c      	cbnz	r4, 8001ff8 <UART_Receive_IT.isra.0+0x6a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001ff4:	701a      	strb	r2, [r3, #0]
 8001ff6:	e7dd      	b.n	8001fb4 <UART_Receive_IT.isra.0+0x26>
 8001ff8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ffc:	e7fa      	b.n	8001ff4 <UART_Receive_IT.isra.0+0x66>

08001ffe <HAL_UART_ErrorCallback>:
 8001ffe:	4770      	bx	lr

08002000 <UART_DMAError>:
{
 8002000:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002002:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002004:	6803      	ldr	r3, [r0, #0]
 8002006:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002008:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 800200c:	2921      	cmp	r1, #33	; 0x21
 800200e:	d10a      	bne.n	8002026 <UART_DMAError+0x26>
 8002010:	0612      	lsls	r2, r2, #24
 8002012:	d508      	bpl.n	8002026 <UART_DMAError+0x26>
    huart->TxXferCount = 0x00U;
 8002014:	2200      	movs	r2, #0
 8002016:	84c2      	strh	r2, [r0, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002018:	68da      	ldr	r2, [r3, #12]
 800201a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800201e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002020:	2220      	movs	r2, #32
 8002022:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002026:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002028:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 800202c:	2a22      	cmp	r2, #34	; 0x22
 800202e:	d105      	bne.n	800203c <UART_DMAError+0x3c>
 8002030:	065b      	lsls	r3, r3, #25
 8002032:	d503      	bpl.n	800203c <UART_DMAError+0x3c>
    huart->RxXferCount = 0x00U;
 8002034:	2300      	movs	r3, #0
 8002036:	85c3      	strh	r3, [r0, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002038:	f7ff fe82 	bl	8001d40 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800203c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800203e:	f043 0310 	orr.w	r3, r3, #16
 8002042:	63c3      	str	r3, [r0, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8002044:	f7ff ffdb 	bl	8001ffe <HAL_UART_ErrorCallback>
}
 8002048:	bd08      	pop	{r3, pc}
	...

0800204c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800204c:	6803      	ldr	r3, [r0, #0]
{
 800204e:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002050:	681a      	ldr	r2, [r3, #0]
{
 8002052:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8002054:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002056:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002058:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 800205a:	d107      	bne.n	800206c <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800205c:	0696      	lsls	r6, r2, #26
 800205e:	d559      	bpl.n	8002114 <HAL_UART_IRQHandler+0xc8>
 8002060:	068d      	lsls	r5, r1, #26
 8002062:	d557      	bpl.n	8002114 <HAL_UART_IRQHandler+0xc8>
}
 8002064:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002068:	f7ff bf91 	b.w	8001f8e <UART_Receive_IT.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800206c:	f005 0001 	and.w	r0, r5, #1
 8002070:	f401 7590 	and.w	r5, r1, #288	; 0x120
 8002074:	4305      	orrs	r5, r0
 8002076:	d04d      	beq.n	8002114 <HAL_UART_IRQHandler+0xc8>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002078:	07d6      	lsls	r6, r2, #31
 800207a:	d505      	bpl.n	8002088 <HAL_UART_IRQHandler+0x3c>
 800207c:	05cd      	lsls	r5, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800207e:	bf42      	ittt	mi
 8002080:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8002082:	f043 0301 	orrmi.w	r3, r3, #1
 8002086:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002088:	0753      	lsls	r3, r2, #29
 800208a:	d504      	bpl.n	8002096 <HAL_UART_IRQHandler+0x4a>
 800208c:	b118      	cbz	r0, 8002096 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800208e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002090:	f043 0302 	orr.w	r3, r3, #2
 8002094:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002096:	0796      	lsls	r6, r2, #30
 8002098:	d504      	bpl.n	80020a4 <HAL_UART_IRQHandler+0x58>
 800209a:	b118      	cbz	r0, 80020a4 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800209c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800209e:	f043 0304 	orr.w	r3, r3, #4
 80020a2:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020a4:	0715      	lsls	r5, r2, #28
 80020a6:	d504      	bpl.n	80020b2 <HAL_UART_IRQHandler+0x66>
 80020a8:	b118      	cbz	r0, 80020b2 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80020aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80020ac:	f043 0308 	orr.w	r3, r3, #8
 80020b0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80020b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80020b4:	b34b      	cbz	r3, 800210a <HAL_UART_IRQHandler+0xbe>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020b6:	0690      	lsls	r0, r2, #26
 80020b8:	d504      	bpl.n	80020c4 <HAL_UART_IRQHandler+0x78>
 80020ba:	0689      	lsls	r1, r1, #26
 80020bc:	d502      	bpl.n	80020c4 <HAL_UART_IRQHandler+0x78>
        UART_Receive_IT(huart);
 80020be:	4620      	mov	r0, r4
 80020c0:	f7ff ff65 	bl	8001f8e <UART_Receive_IT.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80020c4:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 80020c6:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80020c8:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80020ca:	6be5      	ldr	r5, [r4, #60]	; 0x3c
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80020cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80020d0:	f005 0508 	and.w	r5, r5, #8
 80020d4:	431d      	orrs	r5, r3
 80020d6:	d019      	beq.n	800210c <HAL_UART_IRQHandler+0xc0>
        UART_EndRxTransfer(huart);
 80020d8:	f7ff fe32 	bl	8001d40 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020dc:	6823      	ldr	r3, [r4, #0]
 80020de:	695a      	ldr	r2, [r3, #20]
 80020e0:	0652      	lsls	r2, r2, #25
 80020e2:	d50f      	bpl.n	8002104 <HAL_UART_IRQHandler+0xb8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020e4:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80020e6:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020ec:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80020ee:	b148      	cbz	r0, 8002104 <HAL_UART_IRQHandler+0xb8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80020f0:	4b25      	ldr	r3, [pc, #148]	; (8002188 <HAL_UART_IRQHandler+0x13c>)
 80020f2:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80020f4:	f7fe ffe2 	bl	80010bc <HAL_DMA_Abort_IT>
 80020f8:	b138      	cbz	r0, 800210a <HAL_UART_IRQHandler+0xbe>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80020fa:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80020fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002100:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002102:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002104:	4620      	mov	r0, r4
 8002106:	f7ff ff7a 	bl	8001ffe <HAL_UART_ErrorCallback>
}
 800210a:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800210c:	f7ff ff77 	bl	8001ffe <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002110:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002112:	e7fa      	b.n	800210a <HAL_UART_IRQHandler+0xbe>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002114:	0616      	lsls	r6, r2, #24
 8002116:	d528      	bpl.n	800216a <HAL_UART_IRQHandler+0x11e>
 8002118:	060d      	lsls	r5, r1, #24
 800211a:	d526      	bpl.n	800216a <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800211c:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002120:	2a21      	cmp	r2, #33	; 0x21
 8002122:	d1f2      	bne.n	800210a <HAL_UART_IRQHandler+0xbe>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002124:	68a1      	ldr	r1, [r4, #8]
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002126:	6a22      	ldr	r2, [r4, #32]
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002128:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800212c:	d118      	bne.n	8002160 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800212e:	8811      	ldrh	r1, [r2, #0]
 8002130:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002134:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002136:	6921      	ldr	r1, [r4, #16]
 8002138:	b981      	cbnz	r1, 800215c <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 800213a:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 800213c:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 800213e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002140:	3a01      	subs	r2, #1
 8002142:	b292      	uxth	r2, r2
 8002144:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002146:	2a00      	cmp	r2, #0
 8002148:	d1df      	bne.n	800210a <HAL_UART_IRQHandler+0xbe>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800214a:	68da      	ldr	r2, [r3, #12]
 800214c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002150:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002152:	68da      	ldr	r2, [r3, #12]
 8002154:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002158:	60da      	str	r2, [r3, #12]
 800215a:	e7d6      	b.n	800210a <HAL_UART_IRQHandler+0xbe>
        huart->pTxBuffPtr += 1U;
 800215c:	3201      	adds	r2, #1
 800215e:	e7ed      	b.n	800213c <HAL_UART_IRQHandler+0xf0>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002160:	1c51      	adds	r1, r2, #1
 8002162:	6221      	str	r1, [r4, #32]
 8002164:	7812      	ldrb	r2, [r2, #0]
 8002166:	605a      	str	r2, [r3, #4]
 8002168:	e7e9      	b.n	800213e <HAL_UART_IRQHandler+0xf2>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800216a:	0650      	lsls	r0, r2, #25
 800216c:	d5cd      	bpl.n	800210a <HAL_UART_IRQHandler+0xbe>
 800216e:	064a      	lsls	r2, r1, #25
 8002170:	d5cb      	bpl.n	800210a <HAL_UART_IRQHandler+0xbe>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002172:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8002174:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002176:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800217a:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800217c:	2320      	movs	r3, #32
 800217e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002182:	f001 fdab 	bl	8003cdc <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8002186:	e7c0      	b.n	800210a <HAL_UART_IRQHandler+0xbe>
 8002188:	0800218d 	.word	0x0800218d

0800218c <UART_DMAAbortOnError>:
{
 800218c:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 800218e:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002190:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8002192:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002194:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002196:	f7ff ff32 	bl	8001ffe <HAL_UART_ErrorCallback>
}
 800219a:	bd08      	pop	{r3, pc}

0800219c <CAN_Buffer_Init>:
	can_msg_t Item[CAN_BUFFER_SIZE];
} CAN_Buffer, CAN_Log_Buffer;

void CAN_Buffer_Init(void)
{
	CAN_Buffer.Pointer_Read = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	4a02      	ldr	r2, [pc, #8]	; (80021a8 <CAN_Buffer_Init+0xc>)
 80021a0:	6013      	str	r3, [r2, #0]
	CAN_Buffer.Pointer_Write = 0;

	CAN_Log_Buffer.Pointer_Read = 0;
 80021a2:	4a02      	ldr	r2, [pc, #8]	; (80021ac <CAN_Buffer_Init+0x10>)
 80021a4:	6013      	str	r3, [r2, #0]
	CAN_Log_Buffer.Pointer_Write = 0;
}
 80021a6:	4770      	bx	lr
 80021a8:	20000030 	.word	0x20000030
 80021ac:	20000b78 	.word	0x20000b78

080021b0 <CAN_Buffer_Write_Data>:
{
	CAN_Buffer.Pointer_Read = CAN_Buffer.Pointer_Write;
}

HAL_StatusTypeDef CAN_Buffer_Write_Data(can_msg_t msg)
{
 80021b0:	b084      	sub	sp, #16
 80021b2:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t capacity;
	HAL_StatusTypeDef res;


    if(CAN_Buffer.Pointer_Write >= CAN_Buffer.Pointer_Read)
 80021b4:	4f14      	ldr	r7, [pc, #80]	; (8002208 <CAN_Buffer_Write_Data+0x58>)
{
 80021b6:	ac05      	add	r4, sp, #20
    if(CAN_Buffer.Pointer_Write >= CAN_Buffer.Pointer_Read)
 80021b8:	887e      	ldrh	r6, [r7, #2]
{
 80021ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if(CAN_Buffer.Pointer_Write >= CAN_Buffer.Pointer_Read)
 80021be:	883b      	ldrh	r3, [r7, #0]
 80021c0:	429e      	cmp	r6, r3
    {
        capacity = CAN_BUFFER_SIZE - (CAN_Buffer.Pointer_Write - CAN_Buffer.Pointer_Read);
 80021c2:	bf28      	it	cs
 80021c4:	333c      	addcs	r3, #60	; 0x3c
    }
    else
    {
        capacity = CAN_Buffer.Pointer_Read - CAN_Buffer.Pointer_Write;
 80021c6:	1b9b      	subs	r3, r3, r6
 80021c8:	b29b      	uxth	r3, r3
    }

	if(capacity > 1)
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d919      	bls.n	8002202 <CAN_Buffer_Write_Data+0x52>
	{
		CAN_Buffer.Item[CAN_Buffer.Pointer_Write] = msg;
 80021ce:	2430      	movs	r4, #48	; 0x30
 80021d0:	fb04 7406 	mla	r4, r4, r6, r7
 80021d4:	ad05      	add	r5, sp, #20
 80021d6:	3408      	adds	r4, #8
 80021d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
		CAN_Buffer.Pointer_Write = (CAN_Buffer.Pointer_Write < (CAN_BUFFER_SIZE-1)) ? (CAN_Buffer.Pointer_Write + 1) : 0;
 80021e4:	2e3a      	cmp	r6, #58	; 0x3a
 80021e6:	bf88      	it	hi
 80021e8:	2600      	movhi	r6, #0
		CAN_Buffer.Item[CAN_Buffer.Pointer_Write] = msg;
 80021ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		res = HAL_OK;
 80021ee:	f04f 0000 	mov.w	r0, #0
		CAN_Buffer.Pointer_Write = (CAN_Buffer.Pointer_Write < (CAN_BUFFER_SIZE-1)) ? (CAN_Buffer.Pointer_Write + 1) : 0;
 80021f2:	bf9c      	itt	ls
 80021f4:	3601      	addls	r6, #1
 80021f6:	b2b6      	uxthls	r6, r6
 80021f8:	807e      	strh	r6, [r7, #2]
	else
	{
		res = HAL_BUSY;
	}
	return res;
}
 80021fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80021fe:	b004      	add	sp, #16
 8002200:	4770      	bx	lr
		res = HAL_BUSY;
 8002202:	2002      	movs	r0, #2
 8002204:	e7f9      	b.n	80021fa <CAN_Buffer_Write_Data+0x4a>
 8002206:	bf00      	nop
 8002208:	20000030 	.word	0x20000030

0800220c <CAN_Log_Buffer_Write_Data>:

HAL_StatusTypeDef CAN_Log_Buffer_Write_Data(can_msg_t msg)
{
 800220c:	b084      	sub	sp, #16
 800220e:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t capacity;
	HAL_StatusTypeDef res;


    if(CAN_Log_Buffer.Pointer_Write >= CAN_Log_Buffer.Pointer_Read)
 8002210:	4f14      	ldr	r7, [pc, #80]	; (8002264 <CAN_Log_Buffer_Write_Data+0x58>)
{
 8002212:	ac05      	add	r4, sp, #20
    if(CAN_Log_Buffer.Pointer_Write >= CAN_Log_Buffer.Pointer_Read)
 8002214:	887e      	ldrh	r6, [r7, #2]
{
 8002216:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if(CAN_Log_Buffer.Pointer_Write >= CAN_Log_Buffer.Pointer_Read)
 800221a:	883b      	ldrh	r3, [r7, #0]
 800221c:	429e      	cmp	r6, r3
    {
        capacity = CAN_BUFFER_SIZE - (CAN_Log_Buffer.Pointer_Write - CAN_Log_Buffer.Pointer_Read);
 800221e:	bf28      	it	cs
 8002220:	333c      	addcs	r3, #60	; 0x3c
    }
    else
    {
        capacity = CAN_Log_Buffer.Pointer_Read - CAN_Log_Buffer.Pointer_Write;
 8002222:	1b9b      	subs	r3, r3, r6
 8002224:	b29b      	uxth	r3, r3
    }

	if(capacity > 1)
 8002226:	2b01      	cmp	r3, #1
 8002228:	d919      	bls.n	800225e <CAN_Log_Buffer_Write_Data+0x52>
	{
		CAN_Log_Buffer.Item[CAN_Log_Buffer.Pointer_Write] = msg;
 800222a:	2430      	movs	r4, #48	; 0x30
 800222c:	fb04 7406 	mla	r4, r4, r6, r7
 8002230:	ad05      	add	r5, sp, #20
 8002232:	3408      	adds	r4, #8
 8002234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800223a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800223c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
		CAN_Log_Buffer.Pointer_Write = (CAN_Log_Buffer.Pointer_Write < (CAN_BUFFER_SIZE-1)) ? (CAN_Log_Buffer.Pointer_Write + 1) : 0;
 8002240:	2e3a      	cmp	r6, #58	; 0x3a
 8002242:	bf88      	it	hi
 8002244:	2600      	movhi	r6, #0
		CAN_Log_Buffer.Item[CAN_Log_Buffer.Pointer_Write] = msg;
 8002246:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		res = HAL_OK;
 800224a:	f04f 0000 	mov.w	r0, #0
		CAN_Log_Buffer.Pointer_Write = (CAN_Log_Buffer.Pointer_Write < (CAN_BUFFER_SIZE-1)) ? (CAN_Log_Buffer.Pointer_Write + 1) : 0;
 800224e:	bf9c      	itt	ls
 8002250:	3601      	addls	r6, #1
 8002252:	b2b6      	uxthls	r6, r6
 8002254:	807e      	strh	r6, [r7, #2]
	else
	{
		res = HAL_BUSY;
	}
	return res;
}
 8002256:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800225a:	b004      	add	sp, #16
 800225c:	4770      	bx	lr
		res = HAL_BUSY;
 800225e:	2002      	movs	r0, #2
 8002260:	e7f9      	b.n	8002256 <CAN_Log_Buffer_Write_Data+0x4a>
 8002262:	bf00      	nop
 8002264:	20000b78 	.word	0x20000b78

08002268 <HexTo4bits>:

uint8_t HexTo4bits (uint8_t H)
{
	if (H >= 'a')
 8002268:	2860      	cmp	r0, #96	; 0x60
 800226a:	d904      	bls.n	8002276 <HexTo4bits+0xe>
	    H -= 0x27;		// convert chars a-f
 800226c:	3827      	subs	r0, #39	; 0x27
	else if (H >= 'A')
	    H -= 0x07;		// convert chars A-F
 800226e:	b2c0      	uxtb	r0, r0
	H -= '0';		// convert chars 0-9
 8002270:	3830      	subs	r0, #48	; 0x30
	return H;
}
 8002272:	b2c0      	uxtb	r0, r0
 8002274:	4770      	bx	lr
	else if (H >= 'A')
 8002276:	2840      	cmp	r0, #64	; 0x40
 8002278:	d9fa      	bls.n	8002270 <HexTo4bits+0x8>
	    H -= 0x07;		// convert chars A-F
 800227a:	3807      	subs	r0, #7
 800227c:	e7f7      	b.n	800226e <HexTo4bits+0x6>

0800227e <HexToShort>:

uint8_t HexToShort (uint8_t H, uint8_t L)
{
	if (H >= 'a')
 800227e:	2860      	cmp	r0, #96	; 0x60
 8002280:	d90c      	bls.n	800229c <HexToShort+0x1e>
	    H -= 0x27;		// convert chars a-f
 8002282:	3827      	subs	r0, #39	; 0x27
	else if (H >= 'A')
	    H -= 0x07;		// convert chars A-F
 8002284:	b2c0      	uxtb	r0, r0
	H -= '0';		// convert chars 0-9
 8002286:	3830      	subs	r0, #48	; 0x30

	if (L > 0x60)
 8002288:	2960      	cmp	r1, #96	; 0x60
	H -= '0';		// convert chars 0-9
 800228a:	b2c0      	uxtb	r0, r0
	if (L > 0x60)
 800228c:	d90a      	bls.n	80022a4 <HexToShort+0x26>
	    L -= 0x27;		// convert chars a-f
 800228e:	3927      	subs	r1, #39	; 0x27
	else if (L > 0x40)
	    L -= 0x07;		// convert chars A-F
 8002290:	b2c9      	uxtb	r1, r1
	L -= 0x30;		// convert chars 0-9
 8002292:	3930      	subs	r1, #48	; 0x30
	return H<<4 | L;
 8002294:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
}
 8002298:	b2c0      	uxtb	r0, r0
 800229a:	4770      	bx	lr
	else if (H >= 'A')
 800229c:	2840      	cmp	r0, #64	; 0x40
 800229e:	d9f2      	bls.n	8002286 <HexToShort+0x8>
	    H -= 0x07;		// convert chars A-F
 80022a0:	3807      	subs	r0, #7
 80022a2:	e7ef      	b.n	8002284 <HexToShort+0x6>
	else if (L > 0x40)
 80022a4:	2940      	cmp	r1, #64	; 0x40
 80022a6:	d9f4      	bls.n	8002292 <HexToShort+0x14>
	    L -= 0x07;		// convert chars A-F
 80022a8:	3907      	subs	r1, #7
 80022aa:	e7f1      	b.n	8002290 <HexToShort+0x12>

080022ac <ShortToHex>:
}

void ShortToHex (uint8_t in, uint8_t * out)
{
	uint8_t temp;
	temp = (in >> 4) & 0x0F;
 80022ac:	0903      	lsrs	r3, r0, #4
	out[0] = (temp < 10) ? temp + '0' : temp + ('A' - 10);
 80022ae:	289f      	cmp	r0, #159	; 0x9f
	temp = in & 0x0F;
 80022b0:	f000 000f 	and.w	r0, r0, #15
	out[0] = (temp < 10) ? temp + '0' : temp + ('A' - 10);
 80022b4:	bf94      	ite	ls
 80022b6:	3330      	addls	r3, #48	; 0x30
 80022b8:	3337      	addhi	r3, #55	; 0x37
	out[1] = (temp < 10) ? temp + '0' : temp + ('A' - 10);
 80022ba:	2809      	cmp	r0, #9
 80022bc:	bf94      	ite	ls
 80022be:	3030      	addls	r0, #48	; 0x30
 80022c0:	3037      	addhi	r0, #55	; 0x37
	out[0] = (temp < 10) ? temp + '0' : temp + ('A' - 10);
 80022c2:	700b      	strb	r3, [r1, #0]
	out[1] = (temp < 10) ? temp + '0' : temp + ('A' - 10);
 80022c4:	7048      	strb	r0, [r1, #1]
}
 80022c6:	4770      	bx	lr

080022c8 <BuildFrameToUSB>:

uint16_t BuildFrameToUSB (can_msg_t frame, int whichBus, uint8_t * buf)
{
 80022c8:	b084      	sub	sp, #16
 80022ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022ce:	ac08      	add	r4, sp, #32
 80022d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80022d4:	4616      	mov	r6, r2
	uint32_t pointer = 0;
    uint8_t temp;

    if (conf.state == LAWICEL_CONNECT)
 80022d6:	4a50      	ldr	r2, [pc, #320]	; (8002418 <BuildFrameToUSB+0x150>)
 80022d8:	4605      	mov	r5, r0
 80022da:	7810      	ldrb	r0, [r2, #0]
 80022dc:	460b      	mov	r3, r1
 80022de:	2801      	cmp	r0, #1
{
 80022e0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80022e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80022e4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    if (conf.state == LAWICEL_CONNECT)
 80022e6:	d16a      	bne.n	80023be <BuildFrameToUSB+0xf6>
 80022e8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    {
    	if(frame.header.IDE == CAN_ID_STD)//(frame.format == STANDARD)
 80022ec:	2900      	cmp	r1, #0
 80022ee:	d144      	bne.n	800237a <BuildFrameToUSB+0xb2>
    	{
    		if(frame.header.RTR == CAN_RTR_DATA)//(frame.type == DATA)
    		{
    			buf[pointer++] = 't';
 80022f0:	f1b8 0f00 	cmp.w	r8, #0
 80022f4:	bf14      	ite	ne
 80022f6:	2172      	movne	r1, #114	; 0x72
 80022f8:	2174      	moveq	r1, #116	; 0x74
    		}
    		else
    		{
    			buf[pointer++] = 'r';
    		}
    		buf[pointer++] = ((frame.header.StdId >> 8) < 10) ? (frame.header.StdId >> 8) + '0' : (frame.header.StdId >> 8) + ('A' - 10);
 80022fa:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80022fe:	7021      	strb	r1, [r4, #0]
 8002300:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002304:	bf34      	ite	cc
 8002306:	3130      	addcc	r1, #48	; 0x30
 8002308:	3137      	addcs	r1, #55	; 0x37
 800230a:	b2c9      	uxtb	r1, r1
 800230c:	7061      	strb	r1, [r4, #1]
    		ShortToHex(frame.header.StdId & 0xFF, &buf[pointer]);
 800230e:	b2d8      	uxtb	r0, r3
 8002310:	1ca1      	adds	r1, r4, #2
 8002312:	f7ff ffcb 	bl	80022ac <ShortToHex>
    		pointer +=2;
 8002316:	2104      	movs	r1, #4
    		pointer +=2;
    		ShortToHex((frame.header.ExtId >> 0) & 0xFF, &buf[pointer]);
    		pointer +=2;
    	}

    	buf[pointer++] = (frame.header.DLC  < 10) ? frame.header.DLC + '0' : frame.header.DLC + ('A' - 10);
 8002318:	b2fb      	uxtb	r3, r7
 800231a:	2f09      	cmp	r7, #9
 800231c:	bf94      	ite	ls
 800231e:	3330      	addls	r3, #48	; 0x30
 8002320:	3337      	addhi	r3, #55	; 0x37
 8002322:	b2db      	uxtb	r3, r3
 8002324:	1c4e      	adds	r6, r1, #1
 8002326:	5463      	strb	r3, [r4, r1]

    	if(frame.header.RTR == CAN_RTR_DATA)//(frame.type == DATA)
 8002328:	f1b8 0f00 	cmp.w	r8, #0
 800232c:	d10a      	bne.n	8002344 <BuildFrameToUSB+0x7c>
 800232e:	f10d 0a40 	add.w	sl, sp, #64	; 0x40
 8002332:	eb04 0906 	add.w	r9, r4, r6
    	{
    		for(int i = 0; i < frame.header.DLC; i++)
 8002336:	4547      	cmp	r7, r8
    		{
    			ShortToHex(frame.data_byte[i], &buf[pointer]);
 8002338:	4649      	mov	r1, r9
    		for(int i = 0; i < frame.header.DLC; i++)
 800233a:	f109 0902 	add.w	r9, r9, #2
 800233e:	d137      	bne.n	80023b0 <BuildFrameToUSB+0xe8>
 8002340:	eb06 0647 	add.w	r6, r6, r7, lsl #1
    			pointer +=2;
    		}
    	}

    	if(conf.timestamp_en)
 8002344:	7853      	ldrb	r3, [r2, #1]
 8002346:	b183      	cbz	r3, 800236a <BuildFrameToUSB+0xa2>
    	{
    		uint16_t timestamp = frame.timestamp % 60000u;
 8002348:	f64e 2360 	movw	r3, #60000	; 0xea60
 800234c:	fbb5 f0f3 	udiv	r0, r5, r3
 8002350:	fb03 5510 	mls	r5, r3, r0, r5
    		ShortToHex(timestamp >> 8 , &buf[pointer]);
 8002354:	19a1      	adds	r1, r4, r6
 8002356:	f3c5 2007 	ubfx	r0, r5, #8, #8
 800235a:	f7ff ffa7 	bl	80022ac <ShortToHex>
    		pointer +=2;
 800235e:	1cb1      	adds	r1, r6, #2
    		ShortToHex(timestamp & 0xFF , &buf[pointer]);
 8002360:	4421      	add	r1, r4
 8002362:	b2e8      	uxtb	r0, r5
 8002364:	f7ff ffa2 	bl	80022ac <ShortToHex>
    		pointer +=2;
 8002368:	3604      	adds	r6, #4
    	}

    	buf[pointer++] = CR;
 800236a:	230d      	movs	r3, #13
 800236c:	1c70      	adds	r0, r6, #1
 800236e:	55a3      	strb	r3, [r4, r6]
            }
            SerialUSB.println();*/
        }
    }
    return pointer;
}
 8002370:	b280      	uxth	r0, r0
 8002372:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002376:	b004      	add	sp, #16
 8002378:	4770      	bx	lr
    			buf[pointer++] = 'T';
 800237a:	f1b8 0f00 	cmp.w	r8, #0
 800237e:	bf14      	ite	ne
 8002380:	2352      	movne	r3, #82	; 0x52
 8002382:	2354      	moveq	r3, #84	; 0x54
 8002384:	4621      	mov	r1, r4
    		ShortToHex((frame.header.ExtId >> 24) & 0xFF, &buf[pointer]);
 8002386:	0e30      	lsrs	r0, r6, #24
 8002388:	f801 3b01 	strb.w	r3, [r1], #1
 800238c:	f7ff ff8e 	bl	80022ac <ShortToHex>
    		ShortToHex((frame.header.ExtId >> 16) & 0xFF, &buf[pointer]);
 8002390:	1ce1      	adds	r1, r4, #3
 8002392:	f3c6 4007 	ubfx	r0, r6, #16, #8
 8002396:	f7ff ff89 	bl	80022ac <ShortToHex>
    		ShortToHex((frame.header.ExtId >> 8) & 0xFF, &buf[pointer]);
 800239a:	1d61      	adds	r1, r4, #5
 800239c:	f3c6 2007 	ubfx	r0, r6, #8, #8
 80023a0:	f7ff ff84 	bl	80022ac <ShortToHex>
    		ShortToHex((frame.header.ExtId >> 0) & 0xFF, &buf[pointer]);
 80023a4:	1de1      	adds	r1, r4, #7
 80023a6:	b2f0      	uxtb	r0, r6
 80023a8:	f7ff ff80 	bl	80022ac <ShortToHex>
    		pointer +=2;
 80023ac:	2109      	movs	r1, #9
 80023ae:	e7b3      	b.n	8002318 <BuildFrameToUSB+0x50>
    			ShortToHex(frame.data_byte[i], &buf[pointer]);
 80023b0:	f81a 0b01 	ldrb.w	r0, [sl], #1
 80023b4:	f7ff ff7a 	bl	80022ac <ShortToHex>
    		for(int i = 0; i < frame.header.DLC; i++)
 80023b8:	f108 0801 	add.w	r8, r8, #1
 80023bc:	e7bb      	b.n	8002336 <BuildFrameToUSB+0x6e>
    else if(conf.state == SAVVYCAN_CONNECT)
 80023be:	2802      	cmp	r0, #2
 80023c0:	d128      	bne.n	8002414 <BuildFrameToUSB+0x14c>
        if (conf.useBinarySerialComm)
 80023c2:	7890      	ldrb	r0, [r2, #2]
 80023c4:	2800      	cmp	r0, #0
 80023c6:	d0d3      	beq.n	8002370 <BuildFrameToUSB+0xa8>
            buf[pointer++] = 0xF1;
 80023c8:	22f1      	movs	r2, #241	; 0xf1
            if (frame.header.IDE == CAN_ID_EXT) id_temp = frame.header.ExtId | 1 << 31;
 80023ca:	2904      	cmp	r1, #4
 80023cc:	bf08      	it	eq
 80023ce:	f046 4300 	orreq.w	r3, r6, #2147483648	; 0x80000000
            buf[pointer++] = 0; //0 = canbus frame sending
 80023d2:	2600      	movs	r6, #0
            buf[pointer++] = 0xF1;
 80023d4:	7022      	strb	r2, [r4, #0]
            buf[pointer++] = (uint8_t)(frame.timestamp >> 8);
 80023d6:	0a2a      	lsrs	r2, r5, #8
 80023d8:	70e2      	strb	r2, [r4, #3]
            buf[pointer++] = (uint8_t)(frame.timestamp >> 16);
 80023da:	0c2a      	lsrs	r2, r5, #16
 80023dc:	7122      	strb	r2, [r4, #4]
            buf[pointer++] = (uint8_t)(id_temp >> 8);
 80023de:	0a1a      	lsrs	r2, r3, #8
            buf[pointer++] = (uint8_t)(id_temp & 0xFF);
 80023e0:	71a3      	strb	r3, [r4, #6]
            buf[pointer++] = (uint8_t)(id_temp >> 8);
 80023e2:	71e2      	strb	r2, [r4, #7]
            buf[pointer++] = (uint8_t)(id_temp >> 16);
 80023e4:	0c1a      	lsrs	r2, r3, #16
            buf[pointer++] = (uint8_t)(id_temp >> 24);
 80023e6:	0e1b      	lsrs	r3, r3, #24
 80023e8:	7263      	strb	r3, [r4, #9]
            buf[pointer++] = frame.header.DLC + (uint8_t)(frame.bus << 4);
 80023ea:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
            buf[pointer++] = (uint8_t)(frame.timestamp & 0xFF);
 80023ee:	70a5      	strb	r5, [r4, #2]
            buf[pointer++] = frame.header.DLC + (uint8_t)(frame.bus << 4);
 80023f0:	eb07 1303 	add.w	r3, r7, r3, lsl #4
            buf[pointer++] = (uint8_t)(frame.timestamp >> 24);
 80023f4:	0e2d      	lsrs	r5, r5, #24
            buf[pointer++] = (uint8_t)(id_temp >> 16);
 80023f6:	7222      	strb	r2, [r4, #8]
            buf[pointer++] = 0; //0 = canbus frame sending
 80023f8:	7066      	strb	r6, [r4, #1]
            buf[pointer++] = (uint8_t)(frame.timestamp >> 24);
 80023fa:	7165      	strb	r5, [r4, #5]
            buf[pointer++] = frame.header.DLC + (uint8_t)(frame.bus << 4);
 80023fc:	72a3      	strb	r3, [r4, #10]
                buf[pointer++] = frame.data_byte[c];
 80023fe:	f104 000b 	add.w	r0, r4, #11
 8002402:	463a      	mov	r2, r7
 8002404:	a910      	add	r1, sp, #64	; 0x40
            buf[pointer++] = temp;
 8002406:	443c      	add	r4, r7
                buf[pointer++] = frame.data_byte[c];
 8002408:	f002 f914 	bl	8004634 <memcpy>
 800240c:	f107 000c 	add.w	r0, r7, #12
            buf[pointer++] = temp;
 8002410:	72e6      	strb	r6, [r4, #11]
 8002412:	e7ad      	b.n	8002370 <BuildFrameToUSB+0xa8>
	uint32_t pointer = 0;
 8002414:	2000      	movs	r0, #0
 8002416:	e7ab      	b.n	8002370 <BuildFrameToUSB+0xa8>
 8002418:	200019a0 	.word	0x200019a0

0800241c <CAN_Buffer_pull>:
{
 800241c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if(CAN_Buffer.Pointer_Read != CAN_Buffer.Pointer_Write)
 8002420:	4e18      	ldr	r6, [pc, #96]	; (8002484 <CAN_Buffer_pull+0x68>)
{
 8002422:	b08a      	sub	sp, #40	; 0x28
	if(CAN_Buffer.Pointer_Read != CAN_Buffer.Pointer_Write)
 8002424:	8834      	ldrh	r4, [r6, #0]
 8002426:	8873      	ldrh	r3, [r6, #2]
 8002428:	42a3      	cmp	r3, r4
 800242a:	d027      	beq.n	800247c <CAN_Buffer_pull+0x60>
		uint16_t length = BuildFrameToUSB(CAN_Buffer.Item[CAN_Buffer.Pointer_Read], 0, uart_tx_bufer);
 800242c:	2330      	movs	r3, #48	; 0x30
 800242e:	fb03 6404 	mla	r4, r3, r4, r6
 8002432:	2300      	movs	r3, #0
 8002434:	466d      	mov	r5, sp
 8002436:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8002488 <CAN_Buffer_pull+0x6c>
 800243a:	9308      	str	r3, [sp, #32]
 800243c:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8002440:	f104 0708 	add.w	r7, r4, #8
 8002444:	3418      	adds	r4, #24
 8002446:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002448:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800244a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800244e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002452:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8002456:	f7ff ff37 	bl	80022c8 <BuildFrameToUSB>
		if(HAL_UART_Transmit_DMA(huart_active, uart_tx_bufer, length) == HAL_OK)
 800245a:	4b0c      	ldr	r3, [pc, #48]	; (800248c <CAN_Buffer_pull+0x70>)
		uint16_t length = BuildFrameToUSB(CAN_Buffer.Item[CAN_Buffer.Pointer_Read], 0, uart_tx_bufer);
 800245c:	4602      	mov	r2, r0
		if(HAL_UART_Transmit_DMA(huart_active, uart_tx_bufer, length) == HAL_OK)
 800245e:	4641      	mov	r1, r8
 8002460:	6818      	ldr	r0, [r3, #0]
 8002462:	f7ff fd3d 	bl	8001ee0 <HAL_UART_Transmit_DMA>
 8002466:	b958      	cbnz	r0, 8002480 <CAN_Buffer_pull+0x64>
			CAN_Buffer.Pointer_Read = (CAN_Buffer.Pointer_Read < (CAN_BUFFER_SIZE-1)) ? (CAN_Buffer.Pointer_Read + 1) : 0;
 8002468:	8833      	ldrh	r3, [r6, #0]
 800246a:	2b3a      	cmp	r3, #58	; 0x3a
 800246c:	bf8e      	itee	hi
 800246e:	4603      	movhi	r3, r0
 8002470:	3301      	addls	r3, #1
 8002472:	b29b      	uxthls	r3, r3
 8002474:	8033      	strh	r3, [r6, #0]
}
 8002476:	b00a      	add	sp, #40	; 0x28
 8002478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return HAL_BUSY;
 800247c:	2002      	movs	r0, #2
 800247e:	e7fa      	b.n	8002476 <CAN_Buffer_pull+0x5a>
			return HAL_ERROR;
 8002480:	2001      	movs	r0, #1
 8002482:	e7f8      	b.n	8002476 <CAN_Buffer_pull+0x5a>
 8002484:	20000030 	.word	0x20000030
 8002488:	20001dfc 	.word	0x20001dfc
 800248c:	200019d4 	.word	0x200019d4

08002490 <SetFilterCAN>:
        Can1.setRXFilter(filter, 0, 0, false);
    }*/
}

HAL_StatusTypeDef SetFilterCAN(uint32_t id, uint32_t mask_or_id, uint32_t mode, uint32_t num)
{
 8002490:	b510      	push	{r4, lr}
	 if(mask_or_id == 0 && mode == CAN_FILTERMODE_IDMASK)
 8002492:	ea51 0402 	orrs.w	r4, r1, r2
{
 8002496:	b08a      	sub	sp, #40	; 0x28
	 if(mask_or_id == 0 && mode == CAN_FILTERMODE_IDMASK)
 8002498:	d112      	bne.n	80024c0 <SetFilterCAN+0x30>
 		  CAN_FilterStructure.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 		  CAN_FilterStructure.FilterMaskIdHigh = 0xFFFF;
 		  CAN_FilterStructure.FilterMaskIdLow = 0xFFFF;
 		  CAN_FilterStructure.FilterIdHigh = 0;
 		  CAN_FilterStructure.FilterIdLow = 0;
 		  CAN_FilterStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 800249a:	2301      	movs	r3, #1
 		  CAN_FilterStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 800249c:	e9cd 4405 	strd	r4, r4, [sp, #20]
 		  CAN_FilterStructure.FilterIdLow = 0;
 80024a0:	e9cd 4400 	strd	r4, r4, [sp]
 		  CAN_FilterStructure.FilterActivation = CAN_FILTER_ENABLE;
 80024a4:	e9cd 3307 	strd	r3, r3, [sp, #28]

 		  CAN_FilterStructure.FilterIdHigh = 0;
 		  CAN_FilterStructure.FilterIdLow = 0;
 		  CAN_FilterStructure.FilterBank = 0;
 		  CAN_FilterStructure.FilterMaskIdHigh = 0;
 		  CAN_FilterStructure.FilterMaskIdLow = 0;
 80024a8:	e9cd 4402 	strd	r4, r4, [sp, #8]
 		  CAN_FilterStructure.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80024ac:	9404      	str	r4, [sp, #16]

		  CAN_FilterStructure.FilterScale = CAN_FILTERSCALE_32BIT;
		  CAN_FilterStructure.FilterActivation = CAN_FILTER_ENABLE;

		  CAN_FilterStructure.FilterFIFOAssignment = CAN_FILTER_FIFO0;
		  if(HAL_CAN_ConfigFilter(&hcan, &CAN_FilterStructure) != HAL_OK) return HAL_ERROR;
 80024ae:	4669      	mov	r1, sp
 80024b0:	480b      	ldr	r0, [pc, #44]	; (80024e0 <SetFilterCAN+0x50>)
 80024b2:	f7fe fa1c 	bl	80008ee <HAL_CAN_ConfigFilter>
 80024b6:	3800      	subs	r0, #0
 80024b8:	bf18      	it	ne
 80024ba:	2001      	movne	r0, #1
	 }
	 return HAL_OK;
}
 80024bc:	b00a      	add	sp, #40	; 0x28
 80024be:	bd10      	pop	{r4, pc}
		  CAN_FilterStructure.FilterMode = mode;
 80024c0:	e9cd 3205 	strd	r3, r2, [sp, #20]
		  CAN_FilterStructure.FilterMaskIdHigh = mask_or_id >> 16;
 80024c4:	0c0b      	lsrs	r3, r1, #16
 80024c6:	9302      	str	r3, [sp, #8]
		  CAN_FilterStructure.FilterIdHigh = id >> 16;
 80024c8:	0c03      	lsrs	r3, r0, #16
 80024ca:	9300      	str	r3, [sp, #0]
		  CAN_FilterStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 80024cc:	2301      	movs	r3, #1
		  CAN_FilterStructure.FilterActivation = CAN_FILTER_ENABLE;
 80024ce:	e9cd 3307 	strd	r3, r3, [sp, #28]
		  CAN_FilterStructure.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80024d2:	2300      	movs	r3, #0
		  CAN_FilterStructure.FilterMaskIdLow = mask_or_id & 0xFFFF;
 80024d4:	b289      	uxth	r1, r1
		  CAN_FilterStructure.FilterIdLow = id & 0xFFFF;
 80024d6:	b280      	uxth	r0, r0
		  CAN_FilterStructure.FilterMaskIdLow = mask_or_id & 0xFFFF;
 80024d8:	9103      	str	r1, [sp, #12]
		  CAN_FilterStructure.FilterIdLow = id & 0xFFFF;
 80024da:	9001      	str	r0, [sp, #4]
		  CAN_FilterStructure.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80024dc:	9304      	str	r3, [sp, #16]
 80024de:	e7e6      	b.n	80024ae <SetFilterCAN+0x1e>
 80024e0:	20001918 	.word	0x20001918

080024e4 <Open_LIN_cannel>:
	}
	return msg;
}

HAL_StatusTypeDef Open_LIN_cannel()
{
 80024e4:	b510      	push	{r4, lr}
	huart1.Init.BaudRate = eeprom_settings.CAN_Speed[eeprom_settings.numBus];
 80024e6:	4b11      	ldr	r3, [pc, #68]	; (800252c <Open_LIN_cannel+0x48>)
 80024e8:	4c11      	ldr	r4, [pc, #68]	; (8002530 <Open_LIN_cannel+0x4c>)
 80024ea:	7a1a      	ldrb	r2, [r3, #8]

	huart1.Init.Mode = UART_MODE_TX_RX;
	if (HAL_LIN_Init(&huart1, UART_LINBREAKDETECTLENGTH_10B) == HAL_OK)
 80024ec:	2100      	movs	r1, #0
	huart1.Init.BaudRate = eeprom_settings.CAN_Speed[eeprom_settings.numBus];
 80024ee:	3202      	adds	r2, #2
 80024f0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80024f4:	685b      	ldr	r3, [r3, #4]
	if (HAL_LIN_Init(&huart1, UART_LINBREAKDETECTLENGTH_10B) == HAL_OK)
 80024f6:	4620      	mov	r0, r4
	huart1.Init.BaudRate = eeprom_settings.CAN_Speed[eeprom_settings.numBus];
 80024f8:	6063      	str	r3, [r4, #4]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80024fa:	230c      	movs	r3, #12
 80024fc:	6163      	str	r3, [r4, #20]
	if (HAL_LIN_Init(&huart1, UART_LINBREAKDETECTLENGTH_10B) == HAL_OK)
 80024fe:	f7ff fc9b 	bl	8001e38 <HAL_LIN_Init>
 8002502:	b988      	cbnz	r0, 8002528 <Open_LIN_cannel+0x44>
	{
		  /* Enable the UART Data Register not empty Interrupt */
		  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8002504:	6823      	ldr	r3, [r4, #0]
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	f042 0220 	orr.w	r2, r2, #32
 800250c:	60da      	str	r2, [r3, #12]
		  __HAL_UART_ENABLE_IT(&huart1, UART_IT_LBD);
 800250e:	691a      	ldr	r2, [r3, #16]
 8002510:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002514:	611a      	str	r2, [r3, #16]
		  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	f042 0210 	orr.w	r2, r2, #16
 800251c:	60da      	str	r2, [r3, #12]
		  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 800251e:	68da      	ldr	r2, [r3, #12]
 8002520:	f042 0220 	orr.w	r2, r2, #32
 8002524:	60da      	str	r2, [r3, #12]

		return HAL_OK;
	}
	return HAL_ERROR;
}
 8002526:	bd10      	pop	{r4, pc}
	return HAL_ERROR;
 8002528:	2001      	movs	r0, #1
 800252a:	e7fc      	b.n	8002526 <Open_LIN_cannel+0x42>
 800252c:	20001738 	.word	0x20001738
 8002530:	20001f84 	.word	0x20001f84

08002534 <Close_LIN_cannel>:

HAL_StatusTypeDef Close_LIN_cannel(void)
{
 8002534:	b510      	push	{r4, lr}
	HAL_UART_DeInit(&huart1);
 8002536:	4c0b      	ldr	r4, [pc, #44]	; (8002564 <Close_LIN_cannel+0x30>)
 8002538:	4620      	mov	r0, r4
 800253a:	f7ff fcb8 	bl	8001eae <HAL_UART_DeInit>
	  __HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
 800253e:	6823      	ldr	r3, [r4, #0]
	  __HAL_UART_DISABLE_IT(&huart1, UART_IT_LBD);
	  __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
	  __HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
	return HAL_ERROR;
}
 8002540:	2001      	movs	r0, #1
	  __HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
 8002542:	68da      	ldr	r2, [r3, #12]
 8002544:	f022 0220 	bic.w	r2, r2, #32
 8002548:	60da      	str	r2, [r3, #12]
	  __HAL_UART_DISABLE_IT(&huart1, UART_IT_LBD);
 800254a:	691a      	ldr	r2, [r3, #16]
 800254c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002550:	611a      	str	r2, [r3, #16]
	  __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 8002552:	68da      	ldr	r2, [r3, #12]
 8002554:	f022 0210 	bic.w	r2, r2, #16
 8002558:	60da      	str	r2, [r3, #12]
	  __HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
 800255a:	68da      	ldr	r2, [r3, #12]
 800255c:	f022 0220 	bic.w	r2, r2, #32
 8002560:	60da      	str	r2, [r3, #12]
}
 8002562:	bd10      	pop	{r4, pc}
 8002564:	20001f84 	.word	0x20001f84

08002568 <Close_CAN_cannel>:
	}
	return HAL_ERROR;
}

HAL_StatusTypeDef Close_CAN_cannel(void)
{
 8002568:	b508      	push	{r3, lr}
	if(HAL_CAN_DeInit(&hcan) == HAL_OK)
 800256a:	4803      	ldr	r0, [pc, #12]	; (8002578 <Close_CAN_cannel+0x10>)
 800256c:	f7fe fa8a 	bl	8000a84 <HAL_CAN_DeInit>
	{
		return HAL_OK;
	}

	return HAL_ERROR;
}
 8002570:	3800      	subs	r0, #0
 8002572:	bf18      	it	ne
 8002574:	2001      	movne	r0, #1
 8002576:	bd08      	pop	{r3, pc}
 8002578:	20001918 	.word	0x20001918

0800257c <Change_CAN_channel>:

void Change_CAN_channel(void)
{
 800257c:	b508      	push	{r3, lr}
	Close_CAN_cannel();
 800257e:	f7ff fff3 	bl	8002568 <Close_CAN_cannel>
	Close_LIN_cannel();
 8002582:	f7ff ffd7 	bl	8002534 <Close_LIN_cannel>

	//SysSettings.numBus++;
	//if(SysSettings.numBus > 4) SysSettings.numBus = 0;

	HAL_Delay(50);
 8002586:	2032      	movs	r0, #50	; 0x32
 8002588:	f7fe f924 	bl	80007d4 <HAL_Delay>

	switch(eeprom_settings.numBus)
 800258c:	4b01      	ldr	r3, [pc, #4]	; (8002594 <Change_CAN_channel+0x18>)
 800258e:	7a1b      	ldrb	r3, [r3, #8]
	{
	default: break;
	}

}
 8002590:	bd08      	pop	{r3, pc}
 8002592:	bf00      	nop
 8002594:	20001738 	.word	0x20001738

08002598 <HAL_CAN_TxMailbox0CompleteCallback>:
	Open_CAN_cannel();
}

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
}
 8002598:	4770      	bx	lr

0800259a <HAL_CAN_TxMailbox1CompleteCallback>:
 800259a:	4770      	bx	lr

0800259c <HAL_CAN_TxMailbox2CompleteCallback>:
 800259c:	4770      	bx	lr
	...

080025a0 <STM_bxCAN_calc>:
#define MAX_TQ  (MAX_TQ1 + MAX_TQ2 + 1) //25

#define SAMPE_POINT 0.875f //0.75f

void STM_bxCAN_calc(uint32_t freq, float bitrate, CAN_HandleTypeDef * hcan)
{
 80025a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025a4:	4688      	mov	r8, r1
 80025a6:	b085      	sub	sp, #20
 80025a8:	9002      	str	r0, [sp, #8]
    uint32_t brpresc;
    float number_of_time_quanta;
    uint32_t ceil_of_time_quanta;
    float real_sp, best_sp = 0;

    if(bitrate > 4000000.0f || bitrate < 2000.0f) return;
 80025aa:	4944      	ldr	r1, [pc, #272]	; (80026bc <STM_bxCAN_calc+0x11c>)
 80025ac:	4640      	mov	r0, r8
{
 80025ae:	4617      	mov	r7, r2
    if(bitrate > 4000000.0f || bitrate < 2000.0f) return;
 80025b0:	f7fe f89e 	bl	80006f0 <__aeabi_fcmpgt>
 80025b4:	2800      	cmp	r0, #0
 80025b6:	d17e      	bne.n	80026b6 <STM_bxCAN_calc+0x116>
 80025b8:	4640      	mov	r0, r8
 80025ba:	4941      	ldr	r1, [pc, #260]	; (80026c0 <STM_bxCAN_calc+0x120>)
 80025bc:	f7fe f87a 	bl	80006b4 <__aeabi_fcmplt>
 80025c0:	4605      	mov	r5, r0
 80025c2:	2800      	cmp	r0, #0
 80025c4:	d177      	bne.n	80026b6 <STM_bxCAN_calc+0x116>
    float real_sp, best_sp = 0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	9301      	str	r3, [sp, #4]
    float accuracy, best_accuracy = 1;
 80025ca:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
        if(accuracy < 0.00001f) accuracy = 0.0f;

        //if(accuracy > 0.5f) continue;

        temp_reg.Init.Prescaler = brpresc;
        temp_reg.Init.TimeSeg1 = (roundf(ceil_of_time_quanta * SAMPE_POINT)) - 1;
 80025ce:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 80026c4 <STM_bxCAN_calc+0x124>
    float accuracy, best_accuracy = 1;
 80025d2:	9300      	str	r3, [sp, #0]
        number_of_time_quanta = freq / (bitrate * brpresc);
 80025d4:	9802      	ldr	r0, [sp, #8]
 80025d6:	f7fd fe77 	bl	80002c8 <__aeabi_ui2f>
        brpresc = i+1;
 80025da:	3501      	adds	r5, #1
        number_of_time_quanta = freq / (bitrate * brpresc);
 80025dc:	4604      	mov	r4, r0
 80025de:	4628      	mov	r0, r5
 80025e0:	f7fd fe72 	bl	80002c8 <__aeabi_ui2f>
 80025e4:	4641      	mov	r1, r8
 80025e6:	f7fd fec7 	bl	8000378 <__aeabi_fmul>
 80025ea:	4601      	mov	r1, r0
 80025ec:	4620      	mov	r0, r4
 80025ee:	f7fd ff77 	bl	80004e0 <__aeabi_fdiv>
 80025f2:	4606      	mov	r6, r0
        ceil_of_time_quanta = roundf(number_of_time_quanta);
 80025f4:	f002 f834 	bl	8004660 <roundf>
 80025f8:	f7fe f884 	bl	8000704 <__aeabi_f2uiz>
        if(ceil_of_time_quanta < MIN_TQ) break;
 80025fc:	2807      	cmp	r0, #7
        ceil_of_time_quanta = roundf(number_of_time_quanta);
 80025fe:	4604      	mov	r4, r0
        if(ceil_of_time_quanta < MIN_TQ) break;
 8002600:	d959      	bls.n	80026b6 <STM_bxCAN_calc+0x116>
        if(ceil_of_time_quanta > MAX_TQ) continue;
 8002602:	2819      	cmp	r0, #25
 8002604:	d854      	bhi.n	80026b0 <STM_bxCAN_calc+0x110>
        accuracy = fabsf(number_of_time_quanta - ceil_of_time_quanta);
 8002606:	f7fd fe5f 	bl	80002c8 <__aeabi_ui2f>
 800260a:	4601      	mov	r1, r0
 800260c:	4683      	mov	fp, r0
 800260e:	4630      	mov	r0, r6
 8002610:	f7fd fda8 	bl	8000164 <__aeabi_fsub>
 8002614:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
        if(accuracy < 0.00001f) accuracy = 0.0f;
 8002618:	4630      	mov	r0, r6
 800261a:	492b      	ldr	r1, [pc, #172]	; (80026c8 <STM_bxCAN_calc+0x128>)
 800261c:	f7fe f84a 	bl	80006b4 <__aeabi_fcmplt>
 8002620:	b100      	cbz	r0, 8002624 <STM_bxCAN_calc+0x84>
 8002622:	2600      	movs	r6, #0
        temp_reg.Init.TimeSeg1 = (roundf(ceil_of_time_quanta * SAMPE_POINT)) - 1;
 8002624:	4651      	mov	r1, sl
 8002626:	4658      	mov	r0, fp
 8002628:	f7fd fea6 	bl	8000378 <__aeabi_fmul>
 800262c:	f002 f818 	bl	8004660 <roundf>
 8002630:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002634:	f7fd fd96 	bl	8000164 <__aeabi_fsub>
 8002638:	f7fe f864 	bl	8000704 <__aeabi_f2uiz>
        temp_reg.Init.TimeSeg2 = ceil_of_time_quanta - temp_reg.Init.TimeSeg1 - 1;
 800263c:	3c01      	subs	r4, #1

        if(temp_reg.Init.TimeSeg1 > MAX_TQ1 || temp_reg.Init.TimeSeg2 > MAX_TQ2) continue;
 800263e:	2810      	cmp	r0, #16
        temp_reg.Init.TimeSeg1 = (roundf(ceil_of_time_quanta * SAMPE_POINT)) - 1;
 8002640:	4681      	mov	r9, r0
        temp_reg.Init.TimeSeg2 = ceil_of_time_quanta - temp_reg.Init.TimeSeg1 - 1;
 8002642:	eba4 0400 	sub.w	r4, r4, r0
        if(temp_reg.Init.TimeSeg1 > MAX_TQ1 || temp_reg.Init.TimeSeg2 > MAX_TQ2) continue;
 8002646:	d833      	bhi.n	80026b0 <STM_bxCAN_calc+0x110>
 8002648:	2c08      	cmp	r4, #8
 800264a:	d831      	bhi.n	80026b0 <STM_bxCAN_calc+0x110>

        if(temp_reg.Init.TimeSeg2 < 1 && temp_reg.Init.TimeSeg1 >=1)
 800264c:	b91c      	cbnz	r4, 8002656 <STM_bxCAN_calc+0xb6>
 800264e:	b110      	cbz	r0, 8002656 <STM_bxCAN_calc+0xb6>
        {
            temp_reg.Init.TimeSeg2 +=1;
 8002650:	2401      	movs	r4, #1
            temp_reg.Init.TimeSeg1 -=1;
 8002652:	f100 39ff 	add.w	r9, r0, #4294967295
        }

        real_sp = ((float)(temp_reg.Init.TimeSeg1 + 1) / (float)ceil_of_time_quanta);
 8002656:	f109 0001 	add.w	r0, r9, #1
 800265a:	f7fd fe35 	bl	80002c8 <__aeabi_ui2f>
 800265e:	4659      	mov	r1, fp
 8002660:	f7fd ff3e 	bl	80004e0 <__aeabi_fdiv>

        //if(real_sp < 0.5f) continue;

        if((accuracy < best_accuracy) || ((accuracy == 0.0f) && (fabsf(real_sp - SAMPE_POINT) < fabsf(best_sp - SAMPE_POINT)) && (temp_reg.Init.TimeSeg2 == hcan->Init.TimeSeg2)))
 8002664:	9900      	ldr	r1, [sp, #0]
        real_sp = ((float)(temp_reg.Init.TimeSeg1 + 1) / (float)ceil_of_time_quanta);
 8002666:	4683      	mov	fp, r0
        if((accuracy < best_accuracy) || ((accuracy == 0.0f) && (fabsf(real_sp - SAMPE_POINT) < fabsf(best_sp - SAMPE_POINT)) && (temp_reg.Init.TimeSeg2 == hcan->Init.TimeSeg2)))
 8002668:	4630      	mov	r0, r6
 800266a:	f7fe f823 	bl	80006b4 <__aeabi_fcmplt>
 800266e:	b9c8      	cbnz	r0, 80026a4 <STM_bxCAN_calc+0x104>
 8002670:	2100      	movs	r1, #0
 8002672:	4630      	mov	r0, r6
 8002674:	f7fe f814 	bl	80006a0 <__aeabi_fcmpeq>
 8002678:	b1d0      	cbz	r0, 80026b0 <STM_bxCAN_calc+0x110>
 800267a:	4651      	mov	r1, sl
 800267c:	4658      	mov	r0, fp
 800267e:	f7fd fd71 	bl	8000164 <__aeabi_fsub>
 8002682:	4651      	mov	r1, sl
 8002684:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8002688:	9801      	ldr	r0, [sp, #4]
 800268a:	9203      	str	r2, [sp, #12]
 800268c:	f7fd fd6a 	bl	8000164 <__aeabi_fsub>
 8002690:	9a03      	ldr	r2, [sp, #12]
 8002692:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 8002696:	4610      	mov	r0, r2
 8002698:	f7fe f80c 	bl	80006b4 <__aeabi_fcmplt>
 800269c:	b140      	cbz	r0, 80026b0 <STM_bxCAN_calc+0x110>
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	4294      	cmp	r4, r2
 80026a2:	d105      	bne.n	80026b0 <STM_bxCAN_calc+0x110>
        {
            hcan->Init.Prescaler = temp_reg.Init.Prescaler;
            hcan->Init.TimeSeg1 = temp_reg.Init.TimeSeg1;
            hcan->Init.TimeSeg2 = temp_reg.Init.TimeSeg2;
 80026a4:	e9c7 9404 	strd	r9, r4, [r7, #16]
            hcan->Init.Prescaler = temp_reg.Init.Prescaler;
 80026a8:	607d      	str	r5, [r7, #4]
            best_accuracy = accuracy;
            best_sp = real_sp;
 80026aa:	f8cd b004 	str.w	fp, [sp, #4]
            best_accuracy = accuracy;
 80026ae:	9600      	str	r6, [sp, #0]
    for(uint32_t i = 0; i < MAX_BRP; i++)
 80026b0:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80026b4:	d18e      	bne.n	80025d4 <STM_bxCAN_calc+0x34>
        }
    }

}
 80026b6:	b005      	add	sp, #20
 80026b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026bc:	4a742400 	.word	0x4a742400
 80026c0:	44fa0000 	.word	0x44fa0000
 80026c4:	3f600000 	.word	0x3f600000
 80026c8:	3727c5ac 	.word	0x3727c5ac

080026cc <CAN_Init_Custom>:
{
 80026cc:	b538      	push	{r3, r4, r5, lr}
	switch(speed)
 80026ce:	4b3f      	ldr	r3, [pc, #252]	; (80027cc <CAN_Init_Custom+0x100>)
{
 80026d0:	460d      	mov	r5, r1
	switch(speed)
 80026d2:	4298      	cmp	r0, r3
 80026d4:	4c3e      	ldr	r4, [pc, #248]	; (80027d0 <CAN_Init_Custom+0x104>)
 80026d6:	d06c      	beq.n	80027b2 <CAN_Init_Custom+0xe6>
 80026d8:	d826      	bhi.n	8002728 <CAN_Init_Custom+0x5c>
 80026da:	f644 6320 	movw	r3, #20000	; 0x4e20
 80026de:	4298      	cmp	r0, r3
 80026e0:	d060      	beq.n	80027a4 <CAN_Init_Custom+0xd8>
 80026e2:	d813      	bhi.n	800270c <CAN_Init_Custom+0x40>
 80026e4:	f242 038d 	movw	r3, #8333	; 0x208d
 80026e8:	4298      	cmp	r0, r3
 80026ea:	d06c      	beq.n	80027c6 <CAN_Init_Custom+0xfa>
 80026ec:	f242 7310 	movw	r3, #10000	; 0x2710
 80026f0:	4298      	cmp	r0, r3
 80026f2:	d05c      	beq.n	80027ae <CAN_Init_Custom+0xe2>
 80026f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80026f8:	4298      	cmp	r0, r3
 80026fa:	d061      	beq.n	80027c0 <CAN_Init_Custom+0xf4>
			STM_bxCAN_calc(36000000UL, speed, &hcan);
 80026fc:	f7fd fde4 	bl	80002c8 <__aeabi_ui2f>
 8002700:	4a33      	ldr	r2, [pc, #204]	; (80027d0 <CAN_Init_Custom+0x104>)
 8002702:	4601      	mov	r1, r0
 8002704:	4833      	ldr	r0, [pc, #204]	; (80027d4 <CAN_Init_Custom+0x108>)
 8002706:	f7ff ff4b 	bl	80025a0 <STM_bxCAN_calc>
			break;
 800270a:	e02c      	b.n	8002766 <CAN_Init_Custom+0x9a>
	switch(speed)
 800270c:	f64b 2303 	movw	r3, #47619	; 0xba03
 8002710:	4298      	cmp	r0, r3
 8002712:	d053      	beq.n	80027bc <CAN_Init_Custom+0xf0>
 8002714:	f24c 3350 	movw	r3, #50000	; 0xc350
 8002718:	4298      	cmp	r0, r3
 800271a:	d041      	beq.n	80027a0 <CAN_Init_Custom+0xd4>
 800271c:	f248 2335 	movw	r3, #33333	; 0x8235
 8002720:	4298      	cmp	r0, r3
 8002722:	d1eb      	bne.n	80026fc <CAN_Init_Custom+0x30>
			hcan.Init.Prescaler = 72;
 8002724:	2348      	movs	r3, #72	; 0x48
 8002726:	e03e      	b.n	80027a6 <CAN_Init_Custom+0xda>
	switch(speed)
 8002728:	4b2b      	ldr	r3, [pc, #172]	; (80027d8 <CAN_Init_Custom+0x10c>)
 800272a:	4298      	cmp	r0, r3
 800272c:	d029      	beq.n	8002782 <CAN_Init_Custom+0xb6>
 800272e:	d80d      	bhi.n	800274c <CAN_Init_Custom+0x80>
 8002730:	4b2a      	ldr	r3, [pc, #168]	; (80027dc <CAN_Init_Custom+0x110>)
 8002732:	4298      	cmp	r0, r3
 8002734:	d032      	beq.n	800279c <CAN_Init_Custom+0xd0>
 8002736:	4b2a      	ldr	r3, [pc, #168]	; (80027e0 <CAN_Init_Custom+0x114>)
 8002738:	4298      	cmp	r0, r3
 800273a:	d02a      	beq.n	8002792 <CAN_Init_Custom+0xc6>
 800273c:	4b29      	ldr	r3, [pc, #164]	; (80027e4 <CAN_Init_Custom+0x118>)
 800273e:	4298      	cmp	r0, r3
 8002740:	d1dc      	bne.n	80026fc <CAN_Init_Custom+0x30>
			hcan.Init.Prescaler = 45;
 8002742:	232d      	movs	r3, #45	; 0x2d
 8002744:	6063      	str	r3, [r4, #4]
			hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8002746:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800274a:	e009      	b.n	8002760 <CAN_Init_Custom+0x94>
	switch(speed)
 800274c:	4b26      	ldr	r3, [pc, #152]	; (80027e8 <CAN_Init_Custom+0x11c>)
 800274e:	4298      	cmp	r0, r3
 8002750:	d015      	beq.n	800277e <CAN_Init_Custom+0xb2>
 8002752:	4b26      	ldr	r3, [pc, #152]	; (80027ec <CAN_Init_Custom+0x120>)
 8002754:	4298      	cmp	r0, r3
 8002756:	d1d1      	bne.n	80026fc <CAN_Init_Custom+0x30>
			hcan.Init.Prescaler = 4;
 8002758:	2304      	movs	r3, #4
			hcan.Init.Prescaler = 5;
 800275a:	6063      	str	r3, [r4, #4]
			hcan.Init.TimeSeg1 = CAN_BS1_7TQ;
 800275c:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 8002760:	6123      	str	r3, [r4, #16]
			hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002762:	2300      	movs	r3, #0
 8002764:	6163      	str	r3, [r4, #20]
  hcan.Instance = CAN1;
 8002766:	4b22      	ldr	r3, [pc, #136]	; (80027f0 <CAN_Init_Custom+0x124>)
  hcan.Init.Mode = mode; //CAN_MODE_NORMAL;
 8002768:	60a5      	str	r5, [r4, #8]
  hcan.Instance = CAN1;
 800276a:	6023      	str	r3, [r4, #0]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800276c:	2300      	movs	r3, #0
  return HAL_CAN_Init(&hcan);
 800276e:	4818      	ldr	r0, [pc, #96]	; (80027d0 <CAN_Init_Custom+0x104>)
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002770:	60e3      	str	r3, [r4, #12]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002772:	61a3      	str	r3, [r4, #24]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002774:	83a3      	strh	r3, [r4, #28]
}
 8002776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return HAL_CAN_Init(&hcan);
 800277a:	f7fe b83d 	b.w	80007f8 <HAL_CAN_Init>
			hcan.Init.Prescaler = 5;
 800277e:	2305      	movs	r3, #5
 8002780:	e7eb      	b.n	800275a <CAN_Init_Custom+0x8e>
			hcan.Init.Prescaler = 4;
 8002782:	2304      	movs	r3, #4
 8002784:	6063      	str	r3, [r4, #4]
			hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8002786:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
			hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 800278a:	6123      	str	r3, [r4, #16]
			hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800278c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002790:	e7e8      	b.n	8002764 <CAN_Init_Custom+0x98>
			hcan.Init.Prescaler = 9;
 8002792:	2309      	movs	r3, #9
			hcan.Init.Prescaler = 270;
 8002794:	6063      	str	r3, [r4, #4]
			hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8002796:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800279a:	e7f6      	b.n	800278a <CAN_Init_Custom+0xbe>
			hcan.Init.Prescaler = 18;
 800279c:	2312      	movs	r3, #18
 800279e:	e7f9      	b.n	8002794 <CAN_Init_Custom+0xc8>
			hcan.Init.Prescaler = 45;
 80027a0:	232d      	movs	r3, #45	; 0x2d
 80027a2:	e7f7      	b.n	8002794 <CAN_Init_Custom+0xc8>
			hcan.Init.Prescaler = 120;
 80027a4:	2378      	movs	r3, #120	; 0x78
			hcan.Init.Prescaler = 72;
 80027a6:	6063      	str	r3, [r4, #4]
			hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 80027a8:	f44f 2330 	mov.w	r3, #720896	; 0xb0000
 80027ac:	e7ed      	b.n	800278a <CAN_Init_Custom+0xbe>
			hcan.Init.Prescaler = 255;
 80027ae:	23ff      	movs	r3, #255	; 0xff
 80027b0:	e7f0      	b.n	8002794 <CAN_Init_Custom+0xc8>
			hcan.Init.Prescaler = 27;
 80027b2:	231b      	movs	r3, #27
			hcan.Init.Prescaler = 54;
 80027b4:	6063      	str	r3, [r4, #4]
			hcan.Init.TimeSeg1 = CAN_BS1_11TQ;
 80027b6:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 80027ba:	e7e6      	b.n	800278a <CAN_Init_Custom+0xbe>
			hcan.Init.Prescaler = 54;
 80027bc:	2336      	movs	r3, #54	; 0x36
 80027be:	e7f9      	b.n	80027b4 <CAN_Init_Custom+0xe8>
			hcan.Init.Prescaler = 450;
 80027c0:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 80027c4:	e7e6      	b.n	8002794 <CAN_Init_Custom+0xc8>
			hcan.Init.Prescaler = 270;
 80027c6:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80027ca:	e7e3      	b.n	8002794 <CAN_Init_Custom+0xc8>
 80027cc:	00017406 	.word	0x00017406
 80027d0:	20001918 	.word	0x20001918
 80027d4:	02255100 	.word	0x02255100
 80027d8:	0007a120 	.word	0x0007a120
 80027dc:	0001e848 	.word	0x0001e848
 80027e0:	0003d090 	.word	0x0003d090
 80027e4:	000186a0 	.word	0x000186a0
 80027e8:	000c3500 	.word	0x000c3500
 80027ec:	000f4240 	.word	0x000f4240
 80027f0:	40006400 	.word	0x40006400

080027f4 <Open_CAN_cannel>:
{
 80027f4:	b508      	push	{r3, lr}
	Change_CAN_channel();
 80027f6:	f7ff fec1 	bl	800257c <Change_CAN_channel>
	if(CAN_Init_Custom(eeprom_settings.CAN_Speed[eeprom_settings.numBus], eeprom_settings.CAN_mode[eeprom_settings.numBus]) == HAL_OK)//);CAN_MODE_LOOPBACK
 80027fa:	4b0f      	ldr	r3, [pc, #60]	; (8002838 <Open_CAN_cannel+0x44>)
 80027fc:	7a1a      	ldrb	r2, [r3, #8]
 80027fe:	3202      	adds	r2, #2
 8002800:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8002804:	6850      	ldr	r0, [r2, #4]
 8002806:	7a1a      	ldrb	r2, [r3, #8]
 8002808:	320c      	adds	r2, #12
 800280a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800280e:	6859      	ldr	r1, [r3, #4]
 8002810:	f7ff ff5c 	bl	80026cc <CAN_Init_Custom>
 8002814:	b108      	cbz	r0, 800281a <Open_CAN_cannel+0x26>
	return HAL_ERROR;
 8002816:	2001      	movs	r0, #1
}
 8002818:	bd08      	pop	{r3, pc}
		  if(HAL_CAN_Start(&hcan) != HAL_OK) return HAL_ERROR;
 800281a:	4808      	ldr	r0, [pc, #32]	; (800283c <Open_CAN_cannel+0x48>)
 800281c:	f7fe f8d6 	bl	80009cc <HAL_CAN_Start>
 8002820:	2800      	cmp	r0, #0
 8002822:	d1f8      	bne.n	8002816 <Open_CAN_cannel+0x22>
		  if(HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING |
 8002824:	f240 413e 	movw	r1, #1086	; 0x43e
 8002828:	4804      	ldr	r0, [pc, #16]	; (800283c <Open_CAN_cannel+0x48>)
 800282a:	f7fe fa04 	bl	8000c36 <HAL_CAN_ActivateNotification>
		  if(HAL_CAN_Start(&hcan) != HAL_OK) return HAL_ERROR;
 800282e:	3800      	subs	r0, #0
 8002830:	bf18      	it	ne
 8002832:	2001      	movne	r0, #1
 8002834:	e7f0      	b.n	8002818 <Open_CAN_cannel+0x24>
 8002836:	bf00      	nop
 8002838:	20001738 	.word	0x20001738
 800283c:	20001918 	.word	0x20001918

08002840 <exec_usb_cmd>:
{
 8002840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002844:	4604      	mov	r4, r0
 8002846:	b08c      	sub	sp, #48	; 0x30
    uint8_t cmd_len = strlen ((char *)cmd_buf);	// get command length
 8002848:	f7fd fc80 	bl	800014c <strlen>
    switch (cmd_buf[0]) {
 800284c:	7825      	ldrb	r5, [r4, #0]
    uint8_t cmd_len = strlen ((char *)cmd_buf);	// get command length
 800284e:	b2c3      	uxtb	r3, r0
    switch (cmd_buf[0]) {
 8002850:	f1a5 0221 	sub.w	r2, r5, #33	; 0x21
 8002854:	2a57      	cmp	r2, #87	; 0x57
 8002856:	f200 80bf 	bhi.w	80029d8 <exec_usb_cmd+0x198>
 800285a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800285e:	04ba      	.short	0x04ba
 8002860:	00bd00bd 	.word	0x00bd00bd
 8002864:	00bd00bd 	.word	0x00bd00bd
 8002868:	00bd00bd 	.word	0x00bd00bd
 800286c:	00bd00bd 	.word	0x00bd00bd
 8002870:	00bd00bd 	.word	0x00bd00bd
 8002874:	00bd00bd 	.word	0x00bd00bd
 8002878:	00bd00bd 	.word	0x00bd00bd
 800287c:	00bd00bd 	.word	0x00bd00bd
 8002880:	00bd00bd 	.word	0x00bd00bd
 8002884:	00bd00bd 	.word	0x00bd00bd
 8002888:	00bd00bd 	.word	0x00bd00bd
 800288c:	00bd00bd 	.word	0x00bd00bd
 8002890:	00bd00bd 	.word	0x00bd00bd
 8002894:	00bd00bd 	.word	0x00bd00bd
 8002898:	04b300bd 	.word	0x04b300bd
 800289c:	006600bd 	.word	0x006600bd
 80028a0:	02710467 	.word	0x02710467
 80028a4:	00660476 	.word	0x00660476
 80028a8:	0066009c 	.word	0x0066009c
 80028ac:	00bd0066 	.word	0x00bd0066
 80028b0:	00bd0066 	.word	0x00bd0066
 80028b4:	00b203e3 	.word	0x00b203e3
 80028b8:	024d0058 	.word	0x024d0058
 80028bc:	00bd0066 	.word	0x00bd0066
 80028c0:	0167036e 	.word	0x0167036e
 80028c4:	03f70396 	.word	0x03f70396
 80028c8:	0066006a 	.word	0x0066006a
 80028cc:	00bd0499 	.word	0x00bd0499
 80028d0:	00bd008d 	.word	0x00bd008d
 80028d4:	00bd00bd 	.word	0x00bd00bd
 80028d8:	00bd00bd 	.word	0x00bd00bd
 80028dc:	00bd00bd 	.word	0x00bd00bd
 80028e0:	00bd00bd 	.word	0x00bd00bd
 80028e4:	00bd00bd 	.word	0x00bd00bd
 80028e8:	00bd00fc 	.word	0x00bd00fc
 80028ec:	00bd049f 	.word	0x00bd049f
 80028f0:	00bd00bd 	.word	0x00bd00bd
 80028f4:	00b204a5 	.word	0x00b204a5
 80028f8:	00bd00bd 	.word	0x00bd00bd
 80028fc:	00bd00bd 	.word	0x00bd00bd
 8002900:	01350288 	.word	0x01350288
 8002904:	042402e5 	.word	0x042402e5
 8002908:	00bd007c 	.word	0x00bd007c
 800290c:	0494      	.short	0x0494
        	uart_tx_com_bufer[uart_tx_pointer++] = GET_SERIAL;
 800290e:	214e      	movs	r1, #78	; 0x4e
 8002910:	4880      	ldr	r0, [pc, #512]	; (8002b14 <exec_usb_cmd+0x2d4>)
 8002912:	4b81      	ldr	r3, [pc, #516]	; (8002b18 <exec_usb_cmd+0x2d8>)
 8002914:	6802      	ldr	r2, [r0, #0]
 8002916:	5499      	strb	r1, [r3, r2]
            uart_tx_com_bufer[uart_tx_pointer++] = '0';
 8002918:	4413      	add	r3, r2
            uart_tx_com_bufer[uart_tx_pointer++] = '1';
 800291a:	3205      	adds	r2, #5
            uart_tx_com_bufer[uart_tx_pointer++] = '0';
 800291c:	2130      	movs	r1, #48	; 0x30
            uart_tx_com_bufer[uart_tx_pointer++] = '1';
 800291e:	6002      	str	r2, [r0, #0]
 8002920:	2231      	movs	r2, #49	; 0x31
            uart_tx_com_bufer[uart_tx_pointer++] = '0';
 8002922:	7059      	strb	r1, [r3, #1]
            uart_tx_com_bufer[uart_tx_pointer++] = '0';
 8002924:	7099      	strb	r1, [r3, #2]
            uart_tx_com_bufer[uart_tx_pointer++] = '0';
 8002926:	70d9      	strb	r1, [r3, #3]
            uart_tx_com_bufer[uart_tx_pointer++] = '1';
 8002928:	711a      	strb	r2, [r3, #4]
            return CR;
 800292a:	200d      	movs	r0, #13
}				// end exec_usb_cmd
 800292c:	b00c      	add	sp, #48	; 0x30
 800292e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        	uart_tx_com_bufer[uart_tx_pointer++] = (GET_VERSION);
 8002932:	2456      	movs	r4, #86	; 0x56
 8002934:	4877      	ldr	r0, [pc, #476]	; (8002b14 <exec_usb_cmd+0x2d4>)
 8002936:	4a78      	ldr	r2, [pc, #480]	; (8002b18 <exec_usb_cmd+0x2d8>)
 8002938:	6803      	ldr	r3, [r0, #0]
	out[0] = (temp < 10) ? temp + '0' : temp + ('A' - 10);
 800293a:	2531      	movs	r5, #49	; 0x31
        	uart_tx_com_bufer[uart_tx_pointer++] = (GET_VERSION);
 800293c:	54d4      	strb	r4, [r2, r3]
	out[1] = (temp < 10) ? temp + '0' : temp + ('A' - 10);
 800293e:	2430      	movs	r4, #48	; 0x30
        	uart_tx_com_bufer[uart_tx_pointer++] = (GET_VERSION);
 8002940:	1c59      	adds	r1, r3, #1
	out[0] = (temp < 10) ? temp + '0' : temp + ('A' - 10);
 8002942:	5455      	strb	r5, [r2, r1]
	out[1] = (temp < 10) ? temp + '0' : temp + ('A' - 10);
 8002944:	4411      	add	r1, r2
 8002946:	704c      	strb	r4, [r1, #1]
            uart_tx_pointer +=2;
 8002948:	1cd9      	adds	r1, r3, #3
	out[0] = (temp < 10) ? temp + '0' : temp + ('A' - 10);
 800294a:	5455      	strb	r5, [r2, r1]
	out[1] = (temp < 10) ? temp + '0' : temp + ('A' - 10);
 800294c:	440a      	add	r2, r1
 800294e:	7054      	strb	r4, [r2, #1]
            uart_tx_pointer +=2;
 8002950:	3305      	adds	r3, #5
 8002952:	6003      	str	r3, [r0, #0]
            return CR;
 8002954:	e7e9      	b.n	800292a <exec_usb_cmd+0xea>
        	uart_tx_com_bufer[uart_tx_pointer++] = (GET_SW_VERSION);
 8002956:	2476      	movs	r4, #118	; 0x76
 8002958:	486e      	ldr	r0, [pc, #440]	; (8002b14 <exec_usb_cmd+0x2d4>)
 800295a:	4a6f      	ldr	r2, [pc, #444]	; (8002b18 <exec_usb_cmd+0x2d8>)
 800295c:	6803      	ldr	r3, [r0, #0]
	out[1] = (temp < 10) ? temp + '0' : temp + ('A' - 10);
 800295e:	2531      	movs	r5, #49	; 0x31
        	uart_tx_com_bufer[uart_tx_pointer++] = (GET_SW_VERSION);
 8002960:	54d4      	strb	r4, [r2, r3]
	out[0] = (temp < 10) ? temp + '0' : temp + ('A' - 10);
 8002962:	2430      	movs	r4, #48	; 0x30
        	uart_tx_com_bufer[uart_tx_pointer++] = (GET_SW_VERSION);
 8002964:	1c59      	adds	r1, r3, #1
	out[0] = (temp < 10) ? temp + '0' : temp + ('A' - 10);
 8002966:	5454      	strb	r4, [r2, r1]
	out[1] = (temp < 10) ? temp + '0' : temp + ('A' - 10);
 8002968:	4411      	add	r1, r2
 800296a:	704d      	strb	r5, [r1, #1]
            uart_tx_pointer +=2;
 800296c:	1cd9      	adds	r1, r3, #3
	out[0] = (temp < 10) ? temp + '0' : temp + ('A' - 10);
 800296e:	5454      	strb	r4, [r2, r1]
	out[1] = (temp < 10) ? temp + '0' : temp + ('A' - 10);
 8002970:	440a      	add	r2, r1
 8002972:	2141      	movs	r1, #65	; 0x41
 8002974:	7051      	strb	r1, [r2, #1]
 8002976:	e7eb      	b.n	8002950 <exec_usb_cmd+0x110>
            if(cmd_buf[1] == '1')
 8002978:	7863      	ldrb	r3, [r4, #1]
 800297a:	4a68      	ldr	r2, [pc, #416]	; (8002b1c <exec_usb_cmd+0x2dc>)
 800297c:	2b31      	cmp	r3, #49	; 0x31
 800297e:	d102      	bne.n	8002986 <exec_usb_cmd+0x146>
            	conf.timestamp_en = true;
 8002980:	2301      	movs	r3, #1
            	conf.timestamp_en = (conf.timestamp_en) ? false : true;
 8002982:	7053      	strb	r3, [r2, #1]
 8002984:	e7d1      	b.n	800292a <exec_usb_cmd+0xea>
            else if(cmd_buf[1] == '0')
 8002986:	2b30      	cmp	r3, #48	; 0x30
            	conf.timestamp_en = (conf.timestamp_en) ? false : true;
 8002988:	bf17      	itett	ne
 800298a:	7853      	ldrbne	r3, [r2, #1]
            	conf.timestamp_en = false;
 800298c:	2300      	moveq	r3, #0
            	conf.timestamp_en = (conf.timestamp_en) ? false : true;
 800298e:	fab3 f383 	clzne	r3, r3
 8002992:	095b      	lsrne	r3, r3, #5
 8002994:	e7f5      	b.n	8002982 <exec_usb_cmd+0x142>
        	uart_tx_com_bufer[uart_tx_pointer++] = (READ_STATUS);
 8002996:	2246      	movs	r2, #70	; 0x46
 8002998:	4c5e      	ldr	r4, [pc, #376]	; (8002b14 <exec_usb_cmd+0x2d4>)
 800299a:	4d5f      	ldr	r5, [pc, #380]	; (8002b18 <exec_usb_cmd+0x2d8>)
 800299c:	6823      	ldr	r3, [r4, #0]
            uart_tx_com_bufer[uart_tx_pointer++] = HAL_CAN_GetState(&hcan) + '0';
 800299e:	4860      	ldr	r0, [pc, #384]	; (8002b20 <exec_usb_cmd+0x2e0>)
        	uart_tx_com_bufer[uart_tx_pointer++] = (READ_STATUS);
 80029a0:	54ea      	strb	r2, [r5, r3]
            uart_tx_com_bufer[uart_tx_pointer++] = '0';
 80029a2:	1c9a      	adds	r2, r3, #2
 80029a4:	6022      	str	r2, [r4, #0]
 80029a6:	2230      	movs	r2, #48	; 0x30
 80029a8:	442b      	add	r3, r5
 80029aa:	705a      	strb	r2, [r3, #1]
            uart_tx_com_bufer[uart_tx_pointer++] = HAL_CAN_GetState(&hcan) + '0';
 80029ac:	f7fe fa57 	bl	8000e5e <HAL_CAN_GetState>
 80029b0:	6823      	ldr	r3, [r4, #0]
 80029b2:	3030      	adds	r0, #48	; 0x30
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	54e8      	strb	r0, [r5, r3]
            HAL_CAN_ResetError(&hcan);
 80029b8:	4859      	ldr	r0, [pc, #356]	; (8002b20 <exec_usb_cmd+0x2e0>)
            uart_tx_com_bufer[uart_tx_pointer++] = HAL_CAN_GetState(&hcan) + '0';
 80029ba:	6022      	str	r2, [r4, #0]
            HAL_CAN_ResetError(&hcan);
 80029bc:	f7fe fa62 	bl	8000e84 <HAL_CAN_ResetError>
            return CR;
 80029c0:	e7b3      	b.n	800292a <exec_usb_cmd+0xea>
        	if(cmd_buf[1] == 'E' || cmd_buf[1] == '1')
 80029c2:	7862      	ldrb	r2, [r4, #1]
 80029c4:	2a45      	cmp	r2, #69	; 0x45
 80029c6:	d001      	beq.n	80029cc <exec_usb_cmd+0x18c>
 80029c8:	2a31      	cmp	r2, #49	; 0x31
 80029ca:	d126      	bne.n	8002a1a <exec_usb_cmd+0x1da>
 80029cc:	2103      	movs	r1, #3
 80029ce:	2200      	movs	r2, #0
 80029d0:	e00f      	b.n	80029f2 <exec_usb_cmd+0x1b2>
            		if(cmd_buf[i] < '0' || (cmd_buf[i] > '9' && (cmd_buf[i] <'A' || cmd_buf[i] > 'F'))) return ERROR;
 80029d2:	5c60      	ldrb	r0, [r4, r1]
 80029d4:	282f      	cmp	r0, #47	; 0x2f
 80029d6:	d801      	bhi.n	80029dc <exec_usb_cmd+0x19c>
 80029d8:	2007      	movs	r0, #7
 80029da:	e7a7      	b.n	800292c <exec_usb_cmd+0xec>
 80029dc:	2839      	cmp	r0, #57	; 0x39
 80029de:	d903      	bls.n	80029e8 <exec_usb_cmd+0x1a8>
 80029e0:	f1a0 0641 	sub.w	r6, r0, #65	; 0x41
 80029e4:	2e05      	cmp	r6, #5
 80029e6:	d8f7      	bhi.n	80029d8 <exec_usb_cmd+0x198>
            		filter_temp += HexTo4bits(cmd_buf[i]);
 80029e8:	f7ff fc3e 	bl	8002268 <HexTo4bits>
            		filter_temp = filter_temp << 4;
 80029ec:	0112      	lsls	r2, r2, #4
            		filter_temp += HexTo4bits(cmd_buf[i]);
 80029ee:	4402      	add	r2, r0
            	for(int i = 3; i < cmd_len; i++)
 80029f0:	3101      	adds	r1, #1
 80029f2:	428b      	cmp	r3, r1
 80029f4:	dced      	bgt.n	80029d2 <exec_usb_cmd+0x192>
            	filter_temp = (filter_temp & 0b111111111111111111) << 3;
 80029f6:	484b      	ldr	r0, [pc, #300]	; (8002b24 <exec_usb_cmd+0x2e4>)
 80029f8:	ea00 00c2 	and.w	r0, r0, r2, lsl #3
            	filter_temp |= 1<<2;
 80029fc:	f040 0004 	orr.w	r0, r0, #4
        	if(cmd_buf[2] == 'R' || cmd_buf[2] == '1') filter_temp |= 1<<1;
 8002a00:	78a3      	ldrb	r3, [r4, #2]
 8002a02:	2b52      	cmp	r3, #82	; 0x52
 8002a04:	d001      	beq.n	8002a0a <exec_usb_cmd+0x1ca>
 8002a06:	2b31      	cmp	r3, #49	; 0x31
 8002a08:	d120      	bne.n	8002a4c <exec_usb_cmd+0x20c>
 8002a0a:	f040 0002 	orr.w	r0, r0, #2
        	if(cmd_buf[0] == SET_FILTER_ID) conf.filter_id = filter_temp;
 8002a0e:	4b43      	ldr	r3, [pc, #268]	; (8002b1c <exec_usb_cmd+0x2dc>)
 8002a10:	2d4d      	cmp	r5, #77	; 0x4d
 8002a12:	bf0c      	ite	eq
 8002a14:	61d8      	streq	r0, [r3, #28]
        	else conf.filter_mask = filter_temp;
 8002a16:	6218      	strne	r0, [r3, #32]
 8002a18:	e787      	b.n	800292a <exec_usb_cmd+0xea>
        	else if(cmd_buf[1] == 'S' || cmd_buf[1] == '0')
 8002a1a:	2a53      	cmp	r2, #83	; 0x53
 8002a1c:	d001      	beq.n	8002a22 <exec_usb_cmd+0x1e2>
 8002a1e:	2a30      	cmp	r2, #48	; 0x30
 8002a20:	d1da      	bne.n	80029d8 <exec_usb_cmd+0x198>
 8002a22:	2103      	movs	r1, #3
 8002a24:	2200      	movs	r2, #0
 8002a26:	e00d      	b.n	8002a44 <exec_usb_cmd+0x204>
            		if(cmd_buf[i] < '0' || (cmd_buf[i] > '9' && (cmd_buf[i] <'A' || cmd_buf[i] > 'F'))) return ERROR;
 8002a28:	5c60      	ldrb	r0, [r4, r1]
 8002a2a:	282f      	cmp	r0, #47	; 0x2f
 8002a2c:	d9d4      	bls.n	80029d8 <exec_usb_cmd+0x198>
 8002a2e:	2839      	cmp	r0, #57	; 0x39
 8002a30:	d903      	bls.n	8002a3a <exec_usb_cmd+0x1fa>
 8002a32:	f1a0 0641 	sub.w	r6, r0, #65	; 0x41
 8002a36:	2e05      	cmp	r6, #5
 8002a38:	d8ce      	bhi.n	80029d8 <exec_usb_cmd+0x198>
            		filter_temp += HexTo4bits(cmd_buf[i]);
 8002a3a:	f7ff fc15 	bl	8002268 <HexTo4bits>
            		filter_temp = filter_temp << 4;
 8002a3e:	0112      	lsls	r2, r2, #4
            		filter_temp += HexTo4bits(cmd_buf[i]);
 8002a40:	4402      	add	r2, r0
            	for(int i = 3; i < cmd_len; i++)
 8002a42:	3101      	adds	r1, #1
 8002a44:	428b      	cmp	r3, r1
 8002a46:	dcef      	bgt.n	8002a28 <exec_usb_cmd+0x1e8>
            	filter_temp = (filter_temp & 0b11111111111) << 21;
 8002a48:	0550      	lsls	r0, r2, #21
 8002a4a:	e7d9      	b.n	8002a00 <exec_usb_cmd+0x1c0>
        	else if(cmd_buf[2] != 'D' && cmd_buf[2] != '0') return ERROR;
 8002a4c:	2b44      	cmp	r3, #68	; 0x44
 8002a4e:	d0de      	beq.n	8002a0e <exec_usb_cmd+0x1ce>
 8002a50:	2b30      	cmp	r3, #48	; 0x30
 8002a52:	d1c1      	bne.n	80029d8 <exec_usb_cmd+0x198>
 8002a54:	e7db      	b.n	8002a0e <exec_usb_cmd+0x1ce>
        	if(cmd_len == 3)
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d11d      	bne.n	8002a96 <exec_usb_cmd+0x256>
        		conf.filter_num = HexTo4bits(cmd_buf[1]);
 8002a5a:	7860      	ldrb	r0, [r4, #1]
 8002a5c:	f7ff fc04 	bl	8002268 <HexTo4bits>
 8002a60:	4b2e      	ldr	r3, [pc, #184]	; (8002b1c <exec_usb_cmd+0x2dc>)
 8002a62:	6258      	str	r0, [r3, #36]	; 0x24
        		conf.filter_mode = cmd_buf[2] == 'I' ? CAN_FILTERMODE_IDLIST : cmd_buf[2] == 'M' ? CAN_FILTERMODE_IDMASK : 0xFF;
 8002a64:	78a2      	ldrb	r2, [r4, #2]
 8002a66:	2a49      	cmp	r2, #73	; 0x49
 8002a68:	d013      	beq.n	8002a92 <exec_usb_cmd+0x252>
 8002a6a:	2a4d      	cmp	r2, #77	; 0x4d
 8002a6c:	bf0c      	ite	eq
 8002a6e:	2200      	moveq	r2, #0
 8002a70:	22ff      	movne	r2, #255	; 0xff
 8002a72:	629a      	str	r2, [r3, #40]	; 0x28
        	if(conf.filter_num > 14 || conf.filter_mode == 0xFF) return ERROR;
 8002a74:	4829      	ldr	r0, [pc, #164]	; (8002b1c <exec_usb_cmd+0x2dc>)
 8002a76:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002a78:	2b0e      	cmp	r3, #14
 8002a7a:	d8ad      	bhi.n	80029d8 <exec_usb_cmd+0x198>
 8002a7c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002a7e:	2aff      	cmp	r2, #255	; 0xff
 8002a80:	d0aa      	beq.n	80029d8 <exec_usb_cmd+0x198>
        	if(SetFilterCAN(conf.filter_id, conf.filter_mask, conf.filter_mode, conf.filter_num) != HAL_OK) return ERROR;
 8002a82:	6a01      	ldr	r1, [r0, #32]
 8002a84:	69c0      	ldr	r0, [r0, #28]
 8002a86:	f7ff fd03 	bl	8002490 <SetFilterCAN>
        	if(Open_CAN_cannel() != HAL_OK) return ERROR;
 8002a8a:	2800      	cmp	r0, #0
 8002a8c:	f43f af4d 	beq.w	800292a <exec_usb_cmd+0xea>
 8002a90:	e7a2      	b.n	80029d8 <exec_usb_cmd+0x198>
        		conf.filter_mode = cmd_buf[2] == 'I' ? CAN_FILTERMODE_IDLIST : cmd_buf[2] == 'M' ? CAN_FILTERMODE_IDMASK : 0xFF;
 8002a92:	2201      	movs	r2, #1
 8002a94:	e7ed      	b.n	8002a72 <exec_usb_cmd+0x232>
        	else if(cmd_len == 4)
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d19e      	bne.n	80029d8 <exec_usb_cmd+0x198>
        		conf.filter_num = HexTo4bits(cmd_buf[1]) * 10 + HexTo4bits(cmd_buf[2]);
 8002a9a:	7860      	ldrb	r0, [r4, #1]
 8002a9c:	f7ff fbe4 	bl	8002268 <HexTo4bits>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	78a0      	ldrb	r0, [r4, #2]
 8002aa4:	f7ff fbe0 	bl	8002268 <HexTo4bits>
 8002aa8:	210a      	movs	r1, #10
 8002aaa:	fb01 0003 	mla	r0, r1, r3, r0
 8002aae:	4a1b      	ldr	r2, [pc, #108]	; (8002b1c <exec_usb_cmd+0x2dc>)
 8002ab0:	6250      	str	r0, [r2, #36]	; 0x24
        		conf.filter_mode = cmd_buf[3] == 'I' ? CAN_FILTERMODE_IDLIST : cmd_buf[3] == 'M' ? CAN_FILTERMODE_IDMASK : 0xFF;
 8002ab2:	78e3      	ldrb	r3, [r4, #3]
 8002ab4:	2b49      	cmp	r3, #73	; 0x49
 8002ab6:	d005      	beq.n	8002ac4 <exec_usb_cmd+0x284>
 8002ab8:	2b4d      	cmp	r3, #77	; 0x4d
 8002aba:	bf0c      	ite	eq
 8002abc:	2300      	moveq	r3, #0
 8002abe:	23ff      	movne	r3, #255	; 0xff
 8002ac0:	6293      	str	r3, [r2, #40]	; 0x28
 8002ac2:	e7d7      	b.n	8002a74 <exec_usb_cmd+0x234>
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e7fb      	b.n	8002ac0 <exec_usb_cmd+0x280>
        	eeprom_settings.CAN_Speed[eeprom_settings.numBus] = 0;
 8002ac8:	2000      	movs	r0, #0
        		eeprom_settings.CAN_Speed[eeprom_settings.numBus] *= 10;
 8002aca:	260a      	movs	r6, #10
        	eeprom_settings.CAN_Speed[eeprom_settings.numBus] = 0;
 8002acc:	4a16      	ldr	r2, [pc, #88]	; (8002b28 <exec_usb_cmd+0x2e8>)
        	for(int i = 1; i < cmd_len; i++)
 8002ace:	f1c4 0501 	rsb	r5, r4, #1
        	eeprom_settings.CAN_Speed[eeprom_settings.numBus] = 0;
 8002ad2:	7a11      	ldrb	r1, [r2, #8]
 8002ad4:	3102      	adds	r1, #2
 8002ad6:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8002ada:	6048      	str	r0, [r1, #4]
        	for(int i = 1; i < cmd_len; i++)
 8002adc:	1929      	adds	r1, r5, r4
 8002ade:	428b      	cmp	r3, r1
 8002ae0:	f77f af23 	ble.w	800292a <exec_usb_cmd+0xea>
        		if(cmd_buf[i] < '0' || cmd_buf[i] > '9') return ERROR;
 8002ae4:	7861      	ldrb	r1, [r4, #1]
 8002ae6:	3930      	subs	r1, #48	; 0x30
 8002ae8:	2909      	cmp	r1, #9
 8002aea:	f63f af75 	bhi.w	80029d8 <exec_usb_cmd+0x198>
        		eeprom_settings.CAN_Speed[eeprom_settings.numBus] *= 10;
 8002aee:	7a11      	ldrb	r1, [r2, #8]
 8002af0:	3102      	adds	r1, #2
 8002af2:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8002af6:	6848      	ldr	r0, [r1, #4]
 8002af8:	4370      	muls	r0, r6
 8002afa:	6048      	str	r0, [r1, #4]
        		eeprom_settings.CAN_Speed[eeprom_settings.numBus] += HexTo4bits(cmd_buf[i]);
 8002afc:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8002b00:	f7ff fbb2 	bl	8002268 <HexTo4bits>
 8002b04:	7a11      	ldrb	r1, [r2, #8]
 8002b06:	3102      	adds	r1, #2
 8002b08:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8002b0c:	684f      	ldr	r7, [r1, #4]
 8002b0e:	4438      	add	r0, r7
 8002b10:	6048      	str	r0, [r1, #4]
        	for(int i = 1; i < cmd_len; i++)
 8002b12:	e7e3      	b.n	8002adc <exec_usb_cmd+0x29c>
 8002b14:	20001e9c 	.word	0x20001e9c
 8002b18:	20001e7c 	.word	0x20001e7c
 8002b1c:	200019a0 	.word	0x200019a0
 8002b20:	20001918 	.word	0x20001918
 8002b24:	001ffff8 	.word	0x001ffff8
 8002b28:	20001738 	.word	0x20001738
            if ((cmd_len != 5) && (cmd_len != 2))
 8002b2c:	2b05      	cmp	r3, #5
 8002b2e:	d002      	beq.n	8002b36 <exec_usb_cmd+0x2f6>
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	f47f af51 	bne.w	80029d8 <exec_usb_cmd+0x198>
            if (conf.state != IDLE_ST)
 8002b36:	4bae      	ldr	r3, [pc, #696]	; (8002df0 <exec_usb_cmd+0x5b0>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f47f af4c 	bne.w	80029d8 <exec_usb_cmd+0x198>
            switch(cmd_buf[1])
 8002b40:	7863      	ldrb	r3, [r4, #1]
 8002b42:	3b30      	subs	r3, #48	; 0x30
 8002b44:	2b34      	cmp	r3, #52	; 0x34
 8002b46:	f63f af47 	bhi.w	80029d8 <exec_usb_cmd+0x198>
 8002b4a:	a201      	add	r2, pc, #4	; (adr r2, 8002b50 <exec_usb_cmd+0x310>)
 8002b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b50:	08002c25 	.word	0x08002c25
 8002b54:	08002c37 	.word	0x08002c37
 8002b58:	08002c47 	.word	0x08002c47
 8002b5c:	08002c57 	.word	0x08002c57
 8002b60:	08002c65 	.word	0x08002c65
 8002b64:	08002c73 	.word	0x08002c73
 8002b68:	08002c81 	.word	0x08002c81
 8002b6c:	08002c8f 	.word	0x08002c8f
 8002b70:	08002c9d 	.word	0x08002c9d
 8002b74:	08002cab 	.word	0x08002cab
 8002b78:	080029d9 	.word	0x080029d9
 8002b7c:	080029d9 	.word	0x080029d9
 8002b80:	080029d9 	.word	0x080029d9
 8002b84:	080029d9 	.word	0x080029d9
 8002b88:	080029d9 	.word	0x080029d9
 8002b8c:	080029d9 	.word	0x080029d9
 8002b90:	080029d9 	.word	0x080029d9
 8002b94:	08002cb9 	.word	0x08002cb9
 8002b98:	08002cc9 	.word	0x08002cc9
 8002b9c:	08002cd9 	.word	0x08002cd9
 8002ba0:	08002ce9 	.word	0x08002ce9
 8002ba4:	080029d9 	.word	0x080029d9
 8002ba8:	080029d9 	.word	0x080029d9
 8002bac:	080029d9 	.word	0x080029d9
 8002bb0:	080029d9 	.word	0x080029d9
 8002bb4:	080029d9 	.word	0x080029d9
 8002bb8:	080029d9 	.word	0x080029d9
 8002bbc:	080029d9 	.word	0x080029d9
 8002bc0:	080029d9 	.word	0x080029d9
 8002bc4:	080029d9 	.word	0x080029d9
 8002bc8:	080029d9 	.word	0x080029d9
 8002bcc:	080029d9 	.word	0x080029d9
 8002bd0:	080029d9 	.word	0x080029d9
 8002bd4:	080029d9 	.word	0x080029d9
 8002bd8:	080029d9 	.word	0x080029d9
 8002bdc:	080029d9 	.word	0x080029d9
 8002be0:	080029d9 	.word	0x080029d9
 8002be4:	080029d9 	.word	0x080029d9
 8002be8:	080029d9 	.word	0x080029d9
 8002bec:	080029d9 	.word	0x080029d9
 8002bf0:	080029d9 	.word	0x080029d9
 8002bf4:	080029d9 	.word	0x080029d9
 8002bf8:	080029d9 	.word	0x080029d9
 8002bfc:	080029d9 	.word	0x080029d9
 8002c00:	080029d9 	.word	0x080029d9
 8002c04:	080029d9 	.word	0x080029d9
 8002c08:	080029d9 	.word	0x080029d9
 8002c0c:	080029d9 	.word	0x080029d9
 8002c10:	080029d9 	.word	0x080029d9
 8002c14:	08002cb9 	.word	0x08002cb9
 8002c18:	08002cc9 	.word	0x08002cc9
 8002c1c:	08002cd9 	.word	0x08002cd9
 8002c20:	08002ce9 	.word	0x08002ce9
            	eeprom_settings.CAN_Speed[eeprom_settings.numBus] = 10000;
 8002c24:	4b73      	ldr	r3, [pc, #460]	; (8002df4 <exec_usb_cmd+0x5b4>)
 8002c26:	7a1a      	ldrb	r2, [r3, #8]
 8002c28:	3202      	adds	r2, #2
 8002c2a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002c2e:	f242 7210 	movw	r2, #10000	; 0x2710
            	eeprom_settings.CAN_Speed[eeprom_settings.numBus] = 33333;
 8002c32:	605a      	str	r2, [r3, #4]
            	break;
 8002c34:	e679      	b.n	800292a <exec_usb_cmd+0xea>
            	eeprom_settings.CAN_Speed[eeprom_settings.numBus] = 20000;
 8002c36:	4b6f      	ldr	r3, [pc, #444]	; (8002df4 <exec_usb_cmd+0x5b4>)
 8002c38:	7a1a      	ldrb	r2, [r3, #8]
 8002c3a:	3202      	adds	r2, #2
 8002c3c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002c40:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002c44:	e7f5      	b.n	8002c32 <exec_usb_cmd+0x3f2>
            	eeprom_settings.CAN_Speed[eeprom_settings.numBus] = 50000;
 8002c46:	4b6b      	ldr	r3, [pc, #428]	; (8002df4 <exec_usb_cmd+0x5b4>)
 8002c48:	7a1a      	ldrb	r2, [r3, #8]
 8002c4a:	3202      	adds	r2, #2
 8002c4c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002c50:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002c54:	e7ed      	b.n	8002c32 <exec_usb_cmd+0x3f2>
            	eeprom_settings.CAN_Speed[eeprom_settings.numBus] = 100000;
 8002c56:	4b67      	ldr	r3, [pc, #412]	; (8002df4 <exec_usb_cmd+0x5b4>)
 8002c58:	7a1a      	ldrb	r2, [r3, #8]
 8002c5a:	3202      	adds	r2, #2
 8002c5c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002c60:	4a65      	ldr	r2, [pc, #404]	; (8002df8 <exec_usb_cmd+0x5b8>)
 8002c62:	e7e6      	b.n	8002c32 <exec_usb_cmd+0x3f2>
            	eeprom_settings.CAN_Speed[eeprom_settings.numBus] = 125000;
 8002c64:	4b63      	ldr	r3, [pc, #396]	; (8002df4 <exec_usb_cmd+0x5b4>)
 8002c66:	7a1a      	ldrb	r2, [r3, #8]
 8002c68:	3202      	adds	r2, #2
 8002c6a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002c6e:	4a63      	ldr	r2, [pc, #396]	; (8002dfc <exec_usb_cmd+0x5bc>)
 8002c70:	e7df      	b.n	8002c32 <exec_usb_cmd+0x3f2>
            	eeprom_settings.CAN_Speed[eeprom_settings.numBus] = 250000;
 8002c72:	4b60      	ldr	r3, [pc, #384]	; (8002df4 <exec_usb_cmd+0x5b4>)
 8002c74:	7a1a      	ldrb	r2, [r3, #8]
 8002c76:	3202      	adds	r2, #2
 8002c78:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002c7c:	4a60      	ldr	r2, [pc, #384]	; (8002e00 <exec_usb_cmd+0x5c0>)
 8002c7e:	e7d8      	b.n	8002c32 <exec_usb_cmd+0x3f2>
            	eeprom_settings.CAN_Speed[eeprom_settings.numBus] = 500000;
 8002c80:	4b5c      	ldr	r3, [pc, #368]	; (8002df4 <exec_usb_cmd+0x5b4>)
 8002c82:	7a1a      	ldrb	r2, [r3, #8]
 8002c84:	3202      	adds	r2, #2
 8002c86:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002c8a:	4a5e      	ldr	r2, [pc, #376]	; (8002e04 <exec_usb_cmd+0x5c4>)
 8002c8c:	e7d1      	b.n	8002c32 <exec_usb_cmd+0x3f2>
            	eeprom_settings.CAN_Speed[eeprom_settings.numBus] = 800000;
 8002c8e:	4b59      	ldr	r3, [pc, #356]	; (8002df4 <exec_usb_cmd+0x5b4>)
 8002c90:	7a1a      	ldrb	r2, [r3, #8]
 8002c92:	3202      	adds	r2, #2
 8002c94:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002c98:	4a5b      	ldr	r2, [pc, #364]	; (8002e08 <exec_usb_cmd+0x5c8>)
 8002c9a:	e7ca      	b.n	8002c32 <exec_usb_cmd+0x3f2>
            	eeprom_settings.CAN_Speed[eeprom_settings.numBus] = 1000000;
 8002c9c:	4b55      	ldr	r3, [pc, #340]	; (8002df4 <exec_usb_cmd+0x5b4>)
 8002c9e:	7a1a      	ldrb	r2, [r3, #8]
 8002ca0:	3202      	adds	r2, #2
 8002ca2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002ca6:	4a59      	ldr	r2, [pc, #356]	; (8002e0c <exec_usb_cmd+0x5cc>)
 8002ca8:	e7c3      	b.n	8002c32 <exec_usb_cmd+0x3f2>
            	eeprom_settings.CAN_Speed[eeprom_settings.numBus] = 95238;
 8002caa:	4b52      	ldr	r3, [pc, #328]	; (8002df4 <exec_usb_cmd+0x5b4>)
 8002cac:	7a1a      	ldrb	r2, [r3, #8]
 8002cae:	3202      	adds	r2, #2
 8002cb0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002cb4:	4a56      	ldr	r2, [pc, #344]	; (8002e10 <exec_usb_cmd+0x5d0>)
 8002cb6:	e7bc      	b.n	8002c32 <exec_usb_cmd+0x3f2>
            	eeprom_settings.CAN_Speed[eeprom_settings.numBus] = 8333;
 8002cb8:	4b4e      	ldr	r3, [pc, #312]	; (8002df4 <exec_usb_cmd+0x5b4>)
 8002cba:	7a1a      	ldrb	r2, [r3, #8]
 8002cbc:	3202      	adds	r2, #2
 8002cbe:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002cc2:	f242 028d 	movw	r2, #8333	; 0x208d
 8002cc6:	e7b4      	b.n	8002c32 <exec_usb_cmd+0x3f2>
            	eeprom_settings.CAN_Speed[eeprom_settings.numBus] = 47619;
 8002cc8:	4b4a      	ldr	r3, [pc, #296]	; (8002df4 <exec_usb_cmd+0x5b4>)
 8002cca:	7a1a      	ldrb	r2, [r3, #8]
 8002ccc:	3202      	adds	r2, #2
 8002cce:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002cd2:	f64b 2203 	movw	r2, #47619	; 0xba03
 8002cd6:	e7ac      	b.n	8002c32 <exec_usb_cmd+0x3f2>
            	eeprom_settings.CAN_Speed[eeprom_settings.numBus] = 33333;
 8002cd8:	4b46      	ldr	r3, [pc, #280]	; (8002df4 <exec_usb_cmd+0x5b4>)
 8002cda:	7a1a      	ldrb	r2, [r3, #8]
 8002cdc:	3202      	adds	r2, #2
 8002cde:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002ce2:	f248 2235 	movw	r2, #33333	; 0x8235
 8002ce6:	e7a4      	b.n	8002c32 <exec_usb_cmd+0x3f2>
            	eeprom_settings.CAN_Speed[eeprom_settings.numBus] = 5000;
 8002ce8:	4b42      	ldr	r3, [pc, #264]	; (8002df4 <exec_usb_cmd+0x5b4>)
 8002cea:	7a1a      	ldrb	r2, [r3, #8]
 8002cec:	3202      	adds	r2, #2
 8002cee:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf6:	e79c      	b.n	8002c32 <exec_usb_cmd+0x3f2>
        	if(eeprom_settings.numBus == 3) // LIN
 8002cf8:	4c3e      	ldr	r4, [pc, #248]	; (8002df4 <exec_usb_cmd+0x5b4>)
 8002cfa:	7a23      	ldrb	r3, [r4, #8]
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	d111      	bne.n	8002d24 <exec_usb_cmd+0x4e4>
            	eeprom_settings.CAN_mode[eeprom_settings.numBus] = CAN_MODE_NORMAL;
 8002d00:	2200      	movs	r2, #0
 8002d02:	7a23      	ldrb	r3, [r4, #8]
 8002d04:	330c      	adds	r3, #12
 8002d06:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002d0a:	605a      	str	r2, [r3, #4]
            	if(Open_LIN_cannel() != HAL_OK) return ERROR;
 8002d0c:	f7ff fbea 	bl	80024e4 <Open_LIN_cannel>
            	if(Open_CAN_cannel() != HAL_OK) return ERROR;
 8002d10:	2800      	cmp	r0, #0
 8002d12:	f47f ae61 	bne.w	80029d8 <exec_usb_cmd+0x198>
        	conf.CAN_Enable[eeprom_settings.numBus] = true;
 8002d16:	2101      	movs	r1, #1
 8002d18:	4a35      	ldr	r2, [pc, #212]	; (8002df0 <exec_usb_cmd+0x5b0>)
 8002d1a:	7a23      	ldrb	r3, [r4, #8]
    		conf.state = LAWICEL_CONNECT;
 8002d1c:	7011      	strb	r1, [r2, #0]
        	conf.CAN_Enable[eeprom_settings.numBus] = true;
 8002d1e:	4413      	add	r3, r2
 8002d20:	70d9      	strb	r1, [r3, #3]
            return CR;
 8002d22:	e602      	b.n	800292a <exec_usb_cmd+0xea>
                if (HAL_CAN_GetState(&hcan) != HAL_CAN_STATE_RESET) return ERROR;
 8002d24:	483b      	ldr	r0, [pc, #236]	; (8002e14 <exec_usb_cmd+0x5d4>)
 8002d26:	f7fe f89a 	bl	8000e5e <HAL_CAN_GetState>
 8002d2a:	2800      	cmp	r0, #0
 8002d2c:	f47f ae54 	bne.w	80029d8 <exec_usb_cmd+0x198>
            	eeprom_settings.CAN_mode[eeprom_settings.numBus] = CAN_MODE_NORMAL;
 8002d30:	7a23      	ldrb	r3, [r4, #8]
 8002d32:	330c      	adds	r3, #12
 8002d34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002d38:	6058      	str	r0, [r3, #4]
            	if(Open_CAN_cannel() != HAL_OK) return ERROR;
 8002d3a:	f7ff fd5b 	bl	80027f4 <Open_CAN_cannel>
 8002d3e:	e7e7      	b.n	8002d10 <exec_usb_cmd+0x4d0>
        	conf.state = IDLE_ST;
 8002d40:	2300      	movs	r3, #0
 8002d42:	4c2b      	ldr	r4, [pc, #172]	; (8002df0 <exec_usb_cmd+0x5b0>)
        	if(eeprom_settings.numBus == 3) // LIN
 8002d44:	4d2b      	ldr	r5, [pc, #172]	; (8002df4 <exec_usb_cmd+0x5b4>)
        	conf.state = IDLE_ST;
 8002d46:	7023      	strb	r3, [r4, #0]
        	if(eeprom_settings.numBus == 3) // LIN
 8002d48:	7a2b      	ldrb	r3, [r5, #8]
 8002d4a:	2b03      	cmp	r3, #3
 8002d4c:	d109      	bne.n	8002d62 <exec_usb_cmd+0x522>
            	if(Close_LIN_cannel() != HAL_OK) return ERROR;
 8002d4e:	f7ff fbf1 	bl	8002534 <Close_LIN_cannel>
        		if(Close_CAN_cannel() != HAL_OK) return ERROR;
 8002d52:	2800      	cmp	r0, #0
 8002d54:	f47f ae40 	bne.w	80029d8 <exec_usb_cmd+0x198>
        	conf.CAN_Enable[eeprom_settings.numBus] = false;
 8002d58:	7a2b      	ldrb	r3, [r5, #8]
 8002d5a:	441c      	add	r4, r3
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	70e3      	strb	r3, [r4, #3]
            return CR;
 8002d60:	e5e3      	b.n	800292a <exec_usb_cmd+0xea>
        		HAL_CAN_ResetError(&hcan);
 8002d62:	482c      	ldr	r0, [pc, #176]	; (8002e14 <exec_usb_cmd+0x5d4>)
 8002d64:	f7fe f88e 	bl	8000e84 <HAL_CAN_ResetError>
        		if(Close_CAN_cannel() != HAL_OK) return ERROR;
 8002d68:	f7ff fbfe 	bl	8002568 <Close_CAN_cannel>
 8002d6c:	e7f1      	b.n	8002d52 <exec_usb_cmd+0x512>
            if (conf.state == IDLE_ST)
 8002d6e:	4e20      	ldr	r6, [pc, #128]	; (8002df0 <exec_usb_cmd+0x5b0>)
 8002d70:	7832      	ldrb	r2, [r6, #0]
 8002d72:	2a00      	cmp	r2, #0
 8002d74:	f43f ae30 	beq.w	80029d8 <exec_usb_cmd+0x198>
            if (cmd_len != 5)
 8002d78:	2b05      	cmp	r3, #5
 8002d7a:	f47f ae2d 	bne.w	80029d8 <exec_usb_cmd+0x198>
        	CAN_TxHeader.StdId = (HexTo4bits(cmd_buf[1]) << 8) | HexToShort(cmd_buf[2], cmd_buf[3]);
 8002d7e:	7860      	ldrb	r0, [r4, #1]
 8002d80:	f7ff fa72 	bl	8002268 <HexTo4bits>
 8002d84:	78e1      	ldrb	r1, [r4, #3]
 8002d86:	4603      	mov	r3, r0
 8002d88:	78a0      	ldrb	r0, [r4, #2]
 8002d8a:	f7ff fa78 	bl	800227e <HexToShort>
        	CAN_TxHeader.RTR = CAN_RTR_REMOTE;
 8002d8e:	2700      	movs	r7, #0
        	CAN_TxHeader.StdId = (HexTo4bits(cmd_buf[1]) << 8) | HexToShort(cmd_buf[2], cmd_buf[3]);
 8002d90:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
        	CAN_TxHeader.RTR = CAN_RTR_REMOTE;
 8002d94:	2302      	movs	r3, #2
        	CAN_TxHeader.StdId = (HexTo4bits(cmd_buf[1]) << 8) | HexToShort(cmd_buf[2], cmd_buf[3]);
 8002d96:	4d20      	ldr	r5, [pc, #128]	; (8002e18 <exec_usb_cmd+0x5d8>)
        	CAN_TxHeader.RTR = CAN_RTR_REMOTE;
 8002d98:	e9c5 7302 	strd	r7, r3, [r5, #8]
        	CAN_TxHeader.StdId = (HexTo4bits(cmd_buf[1]) << 8) | HexToShort(cmd_buf[2], cmd_buf[3]);
 8002d9c:	6028      	str	r0, [r5, #0]
        	CAN_TxHeader.DLC = HexTo4bits(cmd_buf[4]);
 8002d9e:	7920      	ldrb	r0, [r4, #4]
        	CAN_TxHeader.DLC = HexTo4bits(cmd_buf[9]);
 8002da0:	f7ff fa62 	bl	8002268 <HexTo4bits>
        	CAN_status = HAL_CAN_AddTxMessage(&hcan, &CAN_TxHeader, can_tx_msg.data_byte, &CAN_mailbox);
 8002da4:	4629      	mov	r1, r5
 8002da6:	4c1d      	ldr	r4, [pc, #116]	; (8002e1c <exec_usb_cmd+0x5dc>)
 8002da8:	4b1d      	ldr	r3, [pc, #116]	; (8002e20 <exec_usb_cmd+0x5e0>)
        	CAN_TxHeader.DLC = HexTo4bits(cmd_buf[9]);
 8002daa:	6128      	str	r0, [r5, #16]
        	CAN_status = HAL_CAN_AddTxMessage(&hcan, &CAN_TxHeader, can_tx_msg.data_byte, &CAN_mailbox);
 8002dac:	f104 0220 	add.w	r2, r4, #32
 8002db0:	4818      	ldr	r0, [pc, #96]	; (8002e14 <exec_usb_cmd+0x5d4>)
 8002db2:	f7fd fe7b 	bl	8000aac <HAL_CAN_AddTxMessage>
 8002db6:	4b1b      	ldr	r3, [pc, #108]	; (8002e24 <exec_usb_cmd+0x5e4>)
 8002db8:	7018      	strb	r0, [r3, #0]
        	if(CAN_status != HAL_OK)
 8002dba:	2800      	cmp	r0, #0
 8002dbc:	f47f ae0c 	bne.w	80029d8 <exec_usb_cmd+0x198>
        	if(conf.loger_run == true)
 8002dc0:	f896 602d 	ldrb.w	r6, [r6, #45]	; 0x2d
 8002dc4:	2e01      	cmp	r6, #1
 8002dc6:	f47f adb0 	bne.w	800292a <exec_usb_cmd+0xea>
        		can_tx_msg.timestamp = HAL_GetTick();
 8002dca:	f7fd fcfd 	bl	80007c8 <HAL_GetTick>
        		can_tx_msg.header.DLC = CAN_TxHeader.DLC;
 8002dce:	692b      	ldr	r3, [r5, #16]
        		can_tx_msg.timestamp = HAL_GetTick();
 8002dd0:	6020      	str	r0, [r4, #0]
        		can_tx_msg.header.DLC = CAN_TxHeader.DLC;
 8002dd2:	6163      	str	r3, [r4, #20]
        		can_tx_msg.header.ExtId = CAN_TxHeader.ExtId;
 8002dd4:	686b      	ldr	r3, [r5, #4]
        		can_tx_msg.can_dir = DIR_TRANSMIT;
 8002dd6:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
        		can_tx_msg.header.ExtId = CAN_TxHeader.ExtId;
 8002dda:	60a3      	str	r3, [r4, #8]
        		can_tx_msg.header.StdId = CAN_TxHeader.StdId;
 8002ddc:	682b      	ldr	r3, [r5, #0]
 8002dde:	6063      	str	r3, [r4, #4]
        		can_tx_msg.header.RTR = CAN_TxHeader.RTR;
 8002de0:	68eb      	ldr	r3, [r5, #12]
 8002de2:	6123      	str	r3, [r4, #16]
        		can_tx_msg.header.IDE = CAN_TxHeader.IDE;
 8002de4:	68ab      	ldr	r3, [r5, #8]
 8002de6:	60e3      	str	r3, [r4, #12]
        		can_tx_msg.bus = eeprom_settings.numBus;
 8002de8:	4b02      	ldr	r3, [pc, #8]	; (8002df4 <exec_usb_cmd+0x5b4>)
 8002dea:	7a1b      	ldrb	r3, [r3, #8]
 8002dec:	e084      	b.n	8002ef8 <exec_usb_cmd+0x6b8>
 8002dee:	bf00      	nop
 8002df0:	200019a0 	.word	0x200019a0
 8002df4:	20001738 	.word	0x20001738
 8002df8:	000186a0 	.word	0x000186a0
 8002dfc:	0001e848 	.word	0x0001e848
 8002e00:	0003d090 	.word	0x0003d090
 8002e04:	0007a120 	.word	0x0007a120
 8002e08:	000c3500 	.word	0x000c3500
 8002e0c:	000f4240 	.word	0x000f4240
 8002e10:	00017406 	.word	0x00017406
 8002e14:	20001918 	.word	0x20001918
 8002e18:	200016c0 	.word	0x200016c0
 8002e1c:	200016e8 	.word	0x200016e8
 8002e20:	200016d8 	.word	0x200016d8
 8002e24:	200016dc 	.word	0x200016dc
            if (conf.state == IDLE_ST)
 8002e28:	4fac      	ldr	r7, [pc, #688]	; (80030dc <exec_usb_cmd+0x89c>)
 8002e2a:	783a      	ldrb	r2, [r7, #0]
 8002e2c:	2a00      	cmp	r2, #0
 8002e2e:	f43f add3 	beq.w	80029d8 <exec_usb_cmd+0x198>
            if ((cmd_len < 5) || (cmd_len > 21))
 8002e32:	1f5a      	subs	r2, r3, #5
 8002e34:	b2d3      	uxtb	r3, r2
 8002e36:	2b10      	cmp	r3, #16
 8002e38:	f63f adce 	bhi.w	80029d8 <exec_usb_cmd+0x198>
        	CAN_TxHeader.StdId = (HexTo4bits(cmd_buf[1]) << 8) | HexToShort(cmd_buf[2], cmd_buf[3]);
 8002e3c:	7860      	ldrb	r0, [r4, #1]
 8002e3e:	f7ff fa13 	bl	8002268 <HexTo4bits>
 8002e42:	78e1      	ldrb	r1, [r4, #3]
 8002e44:	4603      	mov	r3, r0
 8002e46:	78a0      	ldrb	r0, [r4, #2]
 8002e48:	f7ff fa19 	bl	800227e <HexToShort>
 8002e4c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
        	CAN_TxHeader.IDE = CAN_ID_STD;
 8002e50:	2300      	movs	r3, #0
        	CAN_TxHeader.StdId = (HexTo4bits(cmd_buf[1]) << 8) | HexToShort(cmd_buf[2], cmd_buf[3]);
 8002e52:	4da3      	ldr	r5, [pc, #652]	; (80030e0 <exec_usb_cmd+0x8a0>)
            if (CAN_TxHeader.DLC != ((cmd_len - 5) / 2))
 8002e54:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
        	CAN_TxHeader.RTR = CAN_RTR_DATA;
 8002e58:	e9c5 3302 	strd	r3, r3, [r5, #8]
        	CAN_TxHeader.StdId = (HexTo4bits(cmd_buf[1]) << 8) | HexToShort(cmd_buf[2], cmd_buf[3]);
 8002e5c:	6028      	str	r0, [r5, #0]
        	CAN_TxHeader.DLC = HexTo4bits(cmd_buf[4]);
 8002e5e:	7920      	ldrb	r0, [r4, #4]
 8002e60:	f7ff fa02 	bl	8002268 <HexTo4bits>
            if (CAN_TxHeader.DLC != ((cmd_len - 5) / 2))
 8002e64:	ebb0 0f62 	cmp.w	r0, r2, asr #1
        	CAN_TxHeader.DLC = HexTo4bits(cmd_buf[4]);
 8002e68:	4606      	mov	r6, r0
 8002e6a:	6128      	str	r0, [r5, #16]
            if (CAN_TxHeader.DLC != ((cmd_len - 5) / 2))
 8002e6c:	f47f adb4 	bne.w	80029d8 <exec_usb_cmd+0x198>
            if (CAN_TxHeader.DLC > 8)
 8002e70:	2808      	cmp	r0, #8
 8002e72:	f63f adb1 	bhi.w	80029d8 <exec_usb_cmd+0x198>
 8002e76:	4a9b      	ldr	r2, [pc, #620]	; (80030e4 <exec_usb_cmd+0x8a4>)
 8002e78:	3405      	adds	r4, #5
        	for(int i = 0; i < CAN_TxHeader.DLC; i++)
 8002e7a:	429e      	cmp	r6, r3
 8002e7c:	f104 0402 	add.w	r4, r4, #2
 8002e80:	d84a      	bhi.n	8002f18 <exec_usb_cmd+0x6d8>
        	if(eeprom_settings.numBus != BUS_LIN)
 8002e82:	f8df 8264 	ldr.w	r8, [pc, #612]	; 80030e8 <exec_usb_cmd+0x8a8>
 8002e86:	4c99      	ldr	r4, [pc, #612]	; (80030ec <exec_usb_cmd+0x8ac>)
 8002e88:	f898 3008 	ldrb.w	r3, [r8, #8]
 8002e8c:	2b03      	cmp	r3, #3
 8002e8e:	d14d      	bne.n	8002f2c <exec_usb_cmd+0x6ec>
        			lin_tx_buff[i] = can_tx_msg.data_byte[i];
 8002e90:	4632      	mov	r2, r6
 8002e92:	4994      	ldr	r1, [pc, #592]	; (80030e4 <exec_usb_cmd+0x8a4>)
 8002e94:	a809      	add	r0, sp, #36	; 0x24
 8002e96:	f001 fbcd 	bl	8004634 <memcpy>
        		lin_tx_buff[i] = lin_calc_checksumm(can_tx_msg.data_byte, CAN_TxHeader.DLC, 0);
 8002e9a:	4631      	mov	r1, r6
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	4891      	ldr	r0, [pc, #580]	; (80030e4 <exec_usb_cmd+0x8a4>)
 8002ea0:	f000 fcdb 	bl	800385a <lin_calc_checksumm>
 8002ea4:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8002ea8:	eb0d 0603 	add.w	r6, sp, r3
 8002eac:	f806 0c0c 	strb.w	r0, [r6, #-12]
        		CAN_status = lin_add_slave_msg(lin_calc_pid(CAN_TxHeader.StdId), lin_tx_buff, CAN_TxHeader.DLC+1);
 8002eb0:	6828      	ldr	r0, [r5, #0]
 8002eb2:	f000 fcb7 	bl	8003824 <lin_calc_pid>
 8002eb6:	692a      	ldr	r2, [r5, #16]
 8002eb8:	a909      	add	r1, sp, #36	; 0x24
 8002eba:	3201      	adds	r2, #1
 8002ebc:	f000 fd88 	bl	80039d0 <lin_add_slave_msg>
 8002ec0:	b2c0      	uxtb	r0, r0
            	CAN_status = HAL_CAN_AddTxMessage(&hcan, &CAN_TxHeader, can_tx_msg.data_byte, &CAN_mailbox);
 8002ec2:	7020      	strb	r0, [r4, #0]
            	if(CAN_status != HAL_OK)
 8002ec4:	2800      	cmp	r0, #0
 8002ec6:	f47f ad87 	bne.w	80029d8 <exec_usb_cmd+0x198>
        	if(conf.loger_run == true)
 8002eca:	f897 602d 	ldrb.w	r6, [r7, #45]	; 0x2d
 8002ece:	2e01      	cmp	r6, #1
 8002ed0:	f47f ad2b 	bne.w	800292a <exec_usb_cmd+0xea>
        		can_tx_msg.timestamp = HAL_GetTick();
 8002ed4:	f7fd fc78 	bl	80007c8 <HAL_GetTick>
 8002ed8:	4c85      	ldr	r4, [pc, #532]	; (80030f0 <exec_usb_cmd+0x8b0>)
        		can_tx_msg.header.DLC = CAN_TxHeader.DLC;
 8002eda:	692b      	ldr	r3, [r5, #16]
        		can_tx_msg.timestamp = HAL_GetTick();
 8002edc:	6020      	str	r0, [r4, #0]
        		can_tx_msg.header.DLC = CAN_TxHeader.DLC;
 8002ede:	6163      	str	r3, [r4, #20]
        		can_tx_msg.header.ExtId = CAN_TxHeader.ExtId;
 8002ee0:	686b      	ldr	r3, [r5, #4]
        		can_tx_msg.can_dir = DIR_TRANSMIT;
 8002ee2:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
        		can_tx_msg.header.ExtId = CAN_TxHeader.ExtId;
 8002ee6:	60a3      	str	r3, [r4, #8]
        		can_tx_msg.header.StdId = CAN_TxHeader.StdId;
 8002ee8:	682b      	ldr	r3, [r5, #0]
 8002eea:	6063      	str	r3, [r4, #4]
        		can_tx_msg.header.RTR = CAN_TxHeader.RTR;
 8002eec:	68eb      	ldr	r3, [r5, #12]
 8002eee:	6123      	str	r3, [r4, #16]
        		can_tx_msg.header.IDE = CAN_TxHeader.IDE;
 8002ef0:	68ab      	ldr	r3, [r5, #8]
 8002ef2:	60e3      	str	r3, [r4, #12]
        		can_tx_msg.bus = eeprom_settings.numBus;
 8002ef4:	f898 3008 	ldrb.w	r3, [r8, #8]
        		CAN_Log_Buffer_Write_Data(can_tx_msg);
 8002ef8:	466d      	mov	r5, sp
 8002efa:	f104 0610 	add.w	r6, r4, #16
        		can_tx_msg.bus = eeprom_settings.numBus;
 8002efe:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
        		CAN_Log_Buffer_Write_Data(can_tx_msg);
 8002f02:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002f04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f06:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002f0a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002f0e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002f12:	f7ff f97b 	bl	800220c <CAN_Log_Buffer_Write_Data>
 8002f16:	e508      	b.n	800292a <exec_usb_cmd+0xea>
        		can_tx_msg.data_byte[i] = HexToShort(cmd_buf[i*2+5], cmd_buf[i*2+6]);
 8002f18:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8002f1c:	f814 0c02 	ldrb.w	r0, [r4, #-2]
 8002f20:	f7ff f9ad 	bl	800227e <HexToShort>
        	for(int i = 0; i < CAN_TxHeader.DLC; i++)
 8002f24:	3301      	adds	r3, #1
        		can_tx_msg.data_byte[i] = HexToShort(cmd_buf[i*2+5], cmd_buf[i*2+6]);
 8002f26:	f802 0b01 	strb.w	r0, [r2], #1
        	for(int i = 0; i < CAN_TxHeader.DLC; i++)
 8002f2a:	e7a6      	b.n	8002e7a <exec_usb_cmd+0x63a>
            	CAN_status = HAL_CAN_AddTxMessage(&hcan, &CAN_TxHeader, can_tx_msg.data_byte, &CAN_mailbox);
 8002f2c:	4b71      	ldr	r3, [pc, #452]	; (80030f4 <exec_usb_cmd+0x8b4>)
 8002f2e:	4a6d      	ldr	r2, [pc, #436]	; (80030e4 <exec_usb_cmd+0x8a4>)
 8002f30:	496b      	ldr	r1, [pc, #428]	; (80030e0 <exec_usb_cmd+0x8a0>)
 8002f32:	4871      	ldr	r0, [pc, #452]	; (80030f8 <exec_usb_cmd+0x8b8>)
 8002f34:	f7fd fdba 	bl	8000aac <HAL_CAN_AddTxMessage>
 8002f38:	e7c3      	b.n	8002ec2 <exec_usb_cmd+0x682>
            if (conf.state == IDLE_ST) return ERROR;
 8002f3a:	4e68      	ldr	r6, [pc, #416]	; (80030dc <exec_usb_cmd+0x89c>)
 8002f3c:	7832      	ldrb	r2, [r6, #0]
 8002f3e:	2a00      	cmp	r2, #0
 8002f40:	f43f ad4a 	beq.w	80029d8 <exec_usb_cmd+0x198>
            if (cmd_len != 10)      return ERROR;	// check valid cmd length
 8002f44:	2b0a      	cmp	r3, #10
 8002f46:	f47f ad47 	bne.w	80029d8 <exec_usb_cmd+0x198>
        	CAN_TxHeader.ExtId = (HexToShort(cmd_buf[1],cmd_buf[2]) << 24) |
 8002f4a:	78a1      	ldrb	r1, [r4, #2]
 8002f4c:	7860      	ldrb	r0, [r4, #1]
 8002f4e:	f7ff f996 	bl	800227e <HexToShort>
        						 (HexToShort(cmd_buf[3],cmd_buf[4]) << 16) |
 8002f52:	7921      	ldrb	r1, [r4, #4]
        	CAN_TxHeader.ExtId = (HexToShort(cmd_buf[1],cmd_buf[2]) << 24) |
 8002f54:	4602      	mov	r2, r0
        						 (HexToShort(cmd_buf[3],cmd_buf[4]) << 16) |
 8002f56:	78e0      	ldrb	r0, [r4, #3]
 8002f58:	f7ff f991 	bl	800227e <HexToShort>
								 (HexToShort(cmd_buf[5],cmd_buf[6]) << 8) |
 8002f5c:	79a1      	ldrb	r1, [r4, #6]
        						 (HexToShort(cmd_buf[3],cmd_buf[4]) << 16) |
 8002f5e:	0403      	lsls	r3, r0, #16
								 (HexToShort(cmd_buf[5],cmd_buf[6]) << 8) |
 8002f60:	7960      	ldrb	r0, [r4, #5]
 8002f62:	f7ff f98c 	bl	800227e <HexToShort>
        	CAN_TxHeader.ExtId = (HexToShort(cmd_buf[1],cmd_buf[2]) << 24) |
 8002f66:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
								  HexToShort(cmd_buf[7],cmd_buf[8]);
 8002f6a:	7a21      	ldrb	r1, [r4, #8]
								 (HexToShort(cmd_buf[5],cmd_buf[6]) << 8) |
 8002f6c:	4602      	mov	r2, r0
								  HexToShort(cmd_buf[7],cmd_buf[8]);
 8002f6e:	79e0      	ldrb	r0, [r4, #7]
 8002f70:	f7ff f985 	bl	800227e <HexToShort>
        	CAN_TxHeader.ExtId = (HexToShort(cmd_buf[1],cmd_buf[2]) << 24) |
 8002f74:	4d5a      	ldr	r5, [pc, #360]	; (80030e0 <exec_usb_cmd+0x8a0>)
								 (HexToShort(cmd_buf[5],cmd_buf[6]) << 8) |
 8002f76:	4303      	orrs	r3, r0
 8002f78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        	CAN_TxHeader.RTR = CAN_RTR_REMOTE;
 8002f7c:	2004      	movs	r0, #4
        	CAN_TxHeader.ExtId = (HexToShort(cmd_buf[1],cmd_buf[2]) << 24) |
 8002f7e:	606b      	str	r3, [r5, #4]
        	CAN_TxHeader.RTR = CAN_RTR_REMOTE;
 8002f80:	2302      	movs	r3, #2
 8002f82:	e9c5 0302 	strd	r0, r3, [r5, #8]
        	CAN_TxHeader.DLC = HexTo4bits(cmd_buf[9]);
 8002f86:	7a60      	ldrb	r0, [r4, #9]
 8002f88:	e70a      	b.n	8002da0 <exec_usb_cmd+0x560>
            if (conf.state == IDLE_ST) return ERROR;
 8002f8a:	4e54      	ldr	r6, [pc, #336]	; (80030dc <exec_usb_cmd+0x89c>)
 8002f8c:	7832      	ldrb	r2, [r6, #0]
 8002f8e:	2a00      	cmp	r2, #0
 8002f90:	f43f ad22 	beq.w	80029d8 <exec_usb_cmd+0x198>
            if ((cmd_len < 10) || (cmd_len > 26))
 8002f94:	f1a3 070a 	sub.w	r7, r3, #10
 8002f98:	b2fb      	uxtb	r3, r7
 8002f9a:	2b10      	cmp	r3, #16
 8002f9c:	f63f ad1c 	bhi.w	80029d8 <exec_usb_cmd+0x198>
        	CAN_TxHeader.ExtId = (HexToShort(cmd_buf[1],cmd_buf[2]) << 24) |
 8002fa0:	78a1      	ldrb	r1, [r4, #2]
 8002fa2:	7860      	ldrb	r0, [r4, #1]
 8002fa4:	f7ff f96b 	bl	800227e <HexToShort>
        						 (HexToShort(cmd_buf[3],cmd_buf[4]) << 16) |
 8002fa8:	7921      	ldrb	r1, [r4, #4]
        	CAN_TxHeader.ExtId = (HexToShort(cmd_buf[1],cmd_buf[2]) << 24) |
 8002faa:	4602      	mov	r2, r0
        						 (HexToShort(cmd_buf[3],cmd_buf[4]) << 16) |
 8002fac:	78e0      	ldrb	r0, [r4, #3]
 8002fae:	f7ff f966 	bl	800227e <HexToShort>
								 (HexToShort(cmd_buf[5],cmd_buf[6]) << 8) |
 8002fb2:	79a1      	ldrb	r1, [r4, #6]
        						 (HexToShort(cmd_buf[3],cmd_buf[4]) << 16) |
 8002fb4:	0403      	lsls	r3, r0, #16
								 (HexToShort(cmd_buf[5],cmd_buf[6]) << 8) |
 8002fb6:	7960      	ldrb	r0, [r4, #5]
 8002fb8:	f7ff f961 	bl	800227e <HexToShort>
        	CAN_TxHeader.ExtId = (HexToShort(cmd_buf[1],cmd_buf[2]) << 24) |
 8002fbc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
								 HexToShort(cmd_buf[7], cmd_buf[8]);
 8002fc0:	7a21      	ldrb	r1, [r4, #8]
								 (HexToShort(cmd_buf[5],cmd_buf[6]) << 8) |
 8002fc2:	4602      	mov	r2, r0
								 HexToShort(cmd_buf[7], cmd_buf[8]);
 8002fc4:	79e0      	ldrb	r0, [r4, #7]
 8002fc6:	f7ff f95a 	bl	800227e <HexToShort>
        	CAN_TxHeader.ExtId = (HexToShort(cmd_buf[1],cmd_buf[2]) << 24) |
 8002fca:	4d45      	ldr	r5, [pc, #276]	; (80030e0 <exec_usb_cmd+0x8a0>)
								 (HexToShort(cmd_buf[5],cmd_buf[6]) << 8) |
 8002fcc:	4303      	orrs	r3, r0
 8002fce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        	CAN_TxHeader.ExtId = (HexToShort(cmd_buf[1],cmd_buf[2]) << 24) |
 8002fd2:	606b      	str	r3, [r5, #4]
        	CAN_TxHeader.RTR = CAN_RTR_DATA;
 8002fd4:	2104      	movs	r1, #4
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	e9c5 1302 	strd	r1, r3, [r5, #8]
        	CAN_TxHeader.DLC = HexTo4bits(cmd_buf[9]);
 8002fdc:	7a60      	ldrb	r0, [r4, #9]
 8002fde:	f7ff f943 	bl	8002268 <HexTo4bits>
            if (CAN_TxHeader.DLC != ((cmd_len - 10) / 2))
 8002fe2:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8002fe6:	ebb0 0f67 	cmp.w	r0, r7, asr #1
        	CAN_TxHeader.DLC = HexTo4bits(cmd_buf[9]);
 8002fea:	4602      	mov	r2, r0
 8002fec:	6128      	str	r0, [r5, #16]
            if (CAN_TxHeader.DLC != ((cmd_len - 10) / 2))
 8002fee:	f47f acf3 	bne.w	80029d8 <exec_usb_cmd+0x198>
            if (CAN_TxHeader.DLC > 8)
 8002ff2:	2808      	cmp	r0, #8
 8002ff4:	f63f acf0 	bhi.w	80029d8 <exec_usb_cmd+0x198>
 8002ff8:	4f3a      	ldr	r7, [pc, #232]	; (80030e4 <exec_usb_cmd+0x8a4>)
 8002ffa:	340a      	adds	r4, #10
        	for(int i = 0; i < CAN_TxHeader.DLC; i++)
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	f104 0402 	add.w	r4, r4, #2
 8003002:	d805      	bhi.n	8003010 <exec_usb_cmd+0x7d0>
        	CAN_status = HAL_CAN_AddTxMessage(&hcan, &CAN_TxHeader, can_tx_msg.data_byte, &CAN_mailbox);
 8003004:	4c3a      	ldr	r4, [pc, #232]	; (80030f0 <exec_usb_cmd+0x8b0>)
 8003006:	4b3b      	ldr	r3, [pc, #236]	; (80030f4 <exec_usb_cmd+0x8b4>)
 8003008:	4935      	ldr	r1, [pc, #212]	; (80030e0 <exec_usb_cmd+0x8a0>)
 800300a:	f104 0220 	add.w	r2, r4, #32
 800300e:	e6cf      	b.n	8002db0 <exec_usb_cmd+0x570>
        		can_tx_msg.data_byte[i] = HexToShort(cmd_buf[i*2+10], cmd_buf[i*2+11]);
 8003010:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8003014:	f814 0c02 	ldrb.w	r0, [r4, #-2]
 8003018:	f7ff f931 	bl	800227e <HexToShort>
        	for(int i = 0; i < CAN_TxHeader.DLC; i++)
 800301c:	3301      	adds	r3, #1
        		can_tx_msg.data_byte[i] = HexToShort(cmd_buf[i*2+10], cmd_buf[i*2+11]);
 800301e:	f807 0b01 	strb.w	r0, [r7], #1
        	for(int i = 0; i < CAN_TxHeader.DLC; i++)
 8003022:	e7eb      	b.n	8002ffc <exec_usb_cmd+0x7bc>
        	eeprom_settings.CAN_mode[eeprom_settings.numBus] = CAN_MODE_SILENT;
 8003024:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003028:	4c2f      	ldr	r4, [pc, #188]	; (80030e8 <exec_usb_cmd+0x8a8>)
 800302a:	7a23      	ldrb	r3, [r4, #8]
 800302c:	330c      	adds	r3, #12
 800302e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003032:	605a      	str	r2, [r3, #4]
        	if(Open_CAN_cannel() != HAL_OK) return ERROR;
 8003034:	f7ff fbde 	bl	80027f4 <Open_CAN_cannel>
 8003038:	2800      	cmp	r0, #0
 800303a:	f47f accd 	bne.w	80029d8 <exec_usb_cmd+0x198>
    		conf.state = LAWICEL_CONNECT;
 800303e:	2201      	movs	r2, #1
 8003040:	4b26      	ldr	r3, [pc, #152]	; (80030dc <exec_usb_cmd+0x89c>)
    		conf.CAN_Enable[eeprom_settings.numBus] = true;
 8003042:	7a21      	ldrb	r1, [r4, #8]
    		conf.state = LAWICEL_CONNECT;
 8003044:	701a      	strb	r2, [r3, #0]
    		conf.CAN_Enable[eeprom_settings.numBus] = true;
 8003046:	440b      	add	r3, r1
 8003048:	70da      	strb	r2, [r3, #3]
            return CR;
 800304a:	e46e      	b.n	800292a <exec_usb_cmd+0xea>
        	switch (cmd_buf[1])
 800304c:	7863      	ldrb	r3, [r4, #1]
 800304e:	4c26      	ldr	r4, [pc, #152]	; (80030e8 <exec_usb_cmd+0x8a8>)
 8003050:	3b30      	subs	r3, #48	; 0x30
 8003052:	2b06      	cmp	r3, #6
 8003054:	d825      	bhi.n	80030a2 <exec_usb_cmd+0x862>
 8003056:	e8df f003 	tbb	[pc, r3]
 800305a:	1204      	.short	0x1204
 800305c:	1e1b1815 	.word	0x1e1b1815
 8003060:	21          	.byte	0x21
 8003061:	00          	.byte	0x00
        	case '0': eeprom_settings.UART_Speed = 230400; break;
 8003062:	f44f 3361 	mov.w	r3, #230400	; 0x38400
        	HAL_UART_DeInit(huart_active);
 8003066:	4d25      	ldr	r5, [pc, #148]	; (80030fc <exec_usb_cmd+0x8bc>)
        	default: eeprom_settings.UART_Speed = 1000000; break;
 8003068:	65e3      	str	r3, [r4, #92]	; 0x5c
        	HAL_UART_DeInit(huart_active);
 800306a:	6828      	ldr	r0, [r5, #0]
 800306c:	f7fe ff1f 	bl	8001eae <HAL_UART_DeInit>
        	huart3.Init.BaudRate = eeprom_settings.UART_Speed;
 8003070:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003072:	4b23      	ldr	r3, [pc, #140]	; (8003100 <exec_usb_cmd+0x8c0>)
        	if (HAL_UART_Init(huart_active) != HAL_OK)
 8003074:	6828      	ldr	r0, [r5, #0]
        	huart3.Init.BaudRate = eeprom_settings.UART_Speed;
 8003076:	605a      	str	r2, [r3, #4]
        	if (HAL_UART_Init(huart_active) != HAL_OK)
 8003078:	f7fe feb0 	bl	8001ddc <HAL_UART_Init>
 800307c:	e505      	b.n	8002a8a <exec_usb_cmd+0x24a>
        	case '1': eeprom_settings.UART_Speed = 115200; break;
 800307e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003082:	e7f0      	b.n	8003066 <exec_usb_cmd+0x826>
        	case '2': eeprom_settings.UART_Speed = 57600; break;
 8003084:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8003088:	e7ed      	b.n	8003066 <exec_usb_cmd+0x826>
        	case '3': eeprom_settings.UART_Speed = 38400; break;
 800308a:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 800308e:	e7ea      	b.n	8003066 <exec_usb_cmd+0x826>
        	case '4': eeprom_settings.UART_Speed = 19200; break;
 8003090:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8003094:	e7e7      	b.n	8003066 <exec_usb_cmd+0x826>
        	case '5': eeprom_settings.UART_Speed = 9600; break;
 8003096:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800309a:	e7e4      	b.n	8003066 <exec_usb_cmd+0x826>
        	case '6': eeprom_settings.UART_Speed = 2400; break;
 800309c:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80030a0:	e7e1      	b.n	8003066 <exec_usb_cmd+0x826>
        	default: eeprom_settings.UART_Speed = 1000000; break;
 80030a2:	4b18      	ldr	r3, [pc, #96]	; (8003104 <exec_usb_cmd+0x8c4>)
 80030a4:	e7df      	b.n	8003066 <exec_usb_cmd+0x826>
        	eeprom_settings.UART_Speed = 0;
 80030a6:	2200      	movs	r2, #0
        		eeprom_settings.UART_Speed *= 10;
 80030a8:	260a      	movs	r6, #10
        	eeprom_settings.UART_Speed = 0;
 80030aa:	4d0f      	ldr	r5, [pc, #60]	; (80030e8 <exec_usb_cmd+0x8a8>)
        	for(int i = 1; i < cmd_len; i++)
 80030ac:	f1c4 0101 	rsb	r1, r4, #1
        	eeprom_settings.UART_Speed = 0;
 80030b0:	65ea      	str	r2, [r5, #92]	; 0x5c
        	for(int i = 1; i < cmd_len; i++)
 80030b2:	190a      	adds	r2, r1, r4
 80030b4:	4293      	cmp	r3, r2
 80030b6:	dc29      	bgt.n	800310c <exec_usb_cmd+0x8cc>
        	if(eeprom_settings.UART_Speed < 200 || eeprom_settings.UART_Speed > 2000000) return ERROR;
 80030b8:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80030ba:	2bc7      	cmp	r3, #199	; 0xc7
 80030bc:	f67f ac8c 	bls.w	80029d8 <exec_usb_cmd+0x198>
 80030c0:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80030c2:	4b11      	ldr	r3, [pc, #68]	; (8003108 <exec_usb_cmd+0x8c8>)
 80030c4:	429a      	cmp	r2, r3
 80030c6:	f63f ac87 	bhi.w	80029d8 <exec_usb_cmd+0x198>
        	HAL_UART_DeInit(huart_active);
 80030ca:	4c0c      	ldr	r4, [pc, #48]	; (80030fc <exec_usb_cmd+0x8bc>)
 80030cc:	6820      	ldr	r0, [r4, #0]
 80030ce:	f7fe feee 	bl	8001eae <HAL_UART_DeInit>
        	huart3.Init.BaudRate = eeprom_settings.UART_Speed;
 80030d2:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80030d4:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <exec_usb_cmd+0x8c0>)
        	if (HAL_UART_Init(huart_active) != HAL_OK)
 80030d6:	6820      	ldr	r0, [r4, #0]
        	huart3.Init.BaudRate = eeprom_settings.UART_Speed;
 80030d8:	605a      	str	r2, [r3, #4]
        	if (HAL_UART_Init(huart_active) != HAL_OK)
 80030da:	e7cd      	b.n	8003078 <exec_usb_cmd+0x838>
 80030dc:	200019a0 	.word	0x200019a0
 80030e0:	200016c0 	.word	0x200016c0
 80030e4:	20001708 	.word	0x20001708
 80030e8:	20001738 	.word	0x20001738
 80030ec:	200016dc 	.word	0x200016dc
 80030f0:	200016e8 	.word	0x200016e8
 80030f4:	200016d8 	.word	0x200016d8
 80030f8:	20001918 	.word	0x20001918
 80030fc:	200019d4 	.word	0x200019d4
 8003100:	20002004 	.word	0x20002004
 8003104:	000f4240 	.word	0x000f4240
 8003108:	001e8480 	.word	0x001e8480
        		if(cmd_buf[i] < '0' || cmd_buf[i] > '9') return ERROR;
 800310c:	7862      	ldrb	r2, [r4, #1]
 800310e:	3a30      	subs	r2, #48	; 0x30
 8003110:	2a09      	cmp	r2, #9
 8003112:	f63f ac61 	bhi.w	80029d8 <exec_usb_cmd+0x198>
        		eeprom_settings.UART_Speed *= 10;
 8003116:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8003118:	4372      	muls	r2, r6
 800311a:	65ea      	str	r2, [r5, #92]	; 0x5c
        		eeprom_settings.UART_Speed += HexTo4bits(cmd_buf[i]);
 800311c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8003120:	f7ff f8a2 	bl	8002268 <HexTo4bits>
 8003124:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8003126:	4410      	add	r0, r2
 8003128:	65e8      	str	r0, [r5, #92]	; 0x5c
        	for(int i = 1; i < cmd_len; i++)
 800312a:	e7c2      	b.n	80030b2 <exec_usb_cmd+0x872>
        	if(cmd_buf[1] < '0' || cmd_buf[1] > '4') return ERROR;
 800312c:	7860      	ldrb	r0, [r4, #1]
 800312e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8003132:	2b04      	cmp	r3, #4
 8003134:	f63f ac50 	bhi.w	80029d8 <exec_usb_cmd+0x198>
        	eeprom_settings.numBus = HexTo4bits(cmd_buf[1]) - 1;
 8003138:	f7ff f896 	bl	8002268 <HexTo4bits>
 800313c:	4b31      	ldr	r3, [pc, #196]	; (8003204 <exec_usb_cmd+0x9c4>)
 800313e:	3801      	subs	r0, #1
 8003140:	b2c0      	uxtb	r0, r0
 8003142:	7218      	strb	r0, [r3, #8]
        	if(Open_CAN_cannel() != HAL_OK) return ERROR;
 8003144:	f7ff fb56 	bl	80027f4 <Open_CAN_cannel>
 8003148:	e49f      	b.n	8002a8a <exec_usb_cmd+0x24a>
        	conf.script_delay = 0;
 800314a:	2200      	movs	r2, #0
        		conf.script_delay *= 10;
 800314c:	260a      	movs	r6, #10
        	conf.script_delay = 0;
 800314e:	4d2e      	ldr	r5, [pc, #184]	; (8003208 <exec_usb_cmd+0x9c8>)
        	for(int i = 1; i < cmd_len; i++)
 8003150:	f1c4 0101 	rsb	r1, r4, #1
        	conf.script_delay = 0;
 8003154:	616a      	str	r2, [r5, #20]
        	for(int i = 1; i < cmd_len; i++)
 8003156:	190a      	adds	r2, r1, r4
 8003158:	4293      	cmp	r3, r2
 800315a:	dc05      	bgt.n	8003168 <exec_usb_cmd+0x928>
        	conf.script_timestamp = HAL_GetTick();
 800315c:	f7fd fb34 	bl	80007c8 <HAL_GetTick>
        	conf.script_delay_active = true;
 8003160:	2301      	movs	r3, #1
        	conf.script_timestamp = HAL_GetTick();
 8003162:	6128      	str	r0, [r5, #16]
        	conf.script_delay_active = true;
 8003164:	762b      	strb	r3, [r5, #24]
    return ERROR;
 8003166:	e437      	b.n	80029d8 <exec_usb_cmd+0x198>
        		if(cmd_buf[i] < '0' || cmd_buf[i] > '9') return ERROR;
 8003168:	7862      	ldrb	r2, [r4, #1]
 800316a:	3a30      	subs	r2, #48	; 0x30
 800316c:	2a09      	cmp	r2, #9
 800316e:	f63f ac33 	bhi.w	80029d8 <exec_usb_cmd+0x198>
        		conf.script_delay *= 10;
 8003172:	696a      	ldr	r2, [r5, #20]
 8003174:	4372      	muls	r2, r6
 8003176:	616a      	str	r2, [r5, #20]
        		conf.script_delay += HexTo4bits(cmd_buf[i]);
 8003178:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800317c:	f7ff f874 	bl	8002268 <HexTo4bits>
 8003180:	4402      	add	r2, r0
 8003182:	616a      	str	r2, [r5, #20]
        	for(int i = 1; i < cmd_len; i++)
 8003184:	e7e7      	b.n	8003156 <exec_usb_cmd+0x916>
        	conf.script_run = false;
 8003186:	2200      	movs	r2, #0
 8003188:	4b1f      	ldr	r3, [pc, #124]	; (8003208 <exec_usb_cmd+0x9c8>)
        	conf.script_run = true;
 800318a:	721a      	strb	r2, [r3, #8]
        	return CR;
 800318c:	f7ff bbcd 	b.w	800292a <exec_usb_cmd+0xea>
        	conf.script_address = eeprom_settings.start_address_script;
 8003190:	4b1c      	ldr	r3, [pc, #112]	; (8003204 <exec_usb_cmd+0x9c4>)
 8003192:	88da      	ldrh	r2, [r3, #6]
 8003194:	4b1c      	ldr	r3, [pc, #112]	; (8003208 <exec_usb_cmd+0x9c8>)
 8003196:	815a      	strh	r2, [r3, #10]
        	conf.script_run = true;
 8003198:	2201      	movs	r2, #1
 800319a:	e7f6      	b.n	800318a <exec_usb_cmd+0x94a>
        	conf.loger_run = false;
 800319c:	2200      	movs	r2, #0
 800319e:	4b1a      	ldr	r3, [pc, #104]	; (8003208 <exec_usb_cmd+0x9c8>)
 80031a0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        	return CR;
 80031a4:	f7ff bbc1 	b.w	800292a <exec_usb_cmd+0xea>
        	conf.LIN_is_Master = (cmd_buf[1] == 'M' || cmd_buf[1] == '1') ? true : false;
 80031a8:	7863      	ldrb	r3, [r4, #1]
 80031aa:	2b4d      	cmp	r3, #77	; 0x4d
 80031ac:	d008      	beq.n	80031c0 <exec_usb_cmd+0x980>
 80031ae:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80031b2:	4253      	negs	r3, r2
 80031b4:	4153      	adcs	r3, r2
 80031b6:	4a14      	ldr	r2, [pc, #80]	; (8003208 <exec_usb_cmd+0x9c8>)
 80031b8:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
        	return CR;
 80031bc:	f7ff bbb5 	b.w	800292a <exec_usb_cmd+0xea>
        	conf.LIN_is_Master = (cmd_buf[1] == 'M' || cmd_buf[1] == '1') ? true : false;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e7f8      	b.n	80031b6 <exec_usb_cmd+0x976>
        	conf.help_print = true;
 80031c4:	2201      	movs	r2, #1
 80031c6:	4b10      	ldr	r3, [pc, #64]	; (8003208 <exec_usb_cmd+0x9c8>)
 80031c8:	765a      	strb	r2, [r3, #25]
        	conf.help_text_pointer = 0;
 80031ca:	2200      	movs	r2, #0
 80031cc:	835a      	strh	r2, [r3, #26]
        	return CR;
 80031ce:	f7ff bbac 	b.w	800292a <exec_usb_cmd+0xea>
        	if(cmd_buf[1] == 'R' && cmd_buf[2] == 'S' && cmd_buf[3] == 'T')
 80031d2:	7863      	ldrb	r3, [r4, #1]
 80031d4:	2b52      	cmp	r3, #82	; 0x52
 80031d6:	f47f aba8 	bne.w	800292a <exec_usb_cmd+0xea>
 80031da:	78a3      	ldrb	r3, [r4, #2]
 80031dc:	2b53      	cmp	r3, #83	; 0x53
 80031de:	f47f aba4 	bne.w	800292a <exec_usb_cmd+0xea>
 80031e2:	78e3      	ldrb	r3, [r4, #3]
 80031e4:	2b54      	cmp	r3, #84	; 0x54
 80031e6:	f47f aba0 	bne.w	800292a <exec_usb_cmd+0xea>
  __ASM volatile ("dsb 0xF":::"memory");
 80031ea:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80031ee:	4907      	ldr	r1, [pc, #28]	; (800320c <exec_usb_cmd+0x9cc>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80031f0:	4b07      	ldr	r3, [pc, #28]	; (8003210 <exec_usb_cmd+0x9d0>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80031f2:	68ca      	ldr	r2, [r1, #12]
 80031f4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80031f8:	4313      	orrs	r3, r2
 80031fa:	60cb      	str	r3, [r1, #12]
 80031fc:	f3bf 8f4f 	dsb	sy
    __NOP();
 8003200:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8003202:	e7fd      	b.n	8003200 <exec_usb_cmd+0x9c0>
 8003204:	20001738 	.word	0x20001738
 8003208:	200019a0 	.word	0x200019a0
 800320c:	e000ed00 	.word	0xe000ed00
 8003210:	05fa0004 	.word	0x05fa0004

08003214 <Check_Command>:
{
 8003214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    serialCnt++;
 8003218:	4aa3      	ldr	r2, [pc, #652]	; (80034a8 <Check_Command+0x294>)
    switch (state) {
 800321a:	4ca4      	ldr	r4, [pc, #656]	; (80034ac <Check_Command+0x298>)
    serialCnt++;
 800321c:	6813      	ldr	r3, [r2, #0]
{
 800321e:	b089      	sub	sp, #36	; 0x24
    serialCnt++;
 8003220:	3301      	adds	r3, #1
 8003222:	6013      	str	r3, [r2, #0]
    switch (state) {
 8003224:	7823      	ldrb	r3, [r4, #0]
 8003226:	2b0d      	cmp	r3, #13
 8003228:	d833      	bhi.n	8003292 <Check_Command+0x7e>
 800322a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800322e:	000e      	.short	0x000e
 8003230:	01510042 	.word	0x01510042
 8003234:	003200d5 	.word	0x003200d5
 8003238:	01c20032 	.word	0x01c20032
 800323c:	003201c5 	.word	0x003201c5
 8003240:	00d50032 	.word	0x00d50032
 8003244:	024d00d5 	.word	0x024d00d5
 8003248:	0254      	.short	0x0254
        if (in_byte == 0xF1) state = GET_COMMAND;
 800324a:	28f1      	cmp	r0, #241	; 0xf1
 800324c:	d102      	bne.n	8003254 <Check_Command+0x40>
 800324e:	2301      	movs	r3, #1
            state = IDLE;
 8003250:	7023      	strb	r3, [r4, #0]
            break;
 8003252:	e01e      	b.n	8003292 <Check_Command+0x7e>
        else if (in_byte == 0xE7) {
 8003254:	28e7      	cmp	r0, #231	; 0xe7
 8003256:	d105      	bne.n	8003264 <Check_Command+0x50>
            conf.useBinarySerialComm = true;
 8003258:	2201      	movs	r2, #1
 800325a:	4b95      	ldr	r3, [pc, #596]	; (80034b0 <Check_Command+0x29c>)
 800325c:	709a      	strb	r2, [r3, #2]
            conf.state = SAVVYCAN_CONNECT;
 800325e:	2202      	movs	r2, #2
            uart_tx_com_bufer[0] = 0xF1;
 8003260:	701a      	strb	r2, [r3, #0]
            break;
 8003262:	e016      	b.n	8003292 <Check_Command+0x7e>
        	if (in_byte == CR)	// check for end of command
 8003264:	280d      	cmp	r0, #13
 8003266:	d11a      	bne.n	800329e <Check_Command+0x8a>
	            temp_char = exec_usb_cmd (cmd_buf);
 8003268:	4892      	ldr	r0, [pc, #584]	; (80034b4 <Check_Command+0x2a0>)
 800326a:	f7ff fae9 	bl	8002840 <exec_usb_cmd>
	            uart_tx_com_bufer[uart_tx_pointer++] = temp_char;
 800326e:	4a92      	ldr	r2, [pc, #584]	; (80034b8 <Check_Command+0x2a4>)
 8003270:	6813      	ldr	r3, [r2, #0]
 8003272:	1c59      	adds	r1, r3, #1
 8003274:	6011      	str	r1, [r2, #0]
 8003276:	4a91      	ldr	r2, [pc, #580]	; (80034bc <Check_Command+0x2a8>)
	                cmd_buf[buf_ind] = 0x00;
 8003278:	2100      	movs	r1, #0
	            uart_tx_com_bufer[uart_tx_pointer++] = temp_char;
 800327a:	54d0      	strb	r0, [r2, r3]
	            uart_answ_ready = 1;
 800327c:	2201      	movs	r2, #1
 800327e:	4b90      	ldr	r3, [pc, #576]	; (80034c0 <Check_Command+0x2ac>)
 8003280:	701a      	strb	r2, [r3, #0]
	            for (buf_ind = 0; buf_ind < CMD_BUFFER_LENGTH; buf_ind++)
 8003282:	231f      	movs	r3, #31
 8003284:	4a8b      	ldr	r2, [pc, #556]	; (80034b4 <Check_Command+0x2a0>)
 8003286:	3b01      	subs	r3, #1
 8003288:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800328c:	d104      	bne.n	8003298 <Check_Command+0x84>
	            buf_ind = 0;	// point to start of command
 800328e:	4a8d      	ldr	r2, [pc, #564]	; (80034c4 <Check_Command+0x2b0>)
	                buf_ind++;
 8003290:	7013      	strb	r3, [r2, #0]
}
 8003292:	b009      	add	sp, #36	; 0x24
 8003294:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	                cmd_buf[buf_ind] = 0x00;
 8003298:	f802 1b01 	strb.w	r1, [r2], #1
	            for (buf_ind = 0; buf_ind < CMD_BUFFER_LENGTH; buf_ind++)
 800329c:	e7f3      	b.n	8003286 <Check_Command+0x72>
	        else if (in_byte != 0)	// store new char in buffer
 800329e:	2800      	cmp	r0, #0
 80032a0:	d0f7      	beq.n	8003292 <Check_Command+0x7e>
	            cmd_buf[buf_ind] = in_byte;	// store char
 80032a2:	4a88      	ldr	r2, [pc, #544]	; (80034c4 <Check_Command+0x2b0>)
 80032a4:	4983      	ldr	r1, [pc, #524]	; (80034b4 <Check_Command+0x2a0>)
 80032a6:	7813      	ldrb	r3, [r2, #0]
	            if (buf_ind < sizeof (cmd_buf) - 1)
 80032a8:	2b1c      	cmp	r3, #28
	            cmd_buf[buf_ind] = in_byte;	// store char
 80032aa:	54c8      	strb	r0, [r1, r3]
	            if (buf_ind < sizeof (cmd_buf) - 1)
 80032ac:	d8f1      	bhi.n	8003292 <Check_Command+0x7e>
	                buf_ind++;
 80032ae:	3301      	adds	r3, #1
 80032b0:	e7ee      	b.n	8003290 <Check_Command+0x7c>
        switch (in_byte) {
 80032b2:	280e      	cmp	r0, #14
 80032b4:	d8ed      	bhi.n	8003292 <Check_Command+0x7e>
 80032b6:	e8df f010 	tbh	[pc, r0, lsl #1]
 80032ba:	000f      	.short	0x000f
 80032bc:	008f0015 	.word	0x008f0015
 80032c0:	002f008f 	.word	0x002f008f
 80032c4:	003a0034 	.word	0x003a0034
 80032c8:	0091007a 	.word	0x0091007a
 80032cc:	00a9009a 	.word	0x00a9009a
 80032d0:	00b000ae 	.word	0x00b000ae
 80032d4:	00f500be 	.word	0x00f500be
            state = BUILD_CAN_FRAME;
 80032d8:	2302      	movs	r3, #2
            uart_tx_com_bufer[0] = 0xF1;
 80032da:	22f1      	movs	r2, #241	; 0xf1
            state = ECHO_CAN_FRAME;
 80032dc:	7023      	strb	r3, [r4, #0]
            uart_tx_com_bufer[0] = 0xF1;
 80032de:	4b77      	ldr	r3, [pc, #476]	; (80034bc <Check_Command+0x2a8>)
 80032e0:	701a      	strb	r2, [r3, #0]
 80032e2:	e080      	b.n	80033e6 <Check_Command+0x1d2>
            state = IDLE;//TIME_SYNC;
 80032e4:	2300      	movs	r3, #0
            step = 0;
 80032e6:	4a78      	ldr	r2, [pc, #480]	; (80034c8 <Check_Command+0x2b4>)
            state = IDLE;//TIME_SYNC;
 80032e8:	7023      	strb	r3, [r4, #0]
            step = 0;
 80032ea:	6013      	str	r3, [r2, #0]
            now = HAL_GetTick();
 80032ec:	f7fd fa6c 	bl	80007c8 <HAL_GetTick>
            uart_tx_com_bufer[uart_tx_pointer++] = 0xF1;
 80032f0:	21f1      	movs	r1, #241	; 0xf1
 80032f2:	4c71      	ldr	r4, [pc, #452]	; (80034b8 <Check_Command+0x2a4>)
 80032f4:	4b71      	ldr	r3, [pc, #452]	; (80034bc <Check_Command+0x2a8>)
 80032f6:	6822      	ldr	r2, [r4, #0]
            uart_tx_com_bufer[uart_tx_pointer++] = (uint8_t)(now >> 8);
 80032f8:	0a05      	lsrs	r5, r0, #8
            uart_tx_com_bufer[uart_tx_pointer++] = 0xF1;
 80032fa:	5499      	strb	r1, [r3, r2]
            uart_tx_com_bufer[uart_tx_pointer++] = 1; //time sync
 80032fc:	2101      	movs	r1, #1
 80032fe:	4413      	add	r3, r2
            uart_tx_com_bufer[uart_tx_pointer++] = (uint8_t)(now & 0xFF);
 8003300:	7098      	strb	r0, [r3, #2]
            uart_tx_com_bufer[uart_tx_pointer++] = (uint8_t)(now >> 8);
 8003302:	70dd      	strb	r5, [r3, #3]
            uart_tx_com_bufer[uart_tx_pointer++] = (uint8_t)(now >> 16);
 8003304:	0c05      	lsrs	r5, r0, #16
            uart_tx_com_bufer[uart_tx_pointer++] = (uint8_t)(now >> 24);
 8003306:	0e00      	lsrs	r0, r0, #24
            uart_tx_com_bufer[uart_tx_pointer++] = 1; //time sync
 8003308:	7059      	strb	r1, [r3, #1]
            uart_tx_com_bufer[uart_tx_pointer++] = (uint8_t)(now >> 16);
 800330a:	711d      	strb	r5, [r3, #4]
            uart_tx_com_bufer[uart_tx_pointer++] = (uint8_t)(now >> 24);
 800330c:	7158      	strb	r0, [r3, #5]
            uart_answ_ready = 1;
 800330e:	4b6c      	ldr	r3, [pc, #432]	; (80034c0 <Check_Command+0x2ac>)
            uart_tx_com_bufer[uart_tx_pointer++] = (uint8_t)(now >> 24);
 8003310:	3206      	adds	r2, #6
 8003312:	6022      	str	r2, [r4, #0]
            uart_answ_ready = 1;
 8003314:	7019      	strb	r1, [r3, #0]
            break;
 8003316:	e7bc      	b.n	8003292 <Check_Command+0x7e>
            state = SET_DIG_OUTPUTS;
 8003318:	2306      	movs	r3, #6
 800331a:	7023      	strb	r3, [r4, #0]
            uart_tx_com_bufer[0] = 0xF1;
 800331c:	22f1      	movs	r2, #241	; 0xf1
 800331e:	4b67      	ldr	r3, [pc, #412]	; (80034bc <Check_Command+0x2a8>)
 8003320:	e79e      	b.n	8003260 <Check_Command+0x4c>
            state = SETUP_CANBUS;
 8003322:	2307      	movs	r3, #7
            step = 0;
 8003324:	2200      	movs	r2, #0
            state = SETUP_EXT_BUSES;
 8003326:	7023      	strb	r3, [r4, #0]
            step = 0;
 8003328:	4b67      	ldr	r3, [pc, #412]	; (80034c8 <Check_Command+0x2b4>)
 800332a:	601a      	str	r2, [r3, #0]
            uart_tx_com_bufer[0] = 0xF1;
 800332c:	e7f6      	b.n	800331c <Check_Command+0x108>
        	uart_tx_com_bufer[uart_tx_pointer++] = 0xF1;
 800332e:	23f1      	movs	r3, #241	; 0xf1
 8003330:	4e61      	ldr	r6, [pc, #388]	; (80034b8 <Check_Command+0x2a4>)
 8003332:	4862      	ldr	r0, [pc, #392]	; (80034bc <Check_Command+0x2a8>)
 8003334:	6831      	ldr	r1, [r6, #0]
        	uart_tx_com_bufer[uart_tx_pointer++] = conf.CAN_Enable[0] + (eeprom_settings.CAN_mode[0] == CAN_MODE_SILENT ? 1 << 4 : 0);
 8003336:	4f5e      	ldr	r7, [pc, #376]	; (80034b0 <Check_Command+0x29c>)
        	uart_tx_com_bufer[uart_tx_pointer++] = 0xF1;
 8003338:	5443      	strb	r3, [r0, r1]
        	uart_tx_com_bufer[uart_tx_pointer++] = 6;
 800333a:	2306      	movs	r3, #6
 800333c:	1842      	adds	r2, r0, r1
 800333e:	7053      	strb	r3, [r2, #1]
        	uart_tx_com_bufer[uart_tx_pointer++] = conf.CAN_Enable[0] + (eeprom_settings.CAN_mode[0] == CAN_MODE_SILENT ? 1 << 4 : 0);
 8003340:	4b62      	ldr	r3, [pc, #392]	; (80034cc <Check_Command+0x2b8>)
 8003342:	78fd      	ldrb	r5, [r7, #3]
 8003344:	f8d3 e034 	ldr.w	lr, [r3, #52]	; 0x34
        	uart_tx_com_bufer[uart_tx_pointer++] = 6;
 8003348:	f101 0c02 	add.w	ip, r1, #2
        	uart_tx_com_bufer[uart_tx_pointer++] = conf.CAN_Enable[0] + (eeprom_settings.CAN_mode[0] == CAN_MODE_SILENT ? 1 << 4 : 0);
 800334c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8003350:	bf0c      	ite	eq
 8003352:	f04f 0e10 	moveq.w	lr, #16
 8003356:	f04f 0e00 	movne.w	lr, #0
 800335a:	4475      	add	r5, lr
 800335c:	f800 500c 	strb.w	r5, [r0, ip]
        	uart_tx_com_bufer[uart_tx_pointer++] = eeprom_settings.CAN_Speed[0];
 8003360:	68dd      	ldr	r5, [r3, #12]
        	uart_tx_com_bufer[uart_tx_pointer++] = eeprom_settings.CAN_Speed[0] >> 24;
 8003362:	f101 0c07 	add.w	ip, r1, #7
        	uart_tx_com_bufer[uart_tx_pointer++] = eeprom_settings.CAN_Speed[0];
 8003366:	70d5      	strb	r5, [r2, #3]
        	uart_tx_com_bufer[uart_tx_pointer++] = eeprom_settings.CAN_Speed[0] >> 8;
 8003368:	68dd      	ldr	r5, [r3, #12]
        	uart_tx_com_bufer[uart_tx_pointer++] = eeprom_settings.CAN_Speed[1] >> 24;
 800336a:	310c      	adds	r1, #12
        	uart_tx_com_bufer[uart_tx_pointer++] = eeprom_settings.CAN_Speed[0] >> 8;
 800336c:	0a2d      	lsrs	r5, r5, #8
 800336e:	7115      	strb	r5, [r2, #4]
        	uart_tx_com_bufer[uart_tx_pointer++] = eeprom_settings.CAN_Speed[0] >> 16;
 8003370:	68dd      	ldr	r5, [r3, #12]
        	uart_tx_com_bufer[uart_tx_pointer++] = eeprom_settings.CAN_Speed[1] >> 24;
 8003372:	6031      	str	r1, [r6, #0]
        	uart_tx_com_bufer[uart_tx_pointer++] = eeprom_settings.CAN_Speed[0] >> 16;
 8003374:	0c2d      	lsrs	r5, r5, #16
 8003376:	7155      	strb	r5, [r2, #5]
        	uart_tx_com_bufer[uart_tx_pointer++] = eeprom_settings.CAN_Speed[0] >> 24;
 8003378:	68dd      	ldr	r5, [r3, #12]
 800337a:	0e2d      	lsrs	r5, r5, #24
 800337c:	7195      	strb	r5, [r2, #6]
        	uart_tx_com_bufer[uart_tx_pointer++] = conf.CAN_Enable[1] + (eeprom_settings.CAN_mode[1] == CAN_MODE_SILENT ? 1 << 4 : 0);
 800337e:	793d      	ldrb	r5, [r7, #4]
 8003380:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8003382:	f1b7 4f00 	cmp.w	r7, #2147483648	; 0x80000000
 8003386:	bf0c      	ite	eq
 8003388:	2710      	moveq	r7, #16
 800338a:	2700      	movne	r7, #0
 800338c:	443d      	add	r5, r7
 800338e:	f800 500c 	strb.w	r5, [r0, ip]
        	uart_tx_com_bufer[uart_tx_pointer++] = eeprom_settings.CAN_Speed[1];
 8003392:	6918      	ldr	r0, [r3, #16]
 8003394:	7210      	strb	r0, [r2, #8]
        	uart_tx_com_bufer[uart_tx_pointer++] = eeprom_settings.CAN_Speed[1] >> 8;
 8003396:	6918      	ldr	r0, [r3, #16]
 8003398:	0a00      	lsrs	r0, r0, #8
 800339a:	7250      	strb	r0, [r2, #9]
        	uart_tx_com_bufer[uart_tx_pointer++] = eeprom_settings.CAN_Speed[1] >> 16;
 800339c:	6918      	ldr	r0, [r3, #16]
        	uart_tx_com_bufer[uart_tx_pointer++] = eeprom_settings.CAN_Speed[1] >> 24;
 800339e:	691b      	ldr	r3, [r3, #16]
        	uart_tx_com_bufer[uart_tx_pointer++] = eeprom_settings.CAN_Speed[1] >> 16;
 80033a0:	0c00      	lsrs	r0, r0, #16
        	uart_tx_com_bufer[uart_tx_pointer++] = eeprom_settings.CAN_Speed[1] >> 24;
 80033a2:	0e1b      	lsrs	r3, r3, #24
        	uart_tx_com_bufer[uart_tx_pointer++] = eeprom_settings.CAN_Speed[1] >> 16;
 80033a4:	7290      	strb	r0, [r2, #10]
        	uart_tx_com_bufer[uart_tx_pointer++] = eeprom_settings.CAN_Speed[1] >> 24;
 80033a6:	72d3      	strb	r3, [r2, #11]
            uart_answ_ready = 1;
 80033a8:	2201      	movs	r2, #1
 80033aa:	4b45      	ldr	r3, [pc, #276]	; (80034c0 <Check_Command+0x2ac>)
 80033ac:	e013      	b.n	80033d6 <Check_Command+0x1c2>
        	uart_tx_com_bufer[uart_tx_pointer++] = 0xF1;
 80033ae:	22f1      	movs	r2, #241	; 0xf1
 80033b0:	4841      	ldr	r0, [pc, #260]	; (80034b8 <Check_Command+0x2a4>)
 80033b2:	4b42      	ldr	r3, [pc, #264]	; (80034bc <Check_Command+0x2a8>)
 80033b4:	6801      	ldr	r1, [r0, #0]
        	uart_tx_com_bufer[uart_tx_pointer++] = EEPROM_VER;
 80033b6:	2517      	movs	r5, #23
        	uart_tx_com_bufer[uart_tx_pointer++] = 0xF1;
 80033b8:	545a      	strb	r2, [r3, r1]
        	uart_tx_com_bufer[uart_tx_pointer++] = 7;
 80033ba:	2207      	movs	r2, #7
 80033bc:	440b      	add	r3, r1
 80033be:	705a      	strb	r2, [r3, #1]
        	uart_tx_com_bufer[uart_tx_pointer++] = CFG_BUILD_NUM & 0xFF;
 80033c0:	2257      	movs	r2, #87	; 0x57
 80033c2:	709a      	strb	r2, [r3, #2]
        	uart_tx_com_bufer[uart_tx_pointer++] = (CFG_BUILD_NUM >> 8);
 80033c4:	2201      	movs	r2, #1
        	uart_tx_com_bufer[uart_tx_pointer++] = EEPROM_VER;
 80033c6:	711d      	strb	r5, [r3, #4]
        	uart_tx_com_bufer[uart_tx_pointer++] = (CFG_BUILD_NUM >> 8);
 80033c8:	70da      	strb	r2, [r3, #3]
        	uart_tx_com_bufer[uart_tx_pointer++] = 1;//(unsigned char)settings.fileOutputType;
 80033ca:	715a      	strb	r2, [r3, #5]
        	uart_tx_com_bufer[uart_tx_pointer++] = 1;//(unsigned char)settings.autoStartLogging;
 80033cc:	719a      	strb	r2, [r3, #6]
        	uart_tx_com_bufer[uart_tx_pointer++] = 1;//settings.singleWire_Enabled;
 80033ce:	3108      	adds	r1, #8
 80033d0:	71da      	strb	r2, [r3, #7]
            uart_answ_ready = 1;
 80033d2:	4b3b      	ldr	r3, [pc, #236]	; (80034c0 <Check_Command+0x2ac>)
        	uart_tx_com_bufer[uart_tx_pointer++] = 1;//settings.singleWire_Enabled;
 80033d4:	6001      	str	r1, [r0, #0]
            uart_answ_ready = 1;
 80033d6:	701a      	strb	r2, [r3, #0]
            state = IDLE;
 80033d8:	2300      	movs	r3, #0
 80033da:	e739      	b.n	8003250 <Check_Command+0x3c>
            uart_tx_com_bufer[0] = 0xF1;
 80033dc:	22f1      	movs	r2, #241	; 0xf1
 80033de:	4b37      	ldr	r3, [pc, #220]	; (80034bc <Check_Command+0x2a8>)
 80033e0:	701a      	strb	r2, [r3, #0]
            state = SET_SINGLEWIRE_MODE;
 80033e2:	230a      	movs	r3, #10
            state = SET_SYSTYPE;
 80033e4:	7023      	strb	r3, [r4, #0]
            step = 0;
 80033e6:	2200      	movs	r2, #0
 80033e8:	4b37      	ldr	r3, [pc, #220]	; (80034c8 <Check_Command+0x2b4>)
 80033ea:	601a      	str	r2, [r3, #0]
            break;
 80033ec:	e751      	b.n	8003292 <Check_Command+0x7e>
        	uart_tx_com_bufer[uart_tx_pointer++] = 0xF1;
 80033ee:	20f1      	movs	r0, #241	; 0xf1
 80033f0:	4931      	ldr	r1, [pc, #196]	; (80034b8 <Check_Command+0x2a4>)
 80033f2:	4b32      	ldr	r3, [pc, #200]	; (80034bc <Check_Command+0x2a8>)
 80033f4:	680a      	ldr	r2, [r1, #0]
 80033f6:	5498      	strb	r0, [r3, r2]
        	uart_tx_com_bufer[uart_tx_pointer++] = 0x09;
 80033f8:	2009      	movs	r0, #9
 80033fa:	4413      	add	r3, r2
        	uart_tx_com_bufer[uart_tx_pointer++] = 0xAD;
 80033fc:	3204      	adds	r2, #4
        	uart_tx_com_bufer[uart_tx_pointer++] = 0x09;
 80033fe:	7058      	strb	r0, [r3, #1]
        	uart_tx_com_bufer[uart_tx_pointer++] = 0xAD;
 8003400:	600a      	str	r2, [r1, #0]
        	uart_tx_com_bufer[uart_tx_pointer++] = 0xDE;
 8003402:	20de      	movs	r0, #222	; 0xde
        	uart_tx_com_bufer[uart_tx_pointer++] = 0xAD;
 8003404:	22ad      	movs	r2, #173	; 0xad
        	uart_tx_com_bufer[uart_tx_pointer++] = 0xDE;
 8003406:	7098      	strb	r0, [r3, #2]
        	uart_tx_com_bufer[uart_tx_pointer++] = 0xAD;
 8003408:	70da      	strb	r2, [r3, #3]
            uart_answ_ready = 1;
 800340a:	e7cd      	b.n	80033a8 <Check_Command+0x194>
            uart_tx_com_bufer[0] = 0xF1;
 800340c:	22f1      	movs	r2, #241	; 0xf1
 800340e:	4b2b      	ldr	r3, [pc, #172]	; (80034bc <Check_Command+0x2a8>)
 8003410:	701a      	strb	r2, [r3, #0]
            state = SET_SYSTYPE;
 8003412:	230b      	movs	r3, #11
 8003414:	e7e6      	b.n	80033e4 <Check_Command+0x1d0>
            state = ECHO_CAN_FRAME;
 8003416:	230c      	movs	r3, #12
 8003418:	e75f      	b.n	80032da <Check_Command+0xc6>
            uart_tx_com_bufer[uart_tx_pointer++] = 0xF1;
 800341a:	20f1      	movs	r0, #241	; 0xf1
 800341c:	4926      	ldr	r1, [pc, #152]	; (80034b8 <Check_Command+0x2a4>)
 800341e:	4b27      	ldr	r3, [pc, #156]	; (80034bc <Check_Command+0x2a8>)
 8003420:	680a      	ldr	r2, [r1, #0]
 8003422:	5498      	strb	r0, [r3, r2]
            uart_tx_com_bufer[uart_tx_pointer++] = 12;
 8003424:	200c      	movs	r0, #12
 8003426:	4413      	add	r3, r2
            uart_tx_com_bufer[uart_tx_pointer++] = eeprom_settings.number_of_busses; //CAN0, CAN1, SWCAN
 8003428:	3203      	adds	r2, #3
 800342a:	600a      	str	r2, [r1, #0]
 800342c:	4a27      	ldr	r2, [pc, #156]	; (80034cc <Check_Command+0x2b8>)
            uart_tx_com_bufer[uart_tx_pointer++] = 12;
 800342e:	7058      	strb	r0, [r3, #1]
            uart_tx_com_bufer[uart_tx_pointer++] = eeprom_settings.number_of_busses; //CAN0, CAN1, SWCAN
 8003430:	7912      	ldrb	r2, [r2, #4]
 8003432:	709a      	strb	r2, [r3, #2]
 8003434:	e7b8      	b.n	80033a8 <Check_Command+0x194>
            uart_tx_com_bufer[0] = 0xF1;
 8003436:	22f1      	movs	r2, #241	; 0xf1
 8003438:	4b20      	ldr	r3, [pc, #128]	; (80034bc <Check_Command+0x2a8>)
            uart_tx_com_bufer[2] = conf.CAN_Enable[2] + (eeprom_settings.CAN_mode[2] == CAN_MODE_SILENT ? 1 << 4 : 0);//settings.CAN2_Enabled + (eeprom_settings.CAN_mode[2] == CAN_MODE_SILENT ? 1 << 4 : 0);
 800343a:	481d      	ldr	r0, [pc, #116]	; (80034b0 <Check_Command+0x29c>)
            uart_tx_com_bufer[0] = 0xF1;
 800343c:	701a      	strb	r2, [r3, #0]
            uart_tx_com_bufer[1] = 13;
 800343e:	220d      	movs	r2, #13
 8003440:	705a      	strb	r2, [r3, #1]
            uart_tx_com_bufer[2] = conf.CAN_Enable[2] + (eeprom_settings.CAN_mode[2] == CAN_MODE_SILENT ? 1 << 4 : 0);//settings.CAN2_Enabled + (eeprom_settings.CAN_mode[2] == CAN_MODE_SILENT ? 1 << 4 : 0);
 8003442:	4a22      	ldr	r2, [pc, #136]	; (80034cc <Check_Command+0x2b8>)
 8003444:	7941      	ldrb	r1, [r0, #5]
 8003446:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8003448:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 800344c:	bf0c      	ite	eq
 800344e:	2510      	moveq	r5, #16
 8003450:	2500      	movne	r5, #0
 8003452:	4429      	add	r1, r5
 8003454:	7099      	strb	r1, [r3, #2]
            uart_tx_com_bufer[3] = eeprom_settings.CAN_Speed[2];
 8003456:	6951      	ldr	r1, [r2, #20]
 8003458:	70d9      	strb	r1, [r3, #3]
            uart_tx_com_bufer[4] = eeprom_settings.CAN_Speed[2] >> 8;
 800345a:	6951      	ldr	r1, [r2, #20]
 800345c:	0a09      	lsrs	r1, r1, #8
 800345e:	7119      	strb	r1, [r3, #4]
            uart_tx_com_bufer[5] = eeprom_settings.CAN_Speed[2] >> 16;
 8003460:	6951      	ldr	r1, [r2, #20]
 8003462:	0c09      	lsrs	r1, r1, #16
 8003464:	7159      	strb	r1, [r3, #5]
            uart_tx_com_bufer[6] = eeprom_settings.CAN_Speed[2] >> 24;
 8003466:	6951      	ldr	r1, [r2, #20]
 8003468:	0e09      	lsrs	r1, r1, #24
 800346a:	7199      	strb	r1, [r3, #6]
            uart_tx_com_bufer[7] = conf.CAN_Enable[3] + (eeprom_settings.CAN_mode[3] == CAN_MODE_SILENT ? 1 << 4 : 0);//settings.CAN3_Enabled + (eeprom_settings.CAN_mode[3] == CAN_MODE_SILENT ? 1 << 4 : 0); //fourth bus enabled
 800346c:	7981      	ldrb	r1, [r0, #6]
 800346e:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8003470:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8003474:	bf0c      	ite	eq
 8003476:	2010      	moveq	r0, #16
 8003478:	2000      	movne	r0, #0
 800347a:	4401      	add	r1, r0
 800347c:	71d9      	strb	r1, [r3, #7]
            uart_tx_com_bufer[8] = eeprom_settings.CAN_Speed[3]; //fourth bus speed (4 bytes)
 800347e:	6991      	ldr	r1, [r2, #24]
 8003480:	7219      	strb	r1, [r3, #8]
            uart_tx_com_bufer[9] = eeprom_settings.CAN_Speed[3] >> 8;
 8003482:	6991      	ldr	r1, [r2, #24]
 8003484:	0a09      	lsrs	r1, r1, #8
 8003486:	7259      	strb	r1, [r3, #9]
            uart_tx_com_bufer[10] = eeprom_settings.CAN_Speed[3] >> 16;
 8003488:	6991      	ldr	r1, [r2, #24]
            uart_tx_com_bufer[11] = eeprom_settings.CAN_Speed[3] >> 24;
 800348a:	6992      	ldr	r2, [r2, #24]
            uart_tx_com_bufer[10] = eeprom_settings.CAN_Speed[3] >> 16;
 800348c:	0c09      	lsrs	r1, r1, #16
            uart_tx_com_bufer[11] = eeprom_settings.CAN_Speed[3] >> 24;
 800348e:	0e12      	lsrs	r2, r2, #24
 8003490:	72da      	strb	r2, [r3, #11]
            uart_tx_com_bufer[12] = 0; //fifth bus enabled
 8003492:	2200      	movs	r2, #0
            uart_tx_com_bufer[10] = eeprom_settings.CAN_Speed[3] >> 16;
 8003494:	7299      	strb	r1, [r3, #10]
            uart_tx_com_bufer[12] = 0; //fifth bus enabled
 8003496:	731a      	strb	r2, [r3, #12]
            uart_tx_com_bufer[13] = 0; //fifth bus speed (4 bytes)
 8003498:	735a      	strb	r2, [r3, #13]
            uart_tx_com_bufer[14] = 0;
 800349a:	739a      	strb	r2, [r3, #14]
            uart_tx_com_bufer[15] = 0;
 800349c:	73da      	strb	r2, [r3, #15]
            uart_tx_com_bufer[16] = 0;
 800349e:	741a      	strb	r2, [r3, #16]
            state = IDLE;
 80034a0:	7022      	strb	r2, [r4, #0]
            break;
 80034a2:	e6f6      	b.n	8003292 <Check_Command+0x7e>
            state = SETUP_EXT_BUSES;
 80034a4:	230d      	movs	r3, #13
 80034a6:	e73d      	b.n	8003324 <Check_Command+0x110>
 80034a8:	2000179c 	.word	0x2000179c
 80034ac:	200017a0 	.word	0x200017a0
 80034b0:	200019a0 	.word	0x200019a0
 80034b4:	20001718 	.word	0x20001718
 80034b8:	20001e9c 	.word	0x20001e9c
 80034bc:	20001e7c 	.word	0x20001e7c
 80034c0:	200019f0 	.word	0x200019f0
 80034c4:	200016dd 	.word	0x200016dd
 80034c8:	200017a4 	.word	0x200017a4
 80034cc:	20001738 	.word	0x20001738
        uart_tx_com_bufer[1 + step] = in_byte;
 80034d0:	4f8f      	ldr	r7, [pc, #572]	; (8003710 <Check_Command+0x4fc>)
 80034d2:	4a90      	ldr	r2, [pc, #576]	; (8003714 <Check_Command+0x500>)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	441a      	add	r2, r3
 80034d8:	7050      	strb	r0, [r2, #1]
        switch (step) {
 80034da:	2b05      	cmp	r3, #5
 80034dc:	d82e      	bhi.n	800353c <Check_Command+0x328>
 80034de:	e8df f003 	tbb	[pc, r3]
 80034e2:	0603      	.short	0x0603
 80034e4:	231f110c 	.word	0x231f110c
        	CAN_TxHeader.StdId = in_byte;
 80034e8:	4b8b      	ldr	r3, [pc, #556]	; (8003718 <Check_Command+0x504>)
            build_int = in_byte;
 80034ea:	6018      	str	r0, [r3, #0]
            break;
 80034ec:	e018      	b.n	8003520 <Check_Command+0x30c>
        	CAN_TxHeader.StdId |= in_byte << 8;
 80034ee:	4a8a      	ldr	r2, [pc, #552]	; (8003718 <Check_Command+0x504>)
            build_int |= in_byte << 8;
 80034f0:	6813      	ldr	r3, [r2, #0]
 80034f2:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
            build_int |= in_byte << 16;
 80034f6:	6010      	str	r0, [r2, #0]
            break;
 80034f8:	e012      	b.n	8003520 <Check_Command+0x30c>
        	CAN_TxHeader.StdId |= in_byte << 16;
 80034fa:	4a87      	ldr	r2, [pc, #540]	; (8003718 <Check_Command+0x504>)
            build_int |= in_byte << 16;
 80034fc:	6813      	ldr	r3, [r2, #0]
 80034fe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8003502:	e7f8      	b.n	80034f6 <Check_Command+0x2e2>
        	CAN_TxHeader.StdId |= in_byte << 24;
 8003504:	4a84      	ldr	r2, [pc, #528]	; (8003718 <Check_Command+0x504>)
 8003506:	6813      	ldr	r3, [r2, #0]
 8003508:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
            if (CAN_TxHeader.StdId & 1 << 31) {
 800350c:	2800      	cmp	r0, #0
            	CAN_TxHeader.IDE = CAN_ID_EXT;
 800350e:	bfb4      	ite	lt
 8003510:	2304      	movlt	r3, #4
            } else CAN_TxHeader.IDE = CAN_ID_STD;
 8003512:	2300      	movge	r3, #0
        	CAN_TxHeader.StdId |= in_byte << 24;
 8003514:	6010      	str	r0, [r2, #0]
            	CAN_TxHeader.ExtId = CAN_TxHeader.StdId & 0x7FFFFFFF;
 8003516:	bfbc      	itt	lt
 8003518:	f020 4000 	biclt.w	r0, r0, #2147483648	; 0x80000000
 800351c:	6050      	strlt	r0, [r2, #4]
            } else CAN_TxHeader.IDE = CAN_ID_STD;
 800351e:	6093      	str	r3, [r2, #8]
        step++;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	3301      	adds	r3, #1
 8003524:	603b      	str	r3, [r7, #0]
        break;
 8003526:	e6b4      	b.n	8003292 <Check_Command+0x7e>
        	CAN_TxHeader.DLC = in_byte & 0xF;
 8003528:	f000 000f 	and.w	r0, r0, #15
            if (CAN_TxHeader.DLC > 8) CAN_TxHeader.DLC = 8;
 800352c:	2808      	cmp	r0, #8
 800352e:	bf88      	it	hi
 8003530:	2208      	movhi	r2, #8
 8003532:	4b79      	ldr	r3, [pc, #484]	; (8003718 <Check_Command+0x504>)
        	CAN_TxHeader.DLC = in_byte & 0xF;
 8003534:	bf94      	ite	ls
 8003536:	6118      	strls	r0, [r3, #16]
            if (CAN_TxHeader.DLC > 8) CAN_TxHeader.DLC = 8;
 8003538:	611a      	strhi	r2, [r3, #16]
 800353a:	e7f1      	b.n	8003520 <Check_Command+0x30c>
            if (step < CAN_TxHeader.DLC + 6) {
 800353c:	4e76      	ldr	r6, [pc, #472]	; (8003718 <Check_Command+0x504>)
 800353e:	4d77      	ldr	r5, [pc, #476]	; (800371c <Check_Command+0x508>)
 8003540:	6932      	ldr	r2, [r6, #16]
 8003542:	3206      	adds	r2, #6
 8003544:	429a      	cmp	r2, r3
 8003546:	d902      	bls.n	800354e <Check_Command+0x33a>
            	can_tx_msg.data_byte[step - 6] = in_byte;
 8003548:	442b      	add	r3, r5
 800354a:	7698      	strb	r0, [r3, #26]
 800354c:	e7e8      	b.n	8003520 <Check_Command+0x30c>
                state = IDLE;
 800354e:	2300      	movs	r3, #0
                if(HAL_CAN_AddTxMessage(&hcan, &CAN_TxHeader, can_tx_msg.data_byte, &CAN_mailbox) == HAL_OK && (conf.loger_run == true))
 8003550:	4631      	mov	r1, r6
                state = IDLE;
 8003552:	7023      	strb	r3, [r4, #0]
               CAN_TxHeader.RTR = CAN_RTR_DATA;
 8003554:	60f3      	str	r3, [r6, #12]
                if(HAL_CAN_AddTxMessage(&hcan, &CAN_TxHeader, can_tx_msg.data_byte, &CAN_mailbox) == HAL_OK && (conf.loger_run == true))
 8003556:	4872      	ldr	r0, [pc, #456]	; (8003720 <Check_Command+0x50c>)
 8003558:	4b72      	ldr	r3, [pc, #456]	; (8003724 <Check_Command+0x510>)
 800355a:	f105 0220 	add.w	r2, r5, #32
 800355e:	f7fd faa5 	bl	8000aac <HAL_CAN_AddTxMessage>
 8003562:	2800      	cmp	r0, #0
 8003564:	d1dc      	bne.n	8003520 <Check_Command+0x30c>
 8003566:	4b70      	ldr	r3, [pc, #448]	; (8003728 <Check_Command+0x514>)
 8003568:	f893 402d 	ldrb.w	r4, [r3, #45]	; 0x2d
 800356c:	2c01      	cmp	r4, #1
 800356e:	d1d7      	bne.n	8003520 <Check_Command+0x30c>
                	can_tx_msg.timestamp = HAL_GetTick();
 8003570:	f7fd f92a 	bl	80007c8 <HAL_GetTick>
                	can_tx_msg.can_dir = DIR_TRANSMIT;
 8003574:	f885 4028 	strb.w	r4, [r5, #40]	; 0x28
                	CAN_Log_Buffer_Write_Data(can_tx_msg);
 8003578:	466c      	mov	r4, sp
                	can_tx_msg.header.DLC = CAN_TxHeader.DLC;
 800357a:	6933      	ldr	r3, [r6, #16]
                	can_tx_msg.timestamp = HAL_GetTick();
 800357c:	6028      	str	r0, [r5, #0]
                	can_tx_msg.header.DLC = CAN_TxHeader.DLC;
 800357e:	616b      	str	r3, [r5, #20]
                	can_tx_msg.header.ExtId = CAN_TxHeader.ExtId;
 8003580:	6873      	ldr	r3, [r6, #4]
 8003582:	60ab      	str	r3, [r5, #8]
                	can_tx_msg.header.StdId = CAN_TxHeader.StdId;
 8003584:	6833      	ldr	r3, [r6, #0]
 8003586:	606b      	str	r3, [r5, #4]
                	can_tx_msg.header.RTR = CAN_TxHeader.RTR;
 8003588:	68f3      	ldr	r3, [r6, #12]
 800358a:	612b      	str	r3, [r5, #16]
                	can_tx_msg.header.IDE = CAN_TxHeader.IDE;
 800358c:	68b3      	ldr	r3, [r6, #8]
                	CAN_Log_Buffer_Write_Data(can_tx_msg);
 800358e:	f105 0610 	add.w	r6, r5, #16
                	can_tx_msg.header.IDE = CAN_TxHeader.IDE;
 8003592:	60eb      	str	r3, [r5, #12]
                	can_tx_msg.bus = eeprom_settings.numBus;
 8003594:	4b65      	ldr	r3, [pc, #404]	; (800372c <Check_Command+0x518>)
 8003596:	7a1b      	ldrb	r3, [r3, #8]
 8003598:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
                	CAN_Log_Buffer_Write_Data(can_tx_msg);
 800359c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800359e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035a0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80035a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80035a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80035ac:	f7fe fe2e 	bl	800220c <CAN_Log_Buffer_Write_Data>
        step++;
 80035b0:	e7b6      	b.n	8003520 <Check_Command+0x30c>
        uart_tx_com_bufer[1] = in_byte;
 80035b2:	4b58      	ldr	r3, [pc, #352]	; (8003714 <Check_Command+0x500>)
 80035b4:	7058      	strb	r0, [r3, #1]
        state = IDLE;
 80035b6:	e70f      	b.n	80033d8 <Check_Command+0x1c4>
        switch (step) {
 80035b8:	4f55      	ldr	r7, [pc, #340]	; (8003710 <Check_Command+0x4fc>)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b07      	cmp	r3, #7
 80035be:	d8af      	bhi.n	8003520 <Check_Command+0x30c>
 80035c0:	e8df f003 	tbb	[pc, r3]
 80035c4:	0a080604 	.word	0x0a080604
 80035c8:	40080604 	.word	0x40080604
            build_int = in_byte;
 80035cc:	4b58      	ldr	r3, [pc, #352]	; (8003730 <Check_Command+0x51c>)
 80035ce:	e78c      	b.n	80034ea <Check_Command+0x2d6>
            build_int |= in_byte << 8;
 80035d0:	4a57      	ldr	r2, [pc, #348]	; (8003730 <Check_Command+0x51c>)
 80035d2:	e78d      	b.n	80034f0 <Check_Command+0x2dc>
            build_int |= in_byte << 16;
 80035d4:	4a56      	ldr	r2, [pc, #344]	; (8003730 <Check_Command+0x51c>)
 80035d6:	e791      	b.n	80034fc <Check_Command+0x2e8>
            build_int |= in_byte << 24;
 80035d8:	4d55      	ldr	r5, [pc, #340]	; (8003730 <Check_Command+0x51c>)
 80035da:	4c53      	ldr	r4, [pc, #332]	; (8003728 <Check_Command+0x514>)
 80035dc:	682b      	ldr	r3, [r5, #0]
 80035de:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 80035e2:	6028      	str	r0, [r5, #0]
            if (build_int > 0) {
 80035e4:	b310      	cbz	r0, 800362c <Check_Command+0x418>
            	Close_CAN_cannel();
 80035e6:	f7fe ffbf 	bl	8002568 <Close_CAN_cannel>
            	eeprom_settings.CAN_Speed[0] = build_int & 0xFFFFF;
 80035ea:	682a      	ldr	r2, [r5, #0]
 80035ec:	4b4f      	ldr	r3, [pc, #316]	; (800372c <Check_Command+0x518>)
 80035ee:	f3c2 0113 	ubfx	r1, r2, #0, #20
                if (build_int & 0x80000000) { //signals that enabled and listen only status are also being passed
 80035f2:	2a00      	cmp	r2, #0
            	eeprom_settings.CAN_Speed[0] = build_int & 0xFFFFF;
 80035f4:	60d9      	str	r1, [r3, #12]
                if (build_int & 0x80000000) { //signals that enabled and listen only status are also being passed
 80035f6:	da1c      	bge.n	8003632 <Check_Command+0x41e>
                	if ((build_int & 0x60000000) == 0x60000000) {
 80035f8:	f002 41c0 	and.w	r1, r2, #1610612736	; 0x60000000
 80035fc:	f1b1 4fc0 	cmp.w	r1, #1610612736	; 0x60000000
 8003600:	d10b      	bne.n	800361a <Check_Command+0x406>
                		conf.CAN_Enable[0] = true;
 8003602:	2201      	movs	r2, #1
 8003604:	70e2      	strb	r2, [r4, #3]
                        eeprom_settings.CAN_mode[0] = CAN_MODE_SILENT;
 8003606:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800360a:	635a      	str	r2, [r3, #52]	; 0x34
                        conf.state = SAVVYCAN_CONNECT;
 800360c:	2202      	movs	r2, #2
 800360e:	7022      	strb	r2, [r4, #0]
                        eeprom_settings.numBus = 0;
 8003610:	2200      	movs	r2, #0
                        eeprom_settings.numBus = 0;
 8003612:	721a      	strb	r2, [r3, #8]
                        Open_CAN_cannel();
 8003614:	f7ff f8ee 	bl	80027f4 <Open_CAN_cannel>
 8003618:	e782      	b.n	8003520 <Check_Command+0x30c>
                    } else if (build_int & 0x40000000) {
 800361a:	0050      	lsls	r0, r2, #1
 800361c:	d506      	bpl.n	800362c <Check_Command+0x418>
                    	conf.CAN_Enable[0] = true;
 800361e:	2201      	movs	r2, #1
                        conf.state = SAVVYCAN_CONNECT;
 8003620:	2102      	movs	r1, #2
                    	conf.CAN_Enable[0] = true;
 8003622:	70e2      	strb	r2, [r4, #3]
                        eeprom_settings.CAN_mode[0] = CAN_MODE_NORMAL;
 8003624:	2200      	movs	r2, #0
                        conf.state = SAVVYCAN_CONNECT;
 8003626:	7021      	strb	r1, [r4, #0]
                        eeprom_settings.CAN_mode[0] = CAN_MODE_NORMAL;
 8003628:	635a      	str	r2, [r3, #52]	; 0x34
                        conf.state = SAVVYCAN_CONNECT;
 800362a:	e7f2      	b.n	8003612 <Check_Command+0x3fe>
                    	conf.CAN_Enable[0] = false;
 800362c:	2300      	movs	r3, #0
                    conf.CAN_Enable[0] = true;
 800362e:	70e3      	strb	r3, [r4, #3]
 8003630:	e776      	b.n	8003520 <Check_Command+0x30c>
                	conf.state = SAVVYCAN_CONNECT;
 8003632:	2202      	movs	r2, #2
 8003634:	7022      	strb	r2, [r4, #0]
                	eeprom_settings.CAN_mode[0] = CAN_MODE_NORMAL;
 8003636:	2200      	movs	r2, #0
 8003638:	635a      	str	r2, [r3, #52]	; 0x34
                	eeprom_settings.numBus = 0;
 800363a:	721a      	strb	r2, [r3, #8]
                    Open_CAN_cannel(); //if not using extended status mode then just default to enabling - this was old behavior
 800363c:	f7ff f8da 	bl	80027f4 <Open_CAN_cannel>
                    conf.CAN_Enable[0] = true;
 8003640:	2301      	movs	r3, #1
 8003642:	e7f4      	b.n	800362e <Check_Command+0x41a>
            build_int |= in_byte << 24;
 8003644:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 8003730 <Check_Command+0x51c>
 8003648:	4d37      	ldr	r5, [pc, #220]	; (8003728 <Check_Command+0x514>)
 800364a:	f8d9 3000 	ldr.w	r3, [r9]
 800364e:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 8003652:	f8c9 0000 	str.w	r0, [r9]
            if (build_int > 0 ) {
 8003656:	b338      	cbz	r0, 80036a8 <Check_Command+0x494>
            	eeprom_settings.CAN_Speed[1] = build_int & 0xFFFFF;
 8003658:	4e34      	ldr	r6, [pc, #208]	; (800372c <Check_Command+0x518>)
            	if(conf.CAN_Enable[0] == false)
 800365a:	f895 8003 	ldrb.w	r8, [r5, #3]
            	eeprom_settings.CAN_Speed[1] = build_int & 0xFFFFF;
 800365e:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8003662:	6130      	str	r0, [r6, #16]
            	if(conf.CAN_Enable[0] == false)
 8003664:	f1b8 0f00 	cmp.w	r8, #0
 8003668:	d114      	bne.n	8003694 <Check_Command+0x480>
                	Close_CAN_cannel();
 800366a:	f7fe ff7d 	bl	8002568 <Close_CAN_cannel>
                    if (build_int & 0x80000000) { //signals that enabled and listen only status are also being passed
 800366e:	f8d9 3000 	ldr.w	r3, [r9]
 8003672:	2b00      	cmp	r3, #0
 8003674:	da1b      	bge.n	80036ae <Check_Command+0x49a>
                    	if ((build_int & 0x60000000) == 0x60000000) {
 8003676:	f003 42c0 	and.w	r2, r3, #1610612736	; 0x60000000
 800367a:	f1b2 4fc0 	cmp.w	r2, #1610612736	; 0x60000000
 800367e:	d10c      	bne.n	800369a <Check_Command+0x486>
                    		conf.CAN_Enable[1] = true;
 8003680:	2301      	movs	r3, #1
                            eeprom_settings.CAN_mode[1] = CAN_MODE_SILENT;
 8003682:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
                    		conf.CAN_Enable[1] = true;
 8003686:	712b      	strb	r3, [r5, #4]
                            eeprom_settings.CAN_mode[1] = CAN_MODE_SILENT;
 8003688:	63b2      	str	r2, [r6, #56]	; 0x38
                            conf.state = SAVVYCAN_CONNECT;
 800368a:	2202      	movs	r2, #2
 800368c:	702a      	strb	r2, [r5, #0]
                            eeprom_settings.numBus = 1;
 800368e:	7233      	strb	r3, [r6, #8]
                            Open_CAN_cannel();
 8003690:	f7ff f8b0 	bl	80027f4 <Open_CAN_cannel>
            state = IDLE;
 8003694:	2300      	movs	r3, #0
 8003696:	7023      	strb	r3, [r4, #0]
}
 8003698:	e742      	b.n	8003520 <Check_Command+0x30c>
                        } else if (build_int & 0x40000000) {
 800369a:	0059      	lsls	r1, r3, #1
 800369c:	d504      	bpl.n	80036a8 <Check_Command+0x494>
                        	conf.CAN_Enable[1] = true;
 800369e:	2301      	movs	r3, #1
                            eeprom_settings.CAN_mode[1] = CAN_MODE_NORMAL;
 80036a0:	f8c6 8038 	str.w	r8, [r6, #56]	; 0x38
                        	conf.CAN_Enable[1] = true;
 80036a4:	712b      	strb	r3, [r5, #4]
                            eeprom_settings.CAN_mode[1] = CAN_MODE_NORMAL;
 80036a6:	e7f0      	b.n	800368a <Check_Command+0x476>
                        	conf.CAN_Enable[1] = false;
 80036a8:	2300      	movs	r3, #0
 80036aa:	712b      	strb	r3, [r5, #4]
 80036ac:	e7f2      	b.n	8003694 <Check_Command+0x480>
                    	eeprom_settings.CAN_mode[1] = CAN_MODE_NORMAL;
 80036ae:	f8c6 8038 	str.w	r8, [r6, #56]	; 0x38
                    	conf.state = SAVVYCAN_CONNECT;
 80036b2:	2302      	movs	r3, #2
                    	eeprom_settings.numBus = 1;
 80036b4:	f04f 0801 	mov.w	r8, #1
                    	conf.state = SAVVYCAN_CONNECT;
 80036b8:	702b      	strb	r3, [r5, #0]
                    	eeprom_settings.numBus = 1;
 80036ba:	f886 8008 	strb.w	r8, [r6, #8]
                        Open_CAN_cannel(); //if not using extended status mode then just default to enabling - this was old behavior
 80036be:	f7ff f899 	bl	80027f4 <Open_CAN_cannel>
                        conf.CAN_Enable[1] = true;
 80036c2:	f885 8004 	strb.w	r8, [r5, #4]
 80036c6:	e7e5      	b.n	8003694 <Check_Command+0x480>
        uart_tx_com_bufer[1 + step] = in_byte;
 80036c8:	4a11      	ldr	r2, [pc, #68]	; (8003710 <Check_Command+0x4fc>)
 80036ca:	4912      	ldr	r1, [pc, #72]	; (8003714 <Check_Command+0x500>)
 80036cc:	6813      	ldr	r3, [r2, #0]
 80036ce:	3301      	adds	r3, #1
 80036d0:	54c8      	strb	r0, [r1, r3]
        step++;
 80036d2:	6013      	str	r3, [r2, #0]
        break;
 80036d4:	e5dd      	b.n	8003292 <Check_Command+0x7e>
        switch (step) {
 80036d6:	4e0e      	ldr	r6, [pc, #56]	; (8003710 <Check_Command+0x4fc>)
 80036d8:	6833      	ldr	r3, [r6, #0]
 80036da:	2b0b      	cmp	r3, #11
 80036dc:	d809      	bhi.n	80036f2 <Check_Command+0x4de>
 80036de:	e8df f003 	tbb	[pc, r3]
 80036e2:	0c06      	.short	0x0c06
 80036e4:	0c062912 	.word	0x0c062912
 80036e8:	0c065d12 	.word	0x0c065d12
 80036ec:	9212      	.short	0x9212
            build_int = in_byte;
 80036ee:	4b10      	ldr	r3, [pc, #64]	; (8003730 <Check_Command+0x51c>)
 80036f0:	6018      	str	r0, [r3, #0]
        step++;
 80036f2:	6833      	ldr	r3, [r6, #0]
 80036f4:	3301      	adds	r3, #1
 80036f6:	6033      	str	r3, [r6, #0]
}
 80036f8:	e5cb      	b.n	8003292 <Check_Command+0x7e>
            build_int |= in_byte << 8;
 80036fa:	4a0d      	ldr	r2, [pc, #52]	; (8003730 <Check_Command+0x51c>)
 80036fc:	6813      	ldr	r3, [r2, #0]
 80036fe:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
            build_int |= in_byte << 16;
 8003702:	6010      	str	r0, [r2, #0]
            break;
 8003704:	e7f5      	b.n	80036f2 <Check_Command+0x4de>
            build_int |= in_byte << 16;
 8003706:	4a0a      	ldr	r2, [pc, #40]	; (8003730 <Check_Command+0x51c>)
 8003708:	6813      	ldr	r3, [r2, #0]
 800370a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800370e:	e7f8      	b.n	8003702 <Check_Command+0x4ee>
 8003710:	200017a4 	.word	0x200017a4
 8003714:	20001e7c 	.word	0x20001e7c
 8003718:	200016c0 	.word	0x200016c0
 800371c:	200016e8 	.word	0x200016e8
 8003720:	20001918 	.word	0x20001918
 8003724:	200016d8 	.word	0x200016d8
 8003728:	200019a0 	.word	0x200019a0
 800372c:	20001738 	.word	0x20001738
 8003730:	200016e0 	.word	0x200016e0
            build_int |= in_byte << 24;
 8003734:	4f38      	ldr	r7, [pc, #224]	; (8003818 <Check_Command+0x604>)
 8003736:	4c39      	ldr	r4, [pc, #228]	; (800381c <Check_Command+0x608>)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 800373e:	6038      	str	r0, [r7, #0]
            if (build_int > 0 ) {
 8003740:	b300      	cbz	r0, 8003784 <Check_Command+0x570>
            	if(conf.CAN_Enable[0] == false && conf.CAN_Enable[1] == false)
 8003742:	78e5      	ldrb	r5, [r4, #3]
 8003744:	7923      	ldrb	r3, [r4, #4]
 8003746:	431d      	orrs	r5, r3
 8003748:	d1d3      	bne.n	80036f2 <Check_Command+0x4de>
                	Close_CAN_cannel();
 800374a:	f7fe ff0d 	bl	8002568 <Close_CAN_cannel>
                    if (build_int & 0x80000000) { //signals that enabled and listen only status are also being passed
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	da1a      	bge.n	800378a <Check_Command+0x576>
                    	if ((build_int & 0x60000000) == 0x60000000) {
 8003754:	f003 42c0 	and.w	r2, r3, #1610612736	; 0x60000000
 8003758:	f1b2 4fc0 	cmp.w	r2, #1610612736	; 0x60000000
 800375c:	d10b      	bne.n	8003776 <Check_Command+0x562>
                    		conf.CAN_Enable[2] = true;
 800375e:	2301      	movs	r3, #1
                            eeprom_settings.CAN_mode[2] = CAN_MODE_SILENT;
 8003760:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
                    		conf.CAN_Enable[2] = true;
 8003764:	7163      	strb	r3, [r4, #5]
                            eeprom_settings.CAN_mode[2] = CAN_MODE_SILENT;
 8003766:	4b2e      	ldr	r3, [pc, #184]	; (8003820 <Check_Command+0x60c>)
 8003768:	63da      	str	r2, [r3, #60]	; 0x3c
                            conf.state = SAVVYCAN_CONNECT;
 800376a:	2202      	movs	r2, #2
 800376c:	7022      	strb	r2, [r4, #0]
                            eeprom_settings.numBus = 3;
 800376e:	721a      	strb	r2, [r3, #8]
                            Open_CAN_cannel();
 8003770:	f7ff f840 	bl	80027f4 <Open_CAN_cannel>
 8003774:	e7bd      	b.n	80036f2 <Check_Command+0x4de>
                        } else if (build_int & 0x40000000) {
 8003776:	005a      	lsls	r2, r3, #1
 8003778:	d504      	bpl.n	8003784 <Check_Command+0x570>
                        	conf.CAN_Enable[2] = true;
 800377a:	2301      	movs	r3, #1
 800377c:	7163      	strb	r3, [r4, #5]
                            eeprom_settings.CAN_mode[2] = CAN_MODE_NORMAL;
 800377e:	4b28      	ldr	r3, [pc, #160]	; (8003820 <Check_Command+0x60c>)
 8003780:	63dd      	str	r5, [r3, #60]	; 0x3c
 8003782:	e7f2      	b.n	800376a <Check_Command+0x556>
                        	conf.CAN_Enable[2] = false;
 8003784:	2300      	movs	r3, #0
                        conf.CAN_Enable[2] = true;
 8003786:	7163      	strb	r3, [r4, #5]
 8003788:	e7b3      	b.n	80036f2 <Check_Command+0x4de>
                    	conf.state = SAVVYCAN_CONNECT;
 800378a:	2202      	movs	r2, #2
                    	eeprom_settings.CAN_mode[2] = CAN_MODE_NORMAL;
 800378c:	4b24      	ldr	r3, [pc, #144]	; (8003820 <Check_Command+0x60c>)
                    	conf.state = SAVVYCAN_CONNECT;
 800378e:	7022      	strb	r2, [r4, #0]
                    	eeprom_settings.CAN_mode[2] = CAN_MODE_NORMAL;
 8003790:	63dd      	str	r5, [r3, #60]	; 0x3c
                    	eeprom_settings.numBus = 2;
 8003792:	721a      	strb	r2, [r3, #8]
                        Open_CAN_cannel(); //if not using extended status mode then just default to enabling - this was old behavior
 8003794:	f7ff f82e 	bl	80027f4 <Open_CAN_cannel>
                        conf.CAN_Enable[2] = true;
 8003798:	2301      	movs	r3, #1
 800379a:	e7f4      	b.n	8003786 <Check_Command+0x572>
            build_int |= in_byte << 24;
 800379c:	4f1e      	ldr	r7, [pc, #120]	; (8003818 <Check_Command+0x604>)
 800379e:	4c1f      	ldr	r4, [pc, #124]	; (800381c <Check_Command+0x608>)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 80037a6:	6038      	str	r0, [r7, #0]
            if (build_int > 0 ) {
 80037a8:	b300      	cbz	r0, 80037ec <Check_Command+0x5d8>
            	if(conf.CAN_Enable[0] == false && conf.CAN_Enable[1] == false && conf.CAN_Enable[2] == false)
 80037aa:	78e3      	ldrb	r3, [r4, #3]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1a0      	bne.n	80036f2 <Check_Command+0x4de>
 80037b0:	88a5      	ldrh	r5, [r4, #4]
 80037b2:	2d00      	cmp	r5, #0
 80037b4:	d19d      	bne.n	80036f2 <Check_Command+0x4de>
                	Close_CAN_cannel(); // TODO in can work in parralel, LIN
 80037b6:	f7fe fed7 	bl	8002568 <Close_CAN_cannel>
                    if (build_int & 0x80000000) { //signals that enabled and listen only status are also being passed
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	da18      	bge.n	80037f2 <Check_Command+0x5de>
                    	if ((build_int & 0x60000000) == 0x60000000) {
 80037c0:	f003 42c0 	and.w	r2, r3, #1610612736	; 0x60000000
 80037c4:	f1b2 4fc0 	cmp.w	r2, #1610612736	; 0x60000000
 80037c8:	d109      	bne.n	80037de <Check_Command+0x5ca>
                    		conf.CAN_Enable[3] = true;
 80037ca:	2301      	movs	r3, #1
                            eeprom_settings.CAN_mode[3] = CAN_MODE_SILENT;
 80037cc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
                    		conf.CAN_Enable[3] = true;
 80037d0:	71a3      	strb	r3, [r4, #6]
                            eeprom_settings.CAN_mode[3] = CAN_MODE_SILENT;
 80037d2:	4b13      	ldr	r3, [pc, #76]	; (8003820 <Check_Command+0x60c>)
 80037d4:	641a      	str	r2, [r3, #64]	; 0x40
                            conf.state = SAVVYCAN_CONNECT;
 80037d6:	2202      	movs	r2, #2
 80037d8:	7022      	strb	r2, [r4, #0]
                            eeprom_settings.numBus = 3;
 80037da:	2203      	movs	r2, #3
 80037dc:	e7c7      	b.n	800376e <Check_Command+0x55a>
                        } else if (build_int & 0x40000000) {
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	d504      	bpl.n	80037ec <Check_Command+0x5d8>
                        	conf.CAN_Enable[3] = true;
 80037e2:	2301      	movs	r3, #1
 80037e4:	71a3      	strb	r3, [r4, #6]
                            eeprom_settings.CAN_mode[3] = CAN_MODE_NORMAL;
 80037e6:	4b0e      	ldr	r3, [pc, #56]	; (8003820 <Check_Command+0x60c>)
 80037e8:	641d      	str	r5, [r3, #64]	; 0x40
 80037ea:	e7f4      	b.n	80037d6 <Check_Command+0x5c2>
                        	conf.CAN_Enable[3] = false;
 80037ec:	2300      	movs	r3, #0
                        conf.CAN_Enable[3] = true;
 80037ee:	71a3      	strb	r3, [r4, #6]
 80037f0:	e77f      	b.n	80036f2 <Check_Command+0x4de>
                    	conf.state = SAVVYCAN_CONNECT;
 80037f2:	2302      	movs	r3, #2
                    	eeprom_settings.numBus = 3;
 80037f4:	2203      	movs	r2, #3
                    	conf.state = SAVVYCAN_CONNECT;
 80037f6:	7023      	strb	r3, [r4, #0]
                    	eeprom_settings.CAN_mode[3] = CAN_MODE_NORMAL;
 80037f8:	4b09      	ldr	r3, [pc, #36]	; (8003820 <Check_Command+0x60c>)
 80037fa:	641d      	str	r5, [r3, #64]	; 0x40
                    	eeprom_settings.numBus = 3;
 80037fc:	721a      	strb	r2, [r3, #8]
                        Open_CAN_cannel(); //if not using extended status mode then just default to enabling - this was old behavior
 80037fe:	f7fe fff9 	bl	80027f4 <Open_CAN_cannel>
                        conf.CAN_Enable[3] = true;
 8003802:	2301      	movs	r3, #1
 8003804:	e7f3      	b.n	80037ee <Check_Command+0x5da>
            build_int |= in_byte << 24;
 8003806:	4a04      	ldr	r2, [pc, #16]	; (8003818 <Check_Command+0x604>)
 8003808:	6813      	ldr	r3, [r2, #0]
 800380a:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
            state = IDLE;
 800380e:	2300      	movs	r3, #0
            build_int |= in_byte << 24;
 8003810:	6010      	str	r0, [r2, #0]
            state = IDLE;
 8003812:	7023      	strb	r3, [r4, #0]
            break;
 8003814:	e76d      	b.n	80036f2 <Check_Command+0x4de>
 8003816:	bf00      	nop
 8003818:	200016e0 	.word	0x200016e0
 800381c:	200019a0 	.word	0x200019a0
 8003820:	20001738 	.word	0x20001738

08003824 <lin_calc_pid>:
boolean lin_check_slave_answer(uint8_t pid);

uint8_t lin_calc_pid(uint8_t id)
{
	uint8_t p0, p1, pid;
	p0 = ((id >> 0 ^ id >> 1 ^ id >> 2 ^ id >> 4) & 0x01) << 6;
 8003824:	0842      	lsrs	r2, r0, #1
	p1 = (~(id >> 1 ^ id >> 3 ^ id >> 4 ^ id >> 5) & 0x01) << 7;
 8003826:	ea82 1210 	eor.w	r2, r2, r0, lsr #4
 800382a:	ea82 02d0 	eor.w	r2, r2, r0, lsr #3
 800382e:	ea82 1250 	eor.w	r2, r2, r0, lsr #5
 8003832:	f012 0f01 	tst.w	r2, #1
 8003836:	bf0c      	ite	eq
 8003838:	2280      	moveq	r2, #128	; 0x80
 800383a:	2200      	movne	r2, #0
	p0 = ((id >> 0 ^ id >> 1 ^ id >> 2 ^ id >> 4) & 0x01) << 6;
 800383c:	0883      	lsrs	r3, r0, #2
 800383e:	ea83 0350 	eor.w	r3, r3, r0, lsr #1
 8003842:	4043      	eors	r3, r0
 8003844:	ea83 1310 	eor.w	r3, r3, r0, lsr #4
 8003848:	019b      	lsls	r3, r3, #6
 800384a:	f003 0340 	and.w	r3, r3, #64	; 0x40
	pid = (id & 0x3F) | (p0 + p1);
 800384e:	4413      	add	r3, r2
 8003850:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8003854:	4318      	orrs	r0, r3
	return pid;
}
 8003856:	b2c0      	uxtb	r0, r0
 8003858:	4770      	bx	lr

0800385a <lin_calc_checksumm>:

uint8_t lin_calc_checksumm(uint8_t * msg, uint8_t len, uint8_t begin_value)
{
	uint16_t crc;
	crc = begin_value;
	for(int i = 0; i < len; i++)
 800385a:	2300      	movs	r3, #0
{
 800385c:	b510      	push	{r4, lr}
	for(int i = 0; i < len; i++)
 800385e:	4299      	cmp	r1, r3
 8003860:	dc02      	bgt.n	8003868 <lin_calc_checksumm+0xe>
//		crc += crc >> 8;
//		crc &= 0x00FF;
		if(crc >= 256)
			crc -= 255;
	}
	return ~crc;
 8003862:	43d2      	mvns	r2, r2
}
 8003864:	b2d0      	uxtb	r0, r2
 8003866:	bd10      	pop	{r4, pc}
		crc += msg[i];
 8003868:	5cc4      	ldrb	r4, [r0, r3]
	for(int i = 0; i < len; i++)
 800386a:	3301      	adds	r3, #1
		crc += msg[i];
 800386c:	4422      	add	r2, r4
 800386e:	b292      	uxth	r2, r2
		if(crc >= 256)
 8003870:	2aff      	cmp	r2, #255	; 0xff
			crc -= 255;
 8003872:	bf84      	itt	hi
 8003874:	3aff      	subhi	r2, #255	; 0xff
 8003876:	b292      	uxthhi	r2, r2
	for(int i = 0; i < len; i++)
 8003878:	e7f1      	b.n	800385e <lin_calc_checksumm+0x4>
	...

0800387c <lin_msg_parse>:


can_msg_t lin_msg_parse(void)
{
 800387c:	b570      	push	{r4, r5, r6, lr}
 800387e:	b08c      	sub	sp, #48	; 0x30
 8003880:	4606      	mov	r6, r0
	can_msg_t msg = {0};
 8003882:	222c      	movs	r2, #44	; 0x2c
 8003884:	2100      	movs	r1, #0
 8003886:	a801      	add	r0, sp, #4
 8003888:	f000 fee2 	bl	8004650 <memset>
	uint8_t checksumm;
	msg.timestamp = HAL_GetTick();
 800388c:	f7fc ff9c 	bl	80007c8 <HAL_GetTick>
	msg.header.DLC = (lin_stat.byte_cnt > 2) ? lin_stat.byte_cnt-3 : 0;
 8003890:	4b24      	ldr	r3, [pc, #144]	; (8003924 <lin_msg_parse+0xa8>)
	msg.timestamp = HAL_GetTick();
 8003892:	9000      	str	r0, [sp, #0]
	msg.header.DLC = (lin_stat.byte_cnt > 2) ? lin_stat.byte_cnt-3 : 0;
 8003894:	7819      	ldrb	r1, [r3, #0]
	msg.data_byte[0] = lin_stat.data[0];
 8003896:	789a      	ldrb	r2, [r3, #2]
	msg.header.DLC = (lin_stat.byte_cnt > 2) ? lin_stat.byte_cnt-3 : 0;
 8003898:	2902      	cmp	r1, #2
 800389a:	bf98      	it	ls
 800389c:	2100      	movls	r1, #0
	msg.data_byte[0] = lin_stat.data[0];
 800389e:	f88d 2020 	strb.w	r2, [sp, #32]
	msg.data_byte[1] = lin_stat.data[1];
 80038a2:	78da      	ldrb	r2, [r3, #3]
	msg.header.DLC = (lin_stat.byte_cnt > 2) ? lin_stat.byte_cnt-3 : 0;
 80038a4:	bf88      	it	hi
 80038a6:	3903      	subhi	r1, #3
	msg.data_byte[1] = lin_stat.data[1];
 80038a8:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	msg.data_byte[2] = lin_stat.data[2];
 80038ac:	791a      	ldrb	r2, [r3, #4]
	msg.data_byte[7] = lin_stat.data[7];
	msg.lin_checksumm = lin_stat.data[msg.header.DLC];
	msg.can_dir = (lin_stat.transmiting) ? DIR_TRANSMIT : DIR_RECEIVE;
	msg.bus = 3;

	checksumm = lin_calc_checksumm(msg.data_byte, msg.header.DLC, lin_stat.pid);
 80038ae:	785c      	ldrb	r4, [r3, #1]
	msg.data_byte[2] = lin_stat.data[2];
 80038b0:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
	msg.data_byte[3] = lin_stat.data[3];
 80038b4:	795a      	ldrb	r2, [r3, #5]
	msg.header.DLC = (lin_stat.byte_cnt > 2) ? lin_stat.byte_cnt-3 : 0;
 80038b6:	9105      	str	r1, [sp, #20]
	msg.data_byte[3] = lin_stat.data[3];
 80038b8:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	msg.data_byte[4] = lin_stat.data[4];
 80038bc:	799a      	ldrb	r2, [r3, #6]
	checksumm = lin_calc_checksumm(msg.data_byte, msg.header.DLC, lin_stat.pid);
 80038be:	a808      	add	r0, sp, #32
	msg.data_byte[4] = lin_stat.data[4];
 80038c0:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
	msg.data_byte[5] = lin_stat.data[5];
 80038c4:	79da      	ldrb	r2, [r3, #7]
 80038c6:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
	msg.data_byte[6] = lin_stat.data[6];
 80038ca:	7a1a      	ldrb	r2, [r3, #8]
 80038cc:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
	msg.data_byte[7] = lin_stat.data[7];
 80038d0:	7a5a      	ldrb	r2, [r3, #9]
 80038d2:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
	msg.lin_checksumm = lin_stat.data[msg.header.DLC];
 80038d6:	185a      	adds	r2, r3, r1
 80038d8:	7895      	ldrb	r5, [r2, #2]
	msg.can_dir = (lin_stat.transmiting) ? DIR_TRANSMIT : DIR_RECEIVE;
 80038da:	7b5a      	ldrb	r2, [r3, #13]
	checksumm = lin_calc_checksumm(msg.data_byte, msg.header.DLC, lin_stat.pid);
 80038dc:	b2c9      	uxtb	r1, r1
	msg.can_dir = (lin_stat.transmiting) ? DIR_TRANSMIT : DIR_RECEIVE;
 80038de:	3a00      	subs	r2, #0
 80038e0:	bf18      	it	ne
 80038e2:	2201      	movne	r2, #1
 80038e4:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
	msg.bus = 3;
 80038e8:	2203      	movs	r2, #3
 80038ea:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
	checksumm = lin_calc_checksumm(msg.data_byte, msg.header.DLC, lin_stat.pid);
 80038ee:	4622      	mov	r2, r4
	msg.lin_checksumm = lin_stat.data[msg.header.DLC];
 80038f0:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
	checksumm = lin_calc_checksumm(msg.data_byte, msg.header.DLC, lin_stat.pid);
 80038f4:	f7ff ffb1 	bl	800385a <lin_calc_checksumm>
	if(checksumm + msg.lin_checksumm == 0xFF)
 80038f8:	4428      	add	r0, r5
 80038fa:	28ff      	cmp	r0, #255	; 0xff
	{
		msg.header.ExtId = lin_stat.pid;
		msg.header.IDE = CAN_ID_EXT;
 80038fc:	bf06      	itte	eq
 80038fe:	2304      	moveq	r3, #4
		msg.header.ExtId = lin_stat.pid;
 8003900:	9402      	streq	r4, [sp, #8]
	}
	else
	{
		msg.header.StdId = lin_stat.pid;
 8003902:	9401      	strne	r4, [sp, #4]
		msg.header.IDE = CAN_ID_STD;
	}
	return msg;
 8003904:	466d      	mov	r5, sp
 8003906:	4634      	mov	r4, r6
		msg.header.IDE = CAN_ID_EXT;
 8003908:	bf08      	it	eq
 800390a:	9303      	streq	r3, [sp, #12]
	return msg;
 800390c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800390e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003914:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003918:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

}
 800391c:	4630      	mov	r0, r6
 800391e:	b00c      	add	sp, #48	; 0x30
 8003920:	bd70      	pop	{r4, r5, r6, pc}
 8003922:	bf00      	nop
 8003924:	20001908 	.word	0x20001908

08003928 <lin_msg_received>:

void lin_msg_received(void)
{
 8003928:	b570      	push	{r4, r5, r6, lr}
 800392a:	b094      	sub	sp, #80	; 0x50
	can_msg_t temp_msg;
	temp_msg = lin_msg_parse();
	CAN_Buffer_Write_Data(temp_msg);
 800392c:	466c      	mov	r4, sp
	temp_msg = lin_msg_parse();
 800392e:	ae08      	add	r6, sp, #32
 8003930:	4630      	mov	r0, r6
	CAN_Buffer_Write_Data(temp_msg);
 8003932:	ad0c      	add	r5, sp, #48	; 0x30
	temp_msg = lin_msg_parse();
 8003934:	f7ff ffa2 	bl	800387c <lin_msg_parse>
	CAN_Buffer_Write_Data(temp_msg);
 8003938:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800393a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800393c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003940:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003944:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003948:	f7fe fc32 	bl	80021b0 <CAN_Buffer_Write_Data>
	if(conf.loger_run == true)
 800394c:	4b09      	ldr	r3, [pc, #36]	; (8003974 <lin_msg_received+0x4c>)
 800394e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003952:	2b01      	cmp	r3, #1
 8003954:	d10b      	bne.n	800396e <lin_msg_received+0x46>
		CAN_Log_Buffer_Write_Data(temp_msg);
 8003956:	466c      	mov	r4, sp
 8003958:	ad0c      	add	r5, sp, #48	; 0x30
 800395a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800395c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800395e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003962:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003966:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800396a:	f7fe fc4f 	bl	800220c <CAN_Log_Buffer_Write_Data>
}
 800396e:	b014      	add	sp, #80	; 0x50
 8003970:	bd70      	pop	{r4, r5, r6, pc}
 8003972:	bf00      	nop
 8003974:	200019a0 	.word	0x200019a0

08003978 <lin_break_detect>:

void lin_break_detect(void)
{
 8003978:	b510      	push	{r4, lr}
	if(lin_stat.byte_cnt > 0)
 800397a:	4c0a      	ldr	r4, [pc, #40]	; (80039a4 <lin_break_detect+0x2c>)
 800397c:	7823      	ldrb	r3, [r4, #0]
 800397e:	b10b      	cbz	r3, 8003984 <lin_break_detect+0xc>
		lin_msg_received();
 8003980:	f7ff ffd2 	bl	8003928 <lin_msg_received>
	lin_stat.byte_cnt = 0;
 8003984:	2300      	movs	r3, #0
	lin_stat.break_detected = 1;
 8003986:	2201      	movs	r2, #1
	lin_stat.byte_cnt = 0;
 8003988:	7023      	strb	r3, [r4, #0]
	lin_stat.break_detected = 1;
 800398a:	7322      	strb	r2, [r4, #12]
	lin_stat.data[0] = lin_stat.data[1] = lin_stat.data[2] = lin_stat.data[3] = lin_stat.data[4] = lin_stat.data[5] = lin_stat.data[6] = lin_stat.data[7] = lin_stat.data[8] = 0;
 800398c:	72a3      	strb	r3, [r4, #10]
 800398e:	7263      	strb	r3, [r4, #9]
 8003990:	7223      	strb	r3, [r4, #8]
 8003992:	71e3      	strb	r3, [r4, #7]
 8003994:	71a3      	strb	r3, [r4, #6]
 8003996:	7163      	strb	r3, [r4, #5]
 8003998:	7123      	strb	r3, [r4, #4]
 800399a:	70e3      	strb	r3, [r4, #3]
 800399c:	70a3      	strb	r3, [r4, #2]
	lin_stat.pid = 0;
 800399e:	7063      	strb	r3, [r4, #1]
}
 80039a0:	bd10      	pop	{r4, pc}
 80039a2:	bf00      	nop
 80039a4:	20001908 	.word	0x20001908

080039a8 <lin_idle_detect>:

void lin_idle_detect(void)
{
 80039a8:	b510      	push	{r4, lr}
	if(lin_stat.byte_cnt > 0)
 80039aa:	4c04      	ldr	r4, [pc, #16]	; (80039bc <lin_idle_detect+0x14>)
 80039ac:	7823      	ldrb	r3, [r4, #0]
 80039ae:	b10b      	cbz	r3, 80039b4 <lin_idle_detect+0xc>
		lin_msg_received();
 80039b0:	f7ff ffba 	bl	8003928 <lin_msg_received>
	lin_stat.break_detected = 0;
 80039b4:	2300      	movs	r3, #0
 80039b6:	7323      	strb	r3, [r4, #12]
}
 80039b8:	bd10      	pop	{r4, pc}
 80039ba:	bf00      	nop
 80039bc:	20001908 	.word	0x20001908

080039c0 <lin_fault_detect>:

void lin_fault_detect(void)
{
	lin_stat.break_detected = 0;
 80039c0:	2200      	movs	r2, #0
 80039c2:	4b02      	ldr	r3, [pc, #8]	; (80039cc <lin_fault_detect+0xc>)
 80039c4:	731a      	strb	r2, [r3, #12]
	lin_stat.byte_cnt = 0;
 80039c6:	701a      	strb	r2, [r3, #0]
}
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	20001908 	.word	0x20001908

080039d0 <lin_add_slave_msg>:
	}

}

HAL_StatusTypeDef lin_add_slave_msg(uint8_t pid, uint8_t * buf, uint8_t len)
{
 80039d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039d2:	2300      	movs	r3, #0
	uint8_t buf_item_numb = LIN_SLAVE_BUF_LEN;
	for(uint8_t i = 0; i < LIN_SLAVE_BUF_LEN; i++) 	// find same pid
	{
		if(lin_slave_buf[i].pid == pid)
 80039d4:	260b      	movs	r6, #11
 80039d6:	4d17      	ldr	r5, [pc, #92]	; (8003a34 <lin_add_slave_msg+0x64>)
 80039d8:	fb06 f703 	mul.w	r7, r6, r3
 80039dc:	5d7f      	ldrb	r7, [r7, r5]
 80039de:	b2dc      	uxtb	r4, r3
 80039e0:	4287      	cmp	r7, r0
 80039e2:	d00e      	beq.n	8003a02 <lin_add_slave_msg+0x32>
	for(uint8_t i = 0; i < LIN_SLAVE_BUF_LEN; i++) 	// find same pid
 80039e4:	3301      	adds	r3, #1
 80039e6:	2b20      	cmp	r3, #32
 80039e8:	d1f6      	bne.n	80039d8 <lin_add_slave_msg+0x8>
 80039ea:	2300      	movs	r3, #0
	}
	if(buf_item_numb == LIN_SLAVE_BUF_LEN)			// else find empty item
	{
		for(uint8_t i = 0; i < LIN_SLAVE_BUF_LEN; i++)
		{
			if(lin_slave_buf[i].pid == 0)
 80039ec:	260b      	movs	r6, #11
 80039ee:	fb06 f703 	mul.w	r7, r6, r3
 80039f2:	5def      	ldrb	r7, [r5, r7]
 80039f4:	b2dc      	uxtb	r4, r3
 80039f6:	b127      	cbz	r7, 8003a02 <lin_add_slave_msg+0x32>
		for(uint8_t i = 0; i < LIN_SLAVE_BUF_LEN; i++)
 80039f8:	3301      	adds	r3, #1
 80039fa:	2b20      	cmp	r3, #32
 80039fc:	d1f7      	bne.n	80039ee <lin_add_slave_msg+0x1e>
		lin_slave_buf[buf_item_numb].buf[6] = buf[6];
		lin_slave_buf[buf_item_numb].buf[7] = buf[7];
		lin_slave_buf[buf_item_numb].buf[8] = buf[8];
		return HAL_OK;
	}
	return HAL_BUSY;
 80039fe:	2002      	movs	r0, #2
}
 8003a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		lin_slave_buf[buf_item_numb].pid = pid;
 8003a02:	230b      	movs	r3, #11
 8003a04:	435c      	muls	r4, r3
 8003a06:	192b      	adds	r3, r5, r4
 8003a08:	5528      	strb	r0, [r5, r4]
		lin_slave_buf[buf_item_numb].len = len;
 8003a0a:	729a      	strb	r2, [r3, #10]
		lin_slave_buf[buf_item_numb].buf[0] = buf[0];
 8003a0c:	780a      	ldrb	r2, [r1, #0]
		return HAL_OK;
 8003a0e:	2000      	movs	r0, #0
		lin_slave_buf[buf_item_numb].buf[0] = buf[0];
 8003a10:	705a      	strb	r2, [r3, #1]
		lin_slave_buf[buf_item_numb].buf[1] = buf[1];
 8003a12:	784a      	ldrb	r2, [r1, #1]
 8003a14:	709a      	strb	r2, [r3, #2]
		lin_slave_buf[buf_item_numb].buf[2] = buf[2];
 8003a16:	788a      	ldrb	r2, [r1, #2]
 8003a18:	70da      	strb	r2, [r3, #3]
		lin_slave_buf[buf_item_numb].buf[3] = buf[3];
 8003a1a:	78ca      	ldrb	r2, [r1, #3]
 8003a1c:	711a      	strb	r2, [r3, #4]
		lin_slave_buf[buf_item_numb].buf[4] = buf[4];
 8003a1e:	790a      	ldrb	r2, [r1, #4]
 8003a20:	715a      	strb	r2, [r3, #5]
		lin_slave_buf[buf_item_numb].buf[5] = buf[5];
 8003a22:	794a      	ldrb	r2, [r1, #5]
 8003a24:	719a      	strb	r2, [r3, #6]
		lin_slave_buf[buf_item_numb].buf[6] = buf[6];
 8003a26:	798a      	ldrb	r2, [r1, #6]
 8003a28:	71da      	strb	r2, [r3, #7]
		lin_slave_buf[buf_item_numb].buf[7] = buf[7];
 8003a2a:	79ca      	ldrb	r2, [r1, #7]
 8003a2c:	721a      	strb	r2, [r3, #8]
		lin_slave_buf[buf_item_numb].buf[8] = buf[8];
 8003a2e:	7a0a      	ldrb	r2, [r1, #8]
 8003a30:	725a      	strb	r2, [r3, #9]
		return HAL_OK;
 8003a32:	e7e5      	b.n	8003a00 <lin_add_slave_msg+0x30>
 8003a34:	200017a8 	.word	0x200017a8

08003a38 <lin_check_slave_answer>:

boolean lin_check_slave_answer(uint8_t pid)
{
 8003a38:	b538      	push	{r3, r4, r5, lr}
 8003a3a:	220b      	movs	r2, #11
 8003a3c:	2300      	movs	r3, #0
	for(uint8_t i = 0; i < LIN_SLAVE_BUF_LEN; i++)
	{
		if(lin_slave_buf[i].pid == pid)
 8003a3e:	4c0b      	ldr	r4, [pc, #44]	; (8003a6c <lin_check_slave_answer+0x34>)
 8003a40:	fb02 f503 	mul.w	r5, r2, r3
 8003a44:	5d29      	ldrb	r1, [r5, r4]
 8003a46:	4281      	cmp	r1, r0
 8003a48:	d10b      	bne.n	8003a62 <lin_check_slave_answer+0x2a>
		{
			DISABLE_SLAVE;
			SEND_LIN(huart_lin, lin_slave_buf[i].buf, lin_slave_buf[i].len);
 8003a4a:	1963      	adds	r3, r4, r5
 8003a4c:	7a9a      	ldrb	r2, [r3, #10]
 8003a4e:	4b08      	ldr	r3, [pc, #32]	; (8003a70 <lin_check_slave_answer+0x38>)
 8003a50:	1c69      	adds	r1, r5, #1
 8003a52:	6818      	ldr	r0, [r3, #0]
 8003a54:	4421      	add	r1, r4
 8003a56:	f7fe fa43 	bl	8001ee0 <HAL_UART_Transmit_DMA>
			lin_slave_buf[i].pid = 0;
 8003a5a:	2300      	movs	r3, #0
			return true;
 8003a5c:	2001      	movs	r0, #1
			lin_slave_buf[i].pid = 0;
 8003a5e:	5563      	strb	r3, [r4, r5]
		}
	}
	return false;
}
 8003a60:	bd38      	pop	{r3, r4, r5, pc}
	for(uint8_t i = 0; i < LIN_SLAVE_BUF_LEN; i++)
 8003a62:	3301      	adds	r3, #1
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d1eb      	bne.n	8003a40 <lin_check_slave_answer+0x8>
	return false;
 8003a68:	2000      	movs	r0, #0
 8003a6a:	e7f9      	b.n	8003a60 <lin_check_slave_answer+0x28>
 8003a6c:	200017a8 	.word	0x200017a8
 8003a70:	200019d8 	.word	0x200019d8

08003a74 <lin_byte_received>:
{
 8003a74:	b510      	push	{r4, lr}
	if(lin_stat.break_detected)
 8003a76:	4c13      	ldr	r4, [pc, #76]	; (8003ac4 <lin_byte_received+0x50>)
 8003a78:	7b23      	ldrb	r3, [r4, #12]
 8003a7a:	b18b      	cbz	r3, 8003aa0 <lin_byte_received+0x2c>
		switch(lin_stat.byte_cnt)
 8003a7c:	7823      	ldrb	r3, [r4, #0]
 8003a7e:	2b0a      	cmp	r3, #10
 8003a80:	d80e      	bhi.n	8003aa0 <lin_byte_received+0x2c>
 8003a82:	e8df f003 	tbb	[pc, r3]
 8003a86:	0e06      	.short	0x0e06
 8003a88:	15151515 	.word	0x15151515
 8003a8c:	15151515 	.word	0x15151515
 8003a90:	18          	.byte	0x18
 8003a91:	00          	.byte	0x00
			if(byte == 0x55)
 8003a92:	2855      	cmp	r0, #85	; 0x55
 8003a94:	d102      	bne.n	8003a9c <lin_byte_received+0x28>
				lin_stat.byte_cnt++;
 8003a96:	2301      	movs	r3, #1
			lin_stat.byte_cnt++;
 8003a98:	7023      	strb	r3, [r4, #0]
			break;
 8003a9a:	e001      	b.n	8003aa0 <lin_byte_received+0x2c>
				lin_stat.break_detected = 0;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	7323      	strb	r3, [r4, #12]
}
 8003aa0:	bd10      	pop	{r4, pc}
			lin_stat.byte_cnt++;
 8003aa2:	2302      	movs	r3, #2
			lin_stat.pid = byte;
 8003aa4:	7060      	strb	r0, [r4, #1]
			lin_stat.byte_cnt++;
 8003aa6:	7023      	strb	r3, [r4, #0]
			lin_stat.transmiting = lin_check_slave_answer(lin_stat.pid);
 8003aa8:	f7ff ffc6 	bl	8003a38 <lin_check_slave_answer>
 8003aac:	7360      	strb	r0, [r4, #13]
			break;
 8003aae:	e7f7      	b.n	8003aa0 <lin_byte_received+0x2c>
			lin_stat.data[lin_stat.byte_cnt-2] = byte;
 8003ab0:	54e0      	strb	r0, [r4, r3]
			lin_stat.byte_cnt++;
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	e7f0      	b.n	8003a98 <lin_byte_received+0x24>
			lin_stat.byte_cnt++;
 8003ab6:	230b      	movs	r3, #11
			lin_stat.data[8] = byte;
 8003ab8:	72a0      	strb	r0, [r4, #10]
			lin_stat.byte_cnt++;
 8003aba:	7023      	strb	r3, [r4, #0]
}
 8003abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			lin_msg_received();
 8003ac0:	f7ff bf32 	b.w	8003928 <lin_msg_received>
 8003ac4:	20001908 	.word	0x20001908

08003ac8 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8003ac8:	b508      	push	{r3, lr}

  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 16;
 8003aca:	2310      	movs	r3, #16
  hcan.Instance = CAN1;
 8003acc:	4809      	ldr	r0, [pc, #36]	; (8003af4 <MX_CAN_Init+0x2c>)
  hcan.Init.Prescaler = 16;
 8003ace:	4a0a      	ldr	r2, [pc, #40]	; (8003af8 <MX_CAN_Init+0x30>)
 8003ad0:	e9c0 2300 	strd	r2, r3, [r0]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8003ad4:	2300      	movs	r3, #0
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
  hcan.Init.TimeTriggeredMode = DISABLE;
 8003ad6:	6183      	str	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = DISABLE;
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8003ad8:	8383      	strh	r3, [r0, #28]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003ada:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003ade:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hcan.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8003ae2:	f7fc fe89 	bl	80007f8 <HAL_CAN_Init>
 8003ae6:	b118      	cbz	r0, 8003af0 <MX_CAN_Init+0x28>
  {
    Error_Handler();
  }

}
 8003ae8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003aec:	f000 baa8 	b.w	8004040 <Error_Handler>
}
 8003af0:	bd08      	pop	{r3, pc}
 8003af2:	bf00      	nop
 8003af4:	20001918 	.word	0x20001918
 8003af8:	40006400 	.word	0x40006400

08003afc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8003afc:	b510      	push	{r4, lr}
 8003afe:	4604      	mov	r4, r0
 8003b00:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b02:	2210      	movs	r2, #16
 8003b04:	2100      	movs	r1, #0
 8003b06:	a802      	add	r0, sp, #8
 8003b08:	f000 fda2 	bl	8004650 <memset>
  if(canHandle->Instance==CAN1)
 8003b0c:	6822      	ldr	r2, [r4, #0]
 8003b0e:	4b1e      	ldr	r3, [pc, #120]	; (8003b88 <HAL_CAN_MspInit+0x8c>)
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d136      	bne.n	8003b82 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003b14:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8003b18:	69da      	ldr	r2, [r3, #28]
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b1a:	481c      	ldr	r0, [pc, #112]	; (8003b8c <HAL_CAN_MspInit+0x90>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003b1c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003b20:	61da      	str	r2, [r3, #28]
 8003b22:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b24:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003b26:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8003b2a:	9200      	str	r2, [sp, #0]
 8003b2c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b2e:	699a      	ldr	r2, [r3, #24]
 8003b30:	f042 0208 	orr.w	r2, r2, #8
 8003b34:	619a      	str	r2, [r3, #24]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	f003 0308 	and.w	r3, r3, #8
 8003b3c:	9301      	str	r3, [sp, #4]
 8003b3e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003b40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b44:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b46:	f7fd fb91 	bl	800126c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b4e:	2302      	movs	r3, #2
 8003b50:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b54:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b56:	480d      	ldr	r0, [pc, #52]	; (8003b8c <HAL_CAN_MspInit+0x90>)
 8003b58:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b5a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b5c:	f7fd fb86 	bl	800126c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8003b60:	4a0b      	ldr	r2, [pc, #44]	; (8003b90 <HAL_CAN_MspInit+0x94>)

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003b62:	2014      	movs	r0, #20
    __HAL_AFIO_REMAP_CAN1_2();
 8003b64:	6853      	ldr	r3, [r2, #4]
 8003b66:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8003b6a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003b6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b72:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003b74:	2200      	movs	r2, #0
 8003b76:	4611      	mov	r1, r2
 8003b78:	f7fd f9a6 	bl	8000ec8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003b7c:	2014      	movs	r0, #20
 8003b7e:	f7fd f9d5 	bl	8000f2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8003b82:	b006      	add	sp, #24
 8003b84:	bd10      	pop	{r4, pc}
 8003b86:	bf00      	nop
 8003b88:	40006400 	.word	0x40006400
 8003b8c:	40010c00 	.word	0x40010c00
 8003b90:	40010000 	.word	0x40010000

08003b94 <HAL_CAN_MspDeInit>:

void HAL_CAN_MspDeInit(CAN_HandleTypeDef* canHandle)
{
 8003b94:	b508      	push	{r3, lr}

  if(canHandle->Instance==CAN1)
 8003b96:	6802      	ldr	r2, [r0, #0]
 8003b98:	4b09      	ldr	r3, [pc, #36]	; (8003bc0 <HAL_CAN_MspDeInit+0x2c>)
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d10e      	bne.n	8003bbc <HAL_CAN_MspDeInit+0x28>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 8003b9e:	4a09      	ldr	r2, [pc, #36]	; (8003bc4 <HAL_CAN_MspDeInit+0x30>)

    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8003ba0:	4809      	ldr	r0, [pc, #36]	; (8003bc8 <HAL_CAN_MspDeInit+0x34>)
    __HAL_RCC_CAN1_CLK_DISABLE();
 8003ba2:	69d3      	ldr	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8003ba4:	f44f 7140 	mov.w	r1, #768	; 0x300
    __HAL_RCC_CAN1_CLK_DISABLE();
 8003ba8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003bac:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8003bae:	f7fd fc37 	bl	8001420 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USB_LP_CAN1_RX0_IRQn);
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }
}
 8003bb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003bb6:	2014      	movs	r0, #20
 8003bb8:	f7fd b9c6 	b.w	8000f48 <HAL_NVIC_DisableIRQ>
}
 8003bbc:	bd08      	pop	{r3, pc}
 8003bbe:	bf00      	nop
 8003bc0:	40006400 	.word	0x40006400
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	40010c00 	.word	0x40010c00

08003bcc <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003bcc:	4b12      	ldr	r3, [pc, #72]	; (8003c18 <MX_DMA_Init+0x4c>)
{
 8003bce:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003bd0:	695a      	ldr	r2, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 8003bd2:	2102      	movs	r1, #2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003bd4:	f042 0201 	orr.w	r2, r2, #1
 8003bd8:	615a      	str	r2, [r3, #20]
 8003bda:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 8003bdc:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 8003be4:	200c      	movs	r0, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003be6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 8003be8:	f7fd f96e 	bl	8000ec8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003bec:	200c      	movs	r0, #12
 8003bee:	f7fd f99d 	bl	8000f2c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 2, 0);
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	2102      	movs	r1, #2
 8003bf6:	200e      	movs	r0, #14
 8003bf8:	f7fd f966 	bl	8000ec8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003bfc:	200e      	movs	r0, #14
 8003bfe:	f7fd f995 	bl	8000f2c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 2, 0);
 8003c02:	2200      	movs	r2, #0
 8003c04:	2102      	movs	r1, #2
 8003c06:	2011      	movs	r0, #17
 8003c08:	f7fd f95e 	bl	8000ec8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8003c0c:	2011      	movs	r0, #17

}
 8003c0e:	b003      	add	sp, #12
 8003c10:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8003c14:	f7fd b98a 	b.w	8000f2c <HAL_NVIC_EnableIRQ>
 8003c18:	40021000 	.word	0x40021000

08003c1c <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

}
 8003c1c:	4770      	bx	lr
	...

08003c20 <UART_Check_Data_Ready>:
/* USER CODE BEGIN 0 */
uint8_t txt_hallo[] = "CAN temperature logger\r\n";
uint8_t timestamp[] = "1234567890";

void UART_Check_Data_Ready(void)
{
 8003c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(uart_answ_ready == 1)
 8003c22:	4c26      	ldr	r4, [pc, #152]	; (8003cbc <UART_Check_Data_Ready+0x9c>)
 8003c24:	7825      	ldrb	r5, [r4, #0]
 8003c26:	2d01      	cmp	r5, #1
 8003c28:	d112      	bne.n	8003c50 <UART_Check_Data_Ready+0x30>
	{
		for(int i = 0; i < uart_tx_pointer; i++)
 8003c2a:	4e25      	ldr	r6, [pc, #148]	; (8003cc0 <UART_Check_Data_Ready+0xa0>)
		{
			uart_tx_bufer[i] = uart_tx_com_bufer[i];
 8003c2c:	4925      	ldr	r1, [pc, #148]	; (8003cc4 <UART_Check_Data_Ready+0xa4>)
		for(int i = 0; i < uart_tx_pointer; i++)
 8003c2e:	6837      	ldr	r7, [r6, #0]
			uart_tx_bufer[i] = uart_tx_com_bufer[i];
 8003c30:	4825      	ldr	r0, [pc, #148]	; (8003cc8 <UART_Check_Data_Ready+0xa8>)
 8003c32:	463a      	mov	r2, r7
 8003c34:	f000 fcfe 	bl	8004634 <memcpy>
		}
		HAL_UART_Transmit_DMA(huart_active, uart_tx_bufer, uart_tx_pointer);
 8003c38:	4b24      	ldr	r3, [pc, #144]	; (8003ccc <UART_Check_Data_Ready+0xac>)
 8003c3a:	b2ba      	uxth	r2, r7
 8003c3c:	6818      	ldr	r0, [r3, #0]
 8003c3e:	4922      	ldr	r1, [pc, #136]	; (8003cc8 <UART_Check_Data_Ready+0xa8>)
 8003c40:	f7fe f94e 	bl	8001ee0 <HAL_UART_Transmit_DMA>
		uart_tx_pointer = 0;
 8003c44:	2300      	movs	r3, #0
		uart_busy = 1;
 8003c46:	4a22      	ldr	r2, [pc, #136]	; (8003cd0 <UART_Check_Data_Ready+0xb0>)
		uart_tx_pointer = 0;
 8003c48:	6033      	str	r3, [r6, #0]
		uart_busy = 1;
 8003c4a:	7015      	strb	r5, [r2, #0]
		uart_answ_ready = 0;
 8003c4c:	7023      	strb	r3, [r4, #0]
					uart_tx_pointer = 0;
					uart_busy = 1;
				}
	}

}
 8003c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(conf.state == LAWICEL_CONNECT || conf.state == SAVVYCAN_CONNECT)
 8003c50:	4d20      	ldr	r5, [pc, #128]	; (8003cd4 <UART_Check_Data_Ready+0xb4>)
 8003c52:	782b      	ldrb	r3, [r5, #0]
 8003c54:	3b01      	subs	r3, #1
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d805      	bhi.n	8003c66 <UART_Check_Data_Ready+0x46>
			if(CAN_Buffer_pull() == HAL_OK)
 8003c5a:	f7fe fbdf 	bl	800241c <CAN_Buffer_pull>
 8003c5e:	b910      	cbnz	r0, 8003c66 <UART_Check_Data_Ready+0x46>
				uart_busy = 1;
 8003c60:	2201      	movs	r2, #1
 8003c62:	4b1b      	ldr	r3, [pc, #108]	; (8003cd0 <UART_Check_Data_Ready+0xb0>)
 8003c64:	701a      	strb	r2, [r3, #0]
		if(conf.help_print)
 8003c66:	7e6b      	ldrb	r3, [r5, #25]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d0f0      	beq.n	8003c4e <UART_Check_Data_Ready+0x2e>
					uart_tx_pointer = 0;
 8003c6c:	2300      	movs	r3, #0
					for(int i = conf.help_text_pointer; i < conf.help_text_pointer + 128; i++)
 8003c6e:	461a      	mov	r2, r3
					uart_tx_pointer = 0;
 8003c70:	4c13      	ldr	r4, [pc, #76]	; (8003cc0 <UART_Check_Data_Ready+0xa0>)
					for(int i = conf.help_text_pointer; i < conf.help_text_pointer + 128; i++)
 8003c72:	8b69      	ldrh	r1, [r5, #26]
 8003c74:	4818      	ldr	r0, [pc, #96]	; (8003cd8 <UART_Check_Data_Ready+0xb8>)
 8003c76:	4f14      	ldr	r7, [pc, #80]	; (8003cc8 <UART_Check_Data_Ready+0xa8>)
					uart_tx_pointer = 0;
 8003c78:	6023      	str	r3, [r4, #0]
					for(int i = conf.help_text_pointer; i < conf.help_text_pointer + 128; i++)
 8003c7a:	4408      	add	r0, r1
 8003c7c:	2a80      	cmp	r2, #128	; 0x80
 8003c7e:	d102      	bne.n	8003c86 <UART_Check_Data_Ready+0x66>
 8003c80:	b15b      	cbz	r3, 8003c9a <UART_Check_Data_Ready+0x7a>
 8003c82:	6022      	str	r2, [r4, #0]
 8003c84:	e009      	b.n	8003c9a <UART_Check_Data_Ready+0x7a>
						uart_tx_bufer[uart_tx_pointer++] = help_text[i];
 8003c86:	f810 6b01 	ldrb.w	r6, [r0], #1
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	f102 0c01 	add.w	ip, r2, #1
 8003c90:	f807 6b01 	strb.w	r6, [r7], #1
						if(help_text[i] == '\0')
 8003c94:	b97e      	cbnz	r6, 8003cb6 <UART_Check_Data_Ready+0x96>
							uart_tx_pointer--;
 8003c96:	6022      	str	r2, [r4, #0]
							conf.help_print = false;
 8003c98:	766e      	strb	r6, [r5, #25]
					HAL_UART_Transmit_DMA(huart_active, uart_tx_bufer, uart_tx_pointer);
 8003c9a:	4b0c      	ldr	r3, [pc, #48]	; (8003ccc <UART_Check_Data_Ready+0xac>)
					conf.help_text_pointer += 128;
 8003c9c:	3180      	adds	r1, #128	; 0x80
					HAL_UART_Transmit_DMA(huart_active, uart_tx_bufer, uart_tx_pointer);
 8003c9e:	8822      	ldrh	r2, [r4, #0]
 8003ca0:	6818      	ldr	r0, [r3, #0]
					conf.help_text_pointer += 128;
 8003ca2:	8369      	strh	r1, [r5, #26]
					HAL_UART_Transmit_DMA(huart_active, uart_tx_bufer, uart_tx_pointer);
 8003ca4:	4908      	ldr	r1, [pc, #32]	; (8003cc8 <UART_Check_Data_Ready+0xa8>)
 8003ca6:	f7fe f91b 	bl	8001ee0 <HAL_UART_Transmit_DMA>
					uart_tx_pointer = 0;
 8003caa:	2300      	movs	r3, #0
					uart_busy = 1;
 8003cac:	2201      	movs	r2, #1
					uart_tx_pointer = 0;
 8003cae:	6023      	str	r3, [r4, #0]
					uart_busy = 1;
 8003cb0:	4b07      	ldr	r3, [pc, #28]	; (8003cd0 <UART_Check_Data_Ready+0xb0>)
 8003cb2:	701a      	strb	r2, [r3, #0]
}
 8003cb4:	e7cb      	b.n	8003c4e <UART_Check_Data_Ready+0x2e>
						uart_tx_bufer[uart_tx_pointer++] = help_text[i];
 8003cb6:	4662      	mov	r2, ip
 8003cb8:	e7e0      	b.n	8003c7c <UART_Check_Data_Ready+0x5c>
 8003cba:	bf00      	nop
 8003cbc:	200019f0 	.word	0x200019f0
 8003cc0:	20001e9c 	.word	0x20001e9c
 8003cc4:	20001e7c 	.word	0x20001e7c
 8003cc8:	20001dfc 	.word	0x20001dfc
 8003ccc:	200019d4 	.word	0x200019d4
 8003cd0:	200019f1 	.word	0x200019f1
 8003cd4:	200019a0 	.word	0x200019a0
 8003cd8:	080046d5 	.word	0x080046d5

08003cdc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	uart_busy = 0;
 8003cdc:	2200      	movs	r2, #0
 8003cde:	4b02      	ldr	r3, [pc, #8]	; (8003ce8 <HAL_UART_TxCpltCallback+0xc>)
 8003ce0:	701a      	strb	r2, [r3, #0]
	UART_Check_Data_Ready();
 8003ce2:	f7ff bf9d 	b.w	8003c20 <UART_Check_Data_Ready>
 8003ce6:	bf00      	nop
 8003ce8:	200019f1 	.word	0x200019f1

08003cec <HAL_CAN_RxFifo1MsgPendingCallback>:
	//HAL_GPIO_WritePin(RX_LED_GPIO_Port, RX_LED_Pin, GPIO_PIN_RESET);
}

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003cec:	b570      	push	{r4, r5, r6, lr}
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &can_rx_buf[1].header, can_rx_buf[1].data_byte);
 8003cee:	4c19      	ldr	r4, [pc, #100]	; (8003d54 <HAL_CAN_RxFifo1MsgPendingCallback+0x68>)
{
 8003cf0:	b088      	sub	sp, #32
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &can_rx_buf[1].header, can_rx_buf[1].data_byte);
 8003cf2:	f104 0350 	add.w	r3, r4, #80	; 0x50
 8003cf6:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	f7fc ff24 	bl	8000b48 <HAL_CAN_GetRxMessage>
	can_rx_buf[1].timestamp = HAL_GetTick();
	can_rx_buf[1].bus = eeprom_settings.numBus;
	CAN_Buffer_Write_Data(can_rx_buf[1]);
 8003d00:	466d      	mov	r5, sp
	can_rx_buf[1].timestamp = HAL_GetTick();
 8003d02:	f7fc fd61 	bl	80007c8 <HAL_GetTick>
	can_rx_buf[1].bus = eeprom_settings.numBus;
 8003d06:	4b14      	ldr	r3, [pc, #80]	; (8003d58 <HAL_CAN_RxFifo1MsgPendingCallback+0x6c>)
	CAN_Buffer_Write_Data(can_rx_buf[1]);
 8003d08:	f104 0640 	add.w	r6, r4, #64	; 0x40
	can_rx_buf[1].bus = eeprom_settings.numBus;
 8003d0c:	7a1b      	ldrb	r3, [r3, #8]
	can_rx_buf[1].timestamp = HAL_GetTick();
 8003d0e:	6320      	str	r0, [r4, #48]	; 0x30
	can_rx_buf[1].bus = eeprom_settings.numBus;
 8003d10:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
	CAN_Buffer_Write_Data(can_rx_buf[1]);
 8003d14:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003d16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d18:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003d1c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003d20:	3430      	adds	r4, #48	; 0x30
 8003d22:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003d26:	f7fe fa43 	bl	80021b0 <CAN_Buffer_Write_Data>
	if(conf.loger_run == true)
 8003d2a:	4b0c      	ldr	r3, [pc, #48]	; (8003d5c <HAL_CAN_RxFifo1MsgPendingCallback+0x70>)
 8003d2c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d10c      	bne.n	8003d4e <HAL_CAN_RxFifo1MsgPendingCallback+0x62>
		CAN_Log_Buffer_Write_Data(can_rx_buf[1]);
 8003d34:	466d      	mov	r5, sp
 8003d36:	f104 0610 	add.w	r6, r4, #16
 8003d3a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003d3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d3e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003d42:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003d46:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003d4a:	f7fe fa5f 	bl	800220c <CAN_Log_Buffer_Write_Data>
}
 8003d4e:	b008      	add	sp, #32
 8003d50:	bd70      	pop	{r4, r5, r6, pc}
 8003d52:	bf00      	nop
 8003d54:	20001940 	.word	0x20001940
 8003d58:	20001738 	.word	0x20001738
 8003d5c:	200019a0 	.word	0x200019a0

08003d60 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003d60:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_buf[0].header, can_rx_buf[0].data_byte) != HAL_OK) return;
 8003d62:	4c19      	ldr	r4, [pc, #100]	; (8003dc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
{
 8003d64:	b089      	sub	sp, #36	; 0x24
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_buf[0].header, can_rx_buf[0].data_byte) != HAL_OK) return;
 8003d66:	f104 0620 	add.w	r6, r4, #32
 8003d6a:	4633      	mov	r3, r6
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	1d22      	adds	r2, r4, #4
 8003d70:	f7fc feea 	bl	8000b48 <HAL_CAN_GetRxMessage>
 8003d74:	bb28      	cbnz	r0, 8003dc2 <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
	can_rx_buf[0].timestamp = HAL_GetTick();
 8003d76:	f7fc fd27 	bl	80007c8 <HAL_GetTick>
	can_rx_buf[0].bus = eeprom_settings.numBus;
	CAN_Buffer_Write_Data(can_rx_buf[0]);
 8003d7a:	466d      	mov	r5, sp
	can_rx_buf[0].bus = eeprom_settings.numBus;
 8003d7c:	4b13      	ldr	r3, [pc, #76]	; (8003dcc <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
	CAN_Buffer_Write_Data(can_rx_buf[0]);
 8003d7e:	f104 0710 	add.w	r7, r4, #16
	can_rx_buf[0].bus = eeprom_settings.numBus;
 8003d82:	7a1b      	ldrb	r3, [r3, #8]
	can_rx_buf[0].timestamp = HAL_GetTick();
 8003d84:	6020      	str	r0, [r4, #0]
	can_rx_buf[0].bus = eeprom_settings.numBus;
 8003d86:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	CAN_Buffer_Write_Data(can_rx_buf[0]);
 8003d8a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003d8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d8e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003d92:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003d96:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003d9a:	f7fe fa09 	bl	80021b0 <CAN_Buffer_Write_Data>
	if(conf.loger_run == true)
 8003d9e:	4b0c      	ldr	r3, [pc, #48]	; (8003dd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8003da0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d10c      	bne.n	8003dc2 <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
		CAN_Log_Buffer_Write_Data(can_rx_buf[0]);
 8003da8:	466d      	mov	r5, sp
 8003daa:	f104 0710 	add.w	r7, r4, #16
 8003dae:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003db0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003db2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003db6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003dba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003dbe:	f7fe fa25 	bl	800220c <CAN_Log_Buffer_Write_Data>
}
 8003dc2:	b009      	add	sp, #36	; 0x24
 8003dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	20001940 	.word	0x20001940
 8003dcc:	20001738 	.word	0x20001738
 8003dd0:	200019a0 	.word	0x200019a0

08003dd4 <HAL_CAN_RxFifo0FullCallback>:

void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
	HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003dd4:	f7ff bfc4 	b.w	8003d60 <HAL_CAN_RxFifo0MsgPendingCallback>

08003dd8 <HAL_CAN_RxFifo1FullCallback>:
}

void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
	HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003dd8:	f7ff bf88 	b.w	8003cec <HAL_CAN_RxFifo1MsgPendingCallback>

08003ddc <HAL_CAN_ErrorCallback>:
}

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
	return;
}
 8003ddc:	4770      	bx	lr

08003dde <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003dde:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003de0:	2414      	movs	r4, #20
{
 8003de2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003de4:	4622      	mov	r2, r4
 8003de6:	2100      	movs	r1, #0
 8003de8:	a80c      	add	r0, sp, #48	; 0x30
 8003dea:	f000 fc31 	bl	8004650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003dee:	4622      	mov	r2, r4
 8003df0:	eb0d 0004 	add.w	r0, sp, r4
 8003df4:	2100      	movs	r1, #0
 8003df6:	f000 fc2b 	bl	8004650 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	2210      	movs	r2, #16
 8003dfe:	a801      	add	r0, sp, #4
 8003e00:	f000 fc26 	bl	8004650 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e04:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003e06:	2205      	movs	r2, #5
 8003e08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003e0c:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003e0e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003e12:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003e16:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e1a:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003e1c:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e1e:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e22:	f7fd fb77 	bl	8001514 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e26:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003e28:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e2c:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003e30:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003e32:	4629      	mov	r1, r5
 8003e34:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003e36:	e9cd 3207 	strd	r3, r2, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003e3a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003e3c:	f7fd fd40 	bl	80018c0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003e40:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e44:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003e46:	9401      	str	r4, [sp, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003e48:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e4a:	f7fd fdf5 	bl	8001a38 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8003e4e:	b015      	add	sp, #84	; 0x54
 8003e50:	bd30      	pop	{r4, r5, pc}
	...

08003e54 <main>:
{
 8003e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	CAN_Buffer_Init();
 8003e56:	f7fe f9a1 	bl	800219c <CAN_Buffer_Init>
  huart_active = &huart3;
 8003e5a:	4d69      	ldr	r5, [pc, #420]	; (8004000 <main+0x1ac>)
  HAL_Init();
 8003e5c:	f7fc fc96 	bl	800078c <HAL_Init>
  huart_active = &huart3;
 8003e60:	4b68      	ldr	r3, [pc, #416]	; (8004004 <main+0x1b0>)
  huart_lin = &huart1;
 8003e62:	4a69      	ldr	r2, [pc, #420]	; (8004008 <main+0x1b4>)
  huart_active = &huart3;
 8003e64:	601d      	str	r5, [r3, #0]
  huart_lin = &huart1;
 8003e66:	4b69      	ldr	r3, [pc, #420]	; (800400c <main+0x1b8>)
  if(eeprom_settings.version == 0xFFFF || eeprom_settings.version < EEPROM_VERSION) {eeprom_settings.version = EEPROM_VERSION;}
 8003e68:	4c69      	ldr	r4, [pc, #420]	; (8004010 <main+0x1bc>)
  huart_lin = &huart1;
 8003e6a:	601a      	str	r2, [r3, #0]
  SystemClock_Config();
 8003e6c:	f7ff ffb7 	bl	8003dde <SystemClock_Config>
  MX_GPIO_Init();
 8003e70:	f7ff fed4 	bl	8003c1c <MX_GPIO_Init>
  MX_DMA_Init();
 8003e74:	f7ff feaa 	bl	8003bcc <MX_DMA_Init>
  MX_RTC_Init();
 8003e78:	f000 f8e4 	bl	8004044 <MX_RTC_Init>
  MX_USART3_UART_Init();
 8003e7c:	f000 fa36 	bl	80042ec <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8003e80:	f000 fa18 	bl	80042b4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8003e84:	f000 f9fc 	bl	8004280 <MX_USART1_UART_Init>
  MX_CAN_Init();
 8003e88:	f7ff fe1e 	bl	8003ac8 <MX_CAN_Init>
  HAL_Delay(100);
 8003e8c:	2064      	movs	r0, #100	; 0x64
 8003e8e:	f7fc fca1 	bl	80007d4 <HAL_Delay>
  if(eeprom_settings.version == 0xFFFF || eeprom_settings.version < EEPROM_VERSION) {eeprom_settings.version = EEPROM_VERSION;}
 8003e92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e96:	8823      	ldrh	r3, [r4, #0]
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d002      	beq.n	8003ea4 <main+0x50>
 8003e9e:	8823      	ldrh	r3, [r4, #0]
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	b90b      	cbnz	r3, 8003ea8 <main+0x54>
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	8023      	strh	r3, [r4, #0]
  if(eeprom_settings.eeprom_size == 0xFFFF) {eeprom_settings.eeprom_size = EEPROM_SIZE;}
 8003ea8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003eac:	8863      	ldrh	r3, [r4, #2]
	  if(eeprom_settings.CAN_mode[i] == 0xFFFFFFFF) {eeprom_settings.CAN_mode[i] = CAN_MODE_SILENT;}
 8003eae:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  if(eeprom_settings.eeprom_size == 0xFFFF) {eeprom_settings.eeprom_size = EEPROM_SIZE;}
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	bf04      	itt	eq
 8003eb8:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 8003ebc:	8063      	strheq	r3, [r4, #2]
  if(eeprom_settings.number_of_busses == 0xFF) {eeprom_settings.number_of_busses = 4;}
 8003ebe:	7923      	ldrb	r3, [r4, #4]
  if(eeprom_settings.start_address_script == 0xFFFF) {eeprom_settings.start_address_script = EEPROM_SCRIPT_ADDR;}
 8003ec0:	f64f 72ff 	movw	r2, #65535	; 0xffff
  if(eeprom_settings.number_of_busses == 0xFF) {eeprom_settings.number_of_busses = 4;}
 8003ec4:	2bff      	cmp	r3, #255	; 0xff
 8003ec6:	bf04      	itt	eq
 8003ec8:	2304      	moveq	r3, #4
 8003eca:	7123      	strbeq	r3, [r4, #4]
  if(eeprom_settings.start_address_script == 0xFFFF) {eeprom_settings.start_address_script = EEPROM_SCRIPT_ADDR;}
 8003ecc:	88e3      	ldrh	r3, [r4, #6]
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	bf04      	itt	eq
 8003ed4:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8003ed8:	80e3      	strheq	r3, [r4, #6]
  if(eeprom_settings.numBus == 0xFF) {eeprom_settings.numBus = 0;}
 8003eda:	7a23      	ldrb	r3, [r4, #8]
 8003edc:	2bff      	cmp	r3, #255	; 0xff
 8003ede:	bf04      	itt	eq
 8003ee0:	2300      	moveq	r3, #0
 8003ee2:	7223      	strbeq	r3, [r4, #8]
  if(eeprom_settings.CAN_Speed[0] == 0xFFFFFFFF) {eeprom_settings.CAN_Speed[0] = 500000;}
 8003ee4:	68e3      	ldr	r3, [r4, #12]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	bf04      	itt	eq
 8003eea:	4b4a      	ldreq	r3, [pc, #296]	; (8004014 <main+0x1c0>)
 8003eec:	60e3      	streq	r3, [r4, #12]
  if(eeprom_settings.CAN_Speed[1] == 0xFFFFFFFF) {eeprom_settings.CAN_Speed[1] = 125000;}
 8003eee:	6923      	ldr	r3, [r4, #16]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	bf04      	itt	eq
 8003ef4:	4b48      	ldreq	r3, [pc, #288]	; (8004018 <main+0x1c4>)
 8003ef6:	6123      	streq	r3, [r4, #16]
  if(eeprom_settings.CAN_Speed[2] == 0xFFFFFFFF) {eeprom_settings.CAN_Speed[2] = 33333;}
 8003ef8:	6963      	ldr	r3, [r4, #20]
 8003efa:	3301      	adds	r3, #1
 8003efc:	bf04      	itt	eq
 8003efe:	f248 2335 	movweq	r3, #33333	; 0x8235
 8003f02:	6163      	streq	r3, [r4, #20]
  if(eeprom_settings.CAN_Speed[3] == 0xFFFFFFFF) {eeprom_settings.CAN_Speed[3] = 10417;}
 8003f04:	69a3      	ldr	r3, [r4, #24]
 8003f06:	3301      	adds	r3, #1
 8003f08:	bf04      	itt	eq
 8003f0a:	f642 03b1 	movweq	r3, #10417	; 0x28b1
 8003f0e:	61a3      	streq	r3, [r4, #24]
{
 8003f10:	2300      	movs	r3, #0
	  if(eeprom_settings.CAN_mode[i] == 0xFFFFFFFF) {eeprom_settings.CAN_mode[i] = CAN_MODE_SILENT;}
 8003f12:	f103 020c 	add.w	r2, r3, #12
 8003f16:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8003f1a:	6850      	ldr	r0, [r2, #4]
  for(int i=0; i<4;i++)
 8003f1c:	3301      	adds	r3, #1
	  if(eeprom_settings.CAN_mode[i] == 0xFFFFFFFF) {eeprom_settings.CAN_mode[i] = CAN_MODE_SILENT;}
 8003f1e:	3001      	adds	r0, #1
 8003f20:	bf08      	it	eq
 8003f22:	6051      	streq	r1, [r2, #4]
  for(int i=0; i<4;i++)
 8003f24:	2b04      	cmp	r3, #4
 8003f26:	d1f4      	bne.n	8003f12 <main+0xbe>
  if(eeprom_settings.UART_Speed == 0xFFFF) {eeprom_settings.UART_Speed = 115200;}
 8003f28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f2c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  if(HAL_GPIO_ReadPin(BOOT1_GPIO_Port, BOOT1_Pin) == 1)
 8003f2e:	2104      	movs	r1, #4
  if(eeprom_settings.UART_Speed == 0xFFFF) {eeprom_settings.UART_Speed = 115200;}
 8003f30:	429a      	cmp	r2, r3
 8003f32:	bf08      	it	eq
 8003f34:	f44f 33e1 	moveq.w	r3, #115200	; 0x1c200
  if(HAL_GPIO_ReadPin(BOOT1_GPIO_Port, BOOT1_Pin) == 1)
 8003f38:	4838      	ldr	r0, [pc, #224]	; (800401c <main+0x1c8>)
  if(eeprom_settings.UART_Speed == 0xFFFF) {eeprom_settings.UART_Speed = 115200;}
 8003f3a:	bf08      	it	eq
 8003f3c:	65e3      	streq	r3, [r4, #92]	; 0x5c
  if(HAL_GPIO_ReadPin(BOOT1_GPIO_Port, BOOT1_Pin) == 1)
 8003f3e:	f7fd fadd 	bl	80014fc <HAL_GPIO_ReadPin>
 8003f42:	2801      	cmp	r0, #1
 8003f44:	d102      	bne.n	8003f4c <main+0xf8>
	  huart3.Init.BaudRate = (eeprom_settings.UART_Speed > 0 && eeprom_settings.UART_Speed < 10000000) ? eeprom_settings.UART_Speed : 115200;
 8003f46:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003f4a:	e007      	b.n	8003f5c <main+0x108>
 8003f4c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d0f9      	beq.n	8003f46 <main+0xf2>
 8003f52:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003f54:	4b32      	ldr	r3, [pc, #200]	; (8004020 <main+0x1cc>)
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d2f5      	bcs.n	8003f46 <main+0xf2>
 8003f5a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  HAL_UART_Init(&huart3);
 8003f5c:	4828      	ldr	r0, [pc, #160]	; (8004000 <main+0x1ac>)
	  huart3.Init.BaudRate = (eeprom_settings.UART_Speed > 0 && eeprom_settings.UART_Speed < 10000000) ? eeprom_settings.UART_Speed : 115200;
 8003f5e:	606b      	str	r3, [r5, #4]
  HAL_UART_Init(&huart3);
 8003f60:	f7fd ff3c 	bl	8001ddc <HAL_UART_Init>
  conf.script_run = true;
 8003f64:	2201      	movs	r2, #1
 8003f66:	4b2f      	ldr	r3, [pc, #188]	; (8004024 <main+0x1d0>)
	  while(uart_rx_pointer_r != uart_rx_pointer_w) // Buffer UART RX reading
 8003f68:	4e2f      	ldr	r6, [pc, #188]	; (8004028 <main+0x1d4>)
  conf.script_run = true;
 8003f6a:	721a      	strb	r2, [r3, #8]
  conf.scpipt_saving = false;
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	71da      	strb	r2, [r3, #7]
  conf.script_address = eeprom_settings.start_address_script;
 8003f70:	88e2      	ldrh	r2, [r4, #6]
	  while(uart_rx_pointer_r != uart_rx_pointer_w) // Buffer UART RX reading
 8003f72:	4f2e      	ldr	r7, [pc, #184]	; (800402c <main+0x1d8>)
  conf.script_address = eeprom_settings.start_address_script;
 8003f74:	815a      	strh	r2, [r3, #10]
  conf.script_loop_address = 0xFFFF;
 8003f76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f7a:	819a      	strh	r2, [r3, #12]
  Change_CAN_channel();
 8003f7c:	f7fe fafe 	bl	800257c <Change_CAN_channel>
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_ERR);
 8003f80:	682b      	ldr	r3, [r5, #0]
		if(HAL_GetTick() - time_stamp_UART >= 20 && uart_busy == 0)
 8003f82:	4d2b      	ldr	r5, [pc, #172]	; (8004030 <main+0x1dc>)
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_ERR);
 8003f84:	695a      	ldr	r2, [r3, #20]
 8003f86:	f042 0201 	orr.w	r2, r2, #1
 8003f8a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8003f8c:	68da      	ldr	r2, [r3, #12]
 8003f8e:	f042 0220 	orr.w	r2, r2, #32
 8003f92:	60da      	str	r2, [r3, #12]
	  while(uart_rx_pointer_r != uart_rx_pointer_w) // Buffer UART RX reading
 8003f94:	6833      	ldr	r3, [r6, #0]
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d128      	bne.n	8003fee <main+0x19a>
		if(HAL_GetTick() - time_stamp_UART >= 20 && uart_busy == 0)
 8003f9c:	f7fc fc14 	bl	80007c8 <HAL_GetTick>
 8003fa0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003fa4:	1a80      	subs	r0, r0, r2
 8003fa6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003faa:	2814      	cmp	r0, #20
 8003fac:	f173 0300 	sbcs.w	r3, r3, #0
 8003fb0:	d30a      	bcc.n	8003fc8 <main+0x174>
 8003fb2:	4b20      	ldr	r3, [pc, #128]	; (8004034 <main+0x1e0>)
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8003fba:	b92b      	cbnz	r3, 8003fc8 <main+0x174>
			time_stamp_UART = HAL_GetTick();
 8003fbc:	f7fc fc04 	bl	80007c8 <HAL_GetTick>
 8003fc0:	e9c5 0400 	strd	r0, r4, [r5]
			UART_Check_Data_Ready();
 8003fc4:	f7ff fe2c 	bl	8003c20 <UART_Check_Data_Ready>
		if(HAL_GetTick() - time_stamp_LED >= 500)
 8003fc8:	f7fc fbfe 	bl	80007c8 <HAL_GetTick>
 8003fcc:	4c1a      	ldr	r4, [pc, #104]	; (8004038 <main+0x1e4>)
 8003fce:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003fd2:	1a80      	subs	r0, r0, r2
 8003fd4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003fd8:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8003fdc:	f173 0300 	sbcs.w	r3, r3, #0
 8003fe0:	d3d8      	bcc.n	8003f94 <main+0x140>
			time_stamp_LED = HAL_GetTick();
 8003fe2:	f7fc fbf1 	bl	80007c8 <HAL_GetTick>
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	6020      	str	r0, [r4, #0]
 8003fea:	6063      	str	r3, [r4, #4]
 8003fec:	e7d2      	b.n	8003f94 <main+0x140>
		  Check_Command(uart_rx_bufer[uart_rx_pointer_r]);
 8003fee:	4a13      	ldr	r2, [pc, #76]	; (800403c <main+0x1e8>)
		  uart_rx_pointer_r = (uart_rx_pointer_r + 1) & 1023;
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	f3c3 0309 	ubfx	r3, r3, #0, #10
		  Check_Command(uart_rx_bufer[uart_rx_pointer_r]);
 8003ff6:	5cd0      	ldrb	r0, [r2, r3]
		  uart_rx_pointer_r = (uart_rx_pointer_r + 1) & 1023;
 8003ff8:	6033      	str	r3, [r6, #0]
		  Check_Command(uart_rx_bufer[uart_rx_pointer_r]);
 8003ffa:	f7ff f90b 	bl	8003214 <Check_Command>
 8003ffe:	e7c9      	b.n	8003f94 <main+0x140>
 8004000:	20002004 	.word	0x20002004
 8004004:	200019d4 	.word	0x200019d4
 8004008:	20001f84 	.word	0x20001f84
 800400c:	200019d8 	.word	0x200019d8
 8004010:	20001738 	.word	0x20001738
 8004014:	0007a120 	.word	0x0007a120
 8004018:	0001e848 	.word	0x0001e848
 800401c:	40010c00 	.word	0x40010c00
 8004020:	00989680 	.word	0x00989680
 8004024:	200019a0 	.word	0x200019a0
 8004028:	20001df4 	.word	0x20001df4
 800402c:	20001df8 	.word	0x20001df8
 8004030:	200019e8 	.word	0x200019e8
 8004034:	200019f1 	.word	0x200019f1
 8004038:	200019e0 	.word	0x200019e0
 800403c:	200019f2 	.word	0x200019f2

08004040 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004040:	4770      	bx	lr
	...

08004044 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004044:	b508      	push	{r3, lr}

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8004046:	f04f 33ff 	mov.w	r3, #4294967295
  hrtc.Instance = RTC;
 800404a:	4807      	ldr	r0, [pc, #28]	; (8004068 <MX_RTC_Init+0x24>)
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800404c:	4a07      	ldr	r2, [pc, #28]	; (800406c <MX_RTC_Init+0x28>)
 800404e:	e9c0 2300 	strd	r2, r3, [r0]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8004052:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004056:	6083      	str	r3, [r0, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004058:	f7fd fe24 	bl	8001ca4 <HAL_RTC_Init>
 800405c:	b118      	cbz	r0, 8004066 <MX_RTC_Init+0x22>
  {
    Error_Handler();
  }

}
 800405e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004062:	f7ff bfed 	b.w	8004040 <Error_Handler>
}
 8004066:	bd08      	pop	{r3, pc}
 8004068:	20001ea0 	.word	0x20001ea0
 800406c:	40002800 	.word	0x40002800

08004070 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004070:	b507      	push	{r0, r1, r2, lr}

  if(rtcHandle->Instance==RTC)
 8004072:	4b0b      	ldr	r3, [pc, #44]	; (80040a0 <HAL_RTC_MspInit+0x30>)
 8004074:	6802      	ldr	r2, [r0, #0]
 8004076:	429a      	cmp	r2, r3
 8004078:	d10f      	bne.n	800409a <HAL_RTC_MspInit+0x2a>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800407a:	f7fd fa45 	bl	8001508 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800407e:	4b09      	ldr	r3, [pc, #36]	; (80040a4 <HAL_RTC_MspInit+0x34>)
 8004080:	69da      	ldr	r2, [r3, #28]
 8004082:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8004086:	61da      	str	r2, [r3, #28]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004088:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 800408a:	69db      	ldr	r3, [r3, #28]
 800408c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004090:	9301      	str	r3, [sp, #4]
 8004092:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 8004094:	4b04      	ldr	r3, [pc, #16]	; (80040a8 <HAL_RTC_MspInit+0x38>)
 8004096:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800409a:	b003      	add	sp, #12
 800409c:	f85d fb04 	ldr.w	pc, [sp], #4
 80040a0:	40002800 	.word	0x40002800
 80040a4:	40021000 	.word	0x40021000
 80040a8:	42420000 	.word	0x42420000

080040ac <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80040ac:	4b0e      	ldr	r3, [pc, #56]	; (80040e8 <HAL_MspInit+0x3c>)
{
 80040ae:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80040b0:	699a      	ldr	r2, [r3, #24]
 80040b2:	f042 0201 	orr.w	r2, r2, #1
 80040b6:	619a      	str	r2, [r3, #24]
 80040b8:	699a      	ldr	r2, [r3, #24]
 80040ba:	f002 0201 	and.w	r2, r2, #1
 80040be:	9200      	str	r2, [sp, #0]
 80040c0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040c2:	69da      	ldr	r2, [r3, #28]
 80040c4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80040c8:	61da      	str	r2, [r3, #28]
 80040ca:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80040cc:	4a07      	ldr	r2, [pc, #28]	; (80040ec <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80040ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d2:	9301      	str	r3, [sp, #4]
 80040d4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80040d6:	6853      	ldr	r3, [r2, #4]
 80040d8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80040dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80040e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040e2:	b002      	add	sp, #8
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	40021000 	.word	0x40021000
 80040ec:	40010000 	.word	0x40010000

080040f0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80040f0:	4770      	bx	lr

080040f2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040f2:	e7fe      	b.n	80040f2 <HardFault_Handler>

080040f4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040f4:	e7fe      	b.n	80040f4 <MemManage_Handler>

080040f6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040f6:	e7fe      	b.n	80040f6 <BusFault_Handler>

080040f8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040f8:	e7fe      	b.n	80040f8 <UsageFault_Handler>

080040fa <SVC_Handler>:
 80040fa:	4770      	bx	lr

080040fc <DebugMon_Handler>:
 80040fc:	4770      	bx	lr

080040fe <PendSV_Handler>:
 80040fe:	4770      	bx	lr

08004100 <SysTick_Handler>:
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8004100:	4a0c      	ldr	r2, [pc, #48]	; (8004134 <SysTick_Handler+0x34>)
 8004102:	7813      	ldrb	r3, [r2, #0]
 8004104:	3301      	adds	r3, #1
 8004106:	b2db      	uxtb	r3, r3
 8004108:	7013      	strb	r3, [r2, #0]
	if(FatFsCnt >= 10)
 800410a:	7813      	ldrb	r3, [r2, #0]
 800410c:	2b09      	cmp	r3, #9
 800410e:	d90f      	bls.n	8004130 <SysTick_Handler+0x30>
	{
		FatFsCnt = 0;
 8004110:	2300      	movs	r3, #0
 8004112:	7013      	strb	r3, [r2, #0]
		if(Timer1 > 0)
 8004114:	4a08      	ldr	r2, [pc, #32]	; (8004138 <SysTick_Handler+0x38>)
 8004116:	7813      	ldrb	r3, [r2, #0]
 8004118:	b11b      	cbz	r3, 8004122 <SysTick_Handler+0x22>
			Timer1--;
 800411a:	7813      	ldrb	r3, [r2, #0]
 800411c:	3b01      	subs	r3, #1
 800411e:	b2db      	uxtb	r3, r3
 8004120:	7013      	strb	r3, [r2, #0]

		if(Timer2 > 0)
 8004122:	4a06      	ldr	r2, [pc, #24]	; (800413c <SysTick_Handler+0x3c>)
 8004124:	7813      	ldrb	r3, [r2, #0]
 8004126:	b11b      	cbz	r3, 8004130 <SysTick_Handler+0x30>
			Timer2--;
 8004128:	7813      	ldrb	r3, [r2, #0]
 800412a:	3b01      	subs	r3, #1
 800412c:	b2db      	uxtb	r3, r3
 800412e:	7013      	strb	r3, [r2, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004130:	f7fc bb3e 	b.w	80007b0 <HAL_IncTick>
 8004134:	20001eb4 	.word	0x20001eb4
 8004138:	20001eb5 	.word	0x20001eb5
 800413c:	20001eb6 	.word	0x20001eb6

08004140 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004140:	4801      	ldr	r0, [pc, #4]	; (8004148 <DMA1_Channel2_IRQHandler+0x8>)
 8004142:	f7fd b801 	b.w	8001148 <HAL_DMA_IRQHandler>
 8004146:	bf00      	nop
 8004148:	20001f40 	.word	0x20001f40

0800414c <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800414c:	4801      	ldr	r0, [pc, #4]	; (8004154 <DMA1_Channel4_IRQHandler+0x8>)
 800414e:	f7fc bffb 	b.w	8001148 <HAL_DMA_IRQHandler>
 8004152:	bf00      	nop
 8004154:	20001eb8 	.word	0x20001eb8

08004158 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004158:	4801      	ldr	r0, [pc, #4]	; (8004160 <DMA1_Channel7_IRQHandler+0x8>)
 800415a:	f7fc bff5 	b.w	8001148 <HAL_DMA_IRQHandler>
 800415e:	bf00      	nop
 8004160:	20001efc 	.word	0x20001efc

08004164 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8004164:	4801      	ldr	r0, [pc, #4]	; (800416c <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8004166:	f7fc bd7c 	b.w	8000c62 <HAL_CAN_IRQHandler>
 800416a:	bf00      	nop
 800416c:	20001918 	.word	0x20001918

08004170 <USART1_IRQHandler>:
  /* USER CODE BEGIN USART1_IRQn 0 */
//  recieve LIN message
	uint32_t errorflags = 0x00U;


	if(USART1->SR & (uint32_t)USART_SR_IDLE) // Idle detect
 8004170:	4b14      	ldr	r3, [pc, #80]	; (80041c4 <USART1_IRQHandler+0x54>)
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	06d2      	lsls	r2, r2, #27
 8004176:	d504      	bpl.n	8004182 <USART1_IRQHandler+0x12>
	{
		uart_rx_char = USART1->DR; // Lost char
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	4b13      	ldr	r3, [pc, #76]	; (80041c8 <USART1_IRQHandler+0x58>)
 800417c:	701a      	strb	r2, [r3, #0]
//			can_msg_t temp_msg;
//			temp_msg = Parse_LIN_msg(buffer, byte_cnt-1);
//			CAN_Buffer_Write_Data(temp_msg);
//			CAN_Log_Buffer_Write_Data(temp_msg);
//		}
		lin_idle_detect();
 800417e:	f7ff bc13 	b.w	80039a8 <lin_idle_detect>
		return;
	}
	if(USART1->SR & (uint32_t)USART_SR_LBD) // Break detect
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	f412 7f80 	tst.w	r2, #256	; 0x100
//			can_msg_t temp_msg;
//			temp_msg = Parse_LIN_msg(buffer, byte_cnt-1);
//			CAN_Buffer_Write_Data(temp_msg);
//			CAN_Log_Buffer_Write_Data(temp_msg);
//		}
		USART1->SR &= ~(uint32_t)USART_SR_LBD;
 8004188:	681a      	ldr	r2, [r3, #0]
	if(USART1->SR & (uint32_t)USART_SR_LBD) // Break detect
 800418a:	d007      	beq.n	800419c <USART1_IRQHandler+0x2c>
		USART1->SR &= ~(uint32_t)USART_SR_LBD;
 800418c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004190:	601a      	str	r2, [r3, #0]
		uart_rx_char = USART1->DR; // Lost char
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	4b0c      	ldr	r3, [pc, #48]	; (80041c8 <USART1_IRQHandler+0x58>)
 8004196:	701a      	strb	r2, [r3, #0]
//		byte_cnt = 0;
//		buffer[0] = buffer[1] = buffer[2] = buffer[3] = buffer[4] = buffer[5] = buffer[6] = buffer[7] = buffer[8] = 0;
		lin_break_detect();
 8004198:	f7ff bbee 	b.w	8003978 <lin_break_detect>
		return;
	}
	/* If no error occurs */
	errorflags = (USART1->SR & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
	if(errorflags == 0)
 800419c:	0710      	lsls	r0, r2, #28
 800419e:	d109      	bne.n	80041b4 <USART1_IRQHandler+0x44>
	{
		/* UART in mode Receiver -------------------------------------------------*/
		if(((USART1->SR & USART_SR_RXNE) != 0)
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	0691      	lsls	r1, r2, #26
 80041a4:	d50b      	bpl.n	80041be <USART1_IRQHandler+0x4e>
				&& ((USART1->CR1 & USART_CR1_RXNEIE) != 0))
 80041a6:	68da      	ldr	r2, [r3, #12]
 80041a8:	0692      	lsls	r2, r2, #26
 80041aa:	d508      	bpl.n	80041be <USART1_IRQHandler+0x4e>
		{
			lin_byte_received(USART1->DR);
 80041ac:	6858      	ldr	r0, [r3, #4]
 80041ae:	b2c0      	uxtb	r0, r0
 80041b0:	f7ff bc60 	b.w	8003a74 <lin_byte_received>
			return;
		}
	}
	else
	{
		uart_rx_char = USART1->DR; // Lost char
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	4b04      	ldr	r3, [pc, #16]	; (80041c8 <USART1_IRQHandler+0x58>)
 80041b8:	701a      	strb	r2, [r3, #0]
		lin_fault_detect();
 80041ba:	f7ff bc01 	b.w	80039c0 <lin_fault_detect>
//		byte_cnt = 0xFF;
		return;
	}

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80041be:	4803      	ldr	r0, [pc, #12]	; (80041cc <USART1_IRQHandler+0x5c>)
 80041c0:	f7fd bf44 	b.w	800204c <HAL_UART_IRQHandler>
 80041c4:	40013800 	.word	0x40013800
 80041c8:	20001df2 	.word	0x20001df2
 80041cc:	20001f84 	.word	0x20001f84

080041d0 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80041d0:	4801      	ldr	r0, [pc, #4]	; (80041d8 <USART2_IRQHandler+0x8>)
 80041d2:	f7fd bf3b 	b.w	800204c <HAL_UART_IRQHandler>
 80041d6:	bf00      	nop
 80041d8:	20001fc4 	.word	0x20001fc4

080041dc <USART3_IRQHandler>:
{
  /* USER CODE BEGIN USART3_IRQn 0 */

	uint32_t errorflags = 0x00U;
	/* If no error occurs */
	errorflags = (USART3->SR & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041dc:	4a0f      	ldr	r2, [pc, #60]	; (800421c <USART3_IRQHandler+0x40>)
 80041de:	6813      	ldr	r3, [r2, #0]
	if(errorflags == 0)
 80041e0:	0718      	lsls	r0, r3, #28
 80041e2:	d10e      	bne.n	8004202 <USART3_IRQHandler+0x26>
	{
		/* UART in mode Receiver -------------------------------------------------*/
		if(((USART3->SR & USART_SR_RXNE) != 0) && ((USART3->CR1 & USART_CR1_RXNEIE) != 0))
 80041e4:	6813      	ldr	r3, [r2, #0]
 80041e6:	0699      	lsls	r1, r3, #26
 80041e8:	d514      	bpl.n	8004214 <USART3_IRQHandler+0x38>
 80041ea:	68d3      	ldr	r3, [r2, #12]
 80041ec:	069b      	lsls	r3, r3, #26
 80041ee:	d511      	bpl.n	8004214 <USART3_IRQHandler+0x38>
		{
			//UART_Receive_IT(huart);
			if(((uart_rx_pointer_w + 1) & 1023) == uart_rx_pointer_r)
 80041f0:	490b      	ldr	r1, [pc, #44]	; (8004220 <USART3_IRQHandler+0x44>)
 80041f2:	480c      	ldr	r0, [pc, #48]	; (8004224 <USART3_IRQHandler+0x48>)
 80041f4:	680b      	ldr	r3, [r1, #0]
 80041f6:	6800      	ldr	r0, [r0, #0]
 80041f8:	3301      	adds	r3, #1
 80041fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041fe:	4283      	cmp	r3, r0
 8004200:	d103      	bne.n	800420a <USART3_IRQHandler+0x2e>
			return;
		}
	}
	else
	{
		uart_rx_char = USART3->DR; // Lost char
 8004202:	6852      	ldr	r2, [r2, #4]
 8004204:	4b08      	ldr	r3, [pc, #32]	; (8004228 <USART3_IRQHandler+0x4c>)
 8004206:	701a      	strb	r2, [r3, #0]
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004208:	4770      	bx	lr
			uart_rx_pointer_w = (uart_rx_pointer_w + 1) & 1023;
 800420a:	600b      	str	r3, [r1, #0]
			uart_rx_bufer[uart_rx_pointer_w] = USART3->DR;
 800420c:	6851      	ldr	r1, [r2, #4]
 800420e:	4a07      	ldr	r2, [pc, #28]	; (800422c <USART3_IRQHandler+0x50>)
 8004210:	54d1      	strb	r1, [r2, r3]
			return;
 8004212:	4770      	bx	lr
  HAL_UART_IRQHandler(&huart3);
 8004214:	4806      	ldr	r0, [pc, #24]	; (8004230 <USART3_IRQHandler+0x54>)
 8004216:	f7fd bf19 	b.w	800204c <HAL_UART_IRQHandler>
 800421a:	bf00      	nop
 800421c:	40004800 	.word	0x40004800
 8004220:	20001df8 	.word	0x20001df8
 8004224:	20001df4 	.word	0x20001df4
 8004228:	20001df2 	.word	0x20001df2
 800422c:	200019f2 	.word	0x200019f2
 8004230:	20002004 	.word	0x20002004

08004234 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004234:	4b0f      	ldr	r3, [pc, #60]	; (8004274 <SystemInit+0x40>)
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	f042 0201 	orr.w	r2, r2, #1
 800423c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800423e:	6859      	ldr	r1, [r3, #4]
 8004240:	4a0d      	ldr	r2, [pc, #52]	; (8004278 <SystemInit+0x44>)
 8004242:	400a      	ands	r2, r1
 8004244:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800424c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004250:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004258:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8004260:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004262:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004266:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004268:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800426c:	4b03      	ldr	r3, [pc, #12]	; (800427c <SystemInit+0x48>)
 800426e:	609a      	str	r2, [r3, #8]
#endif 
}
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	40021000 	.word	0x40021000
 8004278:	f8ff0000 	.word	0xf8ff0000
 800427c:	e000ed00 	.word	0xe000ed00

08004280 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004280:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
 8004282:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart1.Instance = USART1;
 8004286:	4809      	ldr	r0, [pc, #36]	; (80042ac <MX_USART1_UART_Init+0x2c>)
  huart1.Init.BaudRate = 9600;
 8004288:	4a09      	ldr	r2, [pc, #36]	; (80042b0 <MX_USART1_UART_Init+0x30>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800428a:	2100      	movs	r1, #0
  huart1.Init.BaudRate = 9600;
 800428c:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004290:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004292:	e9c0 1102 	strd	r1, r1, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004296:	e9c0 3105 	strd	r3, r1, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 800429a:	6101      	str	r1, [r0, #16]
  if (HAL_LIN_Init(&huart1, UART_LINBREAKDETECTLENGTH_10B) != HAL_OK)
 800429c:	f7fd fdcc 	bl	8001e38 <HAL_LIN_Init>
 80042a0:	b118      	cbz	r0, 80042aa <MX_USART1_UART_Init+0x2a>
  {
    Error_Handler();
  }

}
 80042a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80042a6:	f7ff becb 	b.w	8004040 <Error_Handler>
}
 80042aa:	bd08      	pop	{r3, pc}
 80042ac:	20001f84 	.word	0x20001f84
 80042b0:	40013800 	.word	0x40013800

080042b4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80042b4:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 80042b6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Instance = USART2;
 80042ba:	480a      	ldr	r0, [pc, #40]	; (80042e4 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 80042bc:	4a0a      	ldr	r2, [pc, #40]	; (80042e8 <MX_USART2_UART_Init+0x34>)
 80042be:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80042c2:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80042c4:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80042c6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042ca:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 80042ce:	6103      	str	r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80042d0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80042d2:	f7fd fd83 	bl	8001ddc <HAL_UART_Init>
 80042d6:	b118      	cbz	r0, 80042e0 <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 80042d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80042dc:	f7ff beb0 	b.w	8004040 <Error_Handler>
}
 80042e0:	bd08      	pop	{r3, pc}
 80042e2:	bf00      	nop
 80042e4:	20001fc4 	.word	0x20001fc4
 80042e8:	40004400 	.word	0x40004400

080042ec <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80042ec:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
 80042ee:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart3.Instance = USART3;
 80042f2:	480a      	ldr	r0, [pc, #40]	; (800431c <MX_USART3_UART_Init+0x30>)
  huart3.Init.BaudRate = 115200;
 80042f4:	4a0a      	ldr	r2, [pc, #40]	; (8004320 <MX_USART3_UART_Init+0x34>)
 80042f6:	e9c0 2300 	strd	r2, r3, [r0]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80042fa:	2300      	movs	r3, #0
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 80042fc:	220c      	movs	r2, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 80042fe:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004302:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004306:	6103      	str	r3, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004308:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800430a:	f7fd fd67 	bl	8001ddc <HAL_UART_Init>
 800430e:	b118      	cbz	r0, 8004318 <MX_USART3_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8004310:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004314:	f7ff be94 	b.w	8004040 <Error_Handler>
}
 8004318:	bd08      	pop	{r3, pc}
 800431a:	bf00      	nop
 800431c:	20002004 	.word	0x20002004
 8004320:	40004800 	.word	0x40004800

08004324 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004324:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004326:	2710      	movs	r7, #16
{
 8004328:	4605      	mov	r5, r0
 800432a:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800432c:	463a      	mov	r2, r7
 800432e:	2100      	movs	r1, #0
 8004330:	a806      	add	r0, sp, #24
 8004332:	f000 f98d 	bl	8004650 <memset>
  if(uartHandle->Instance==USART1)
 8004336:	682b      	ldr	r3, [r5, #0]
 8004338:	4a68      	ldr	r2, [pc, #416]	; (80044dc <HAL_UART_MspInit+0x1b8>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d145      	bne.n	80043ca <HAL_UART_MspInit+0xa6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800433e:	4b68      	ldr	r3, [pc, #416]	; (80044e0 <HAL_UART_MspInit+0x1bc>)
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = LIN_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004340:	f44f 7000 	mov.w	r0, #512	; 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 8004344:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(LIN_TX_GPIO_Port, &GPIO_InitStruct);
 8004346:	a906      	add	r1, sp, #24
    __HAL_RCC_USART1_CLK_ENABLE();
 8004348:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800434c:	619a      	str	r2, [r3, #24]
 800434e:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = LIN_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004350:	2600      	movs	r6, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8004352:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004356:	9200      	str	r2, [sp, #0]
 8004358:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800435a:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    HAL_GPIO_Init(LIN_RX_GPIO_Port, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800435c:	4c61      	ldr	r4, [pc, #388]	; (80044e4 <HAL_UART_MspInit+0x1c0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800435e:	f042 0204 	orr.w	r2, r2, #4
 8004362:	619a      	str	r2, [r3, #24]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	f003 0304 	and.w	r3, r3, #4
 800436a:	9301      	str	r3, [sp, #4]
 800436c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800436e:	2302      	movs	r3, #2
 8004370:	e9cd 0306 	strd	r0, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004374:	2303      	movs	r3, #3
    HAL_GPIO_Init(LIN_TX_GPIO_Port, &GPIO_InitStruct);
 8004376:	485c      	ldr	r0, [pc, #368]	; (80044e8 <HAL_UART_MspInit+0x1c4>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004378:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(LIN_TX_GPIO_Port, &GPIO_InitStruct);
 800437a:	f7fc ff77 	bl	800126c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800437e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004382:	e9cd 3606 	strd	r3, r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004386:	2301      	movs	r3, #1
    HAL_GPIO_Init(LIN_RX_GPIO_Port, &GPIO_InitStruct);
 8004388:	4857      	ldr	r0, [pc, #348]	; (80044e8 <HAL_UART_MspInit+0x1c4>)
 800438a:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800438c:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(LIN_RX_GPIO_Port, &GPIO_InitStruct);
 800438e:	f7fc ff6d 	bl	800126c <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8004392:	4b56      	ldr	r3, [pc, #344]	; (80044ec <HAL_UART_MspInit+0x1c8>)
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004394:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004396:	e9c4 3700 	strd	r3, r7, [r4]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800439a:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800439c:	e9c4 6605 	strd	r6, r6, [r4, #20]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043a0:	e9c4 3603 	strd	r3, r6, [r4, #12]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043a4:	60a6      	str	r6, [r4, #8]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80043a6:	61e6      	str	r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80043a8:	f7fc fdf6 	bl	8000f98 <HAL_DMA_Init>
 80043ac:	b108      	cbz	r0, 80043b2 <HAL_UART_MspInit+0x8e>
    {
      Error_Handler();
 80043ae:	f7ff fe47 	bl	8004040 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80043b2:	2025      	movs	r0, #37	; 0x25
 80043b4:	2200      	movs	r2, #0
 80043b6:	2101      	movs	r1, #1
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80043b8:	632c      	str	r4, [r5, #48]	; 0x30
 80043ba:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80043bc:	f7fc fd84 	bl	8000ec8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80043c0:	2025      	movs	r0, #37	; 0x25

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80043c2:	f7fc fdb3 	bl	8000f2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80043c6:	b00b      	add	sp, #44	; 0x2c
 80043c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(uartHandle->Instance==USART2)
 80043ca:	4a49      	ldr	r2, [pc, #292]	; (80044f0 <HAL_UART_MspInit+0x1cc>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d13f      	bne.n	8004450 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80043d0:	4b43      	ldr	r3, [pc, #268]	; (80044e0 <HAL_UART_MspInit+0x1bc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043d2:	2104      	movs	r1, #4
    __HAL_RCC_USART2_CLK_ENABLE();
 80043d4:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043d6:	4844      	ldr	r0, [pc, #272]	; (80044e8 <HAL_UART_MspInit+0x1c4>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80043d8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80043dc:	61da      	str	r2, [r3, #28]
 80043de:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043e0:	2600      	movs	r6, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 80043e2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80043e6:	9202      	str	r2, [sp, #8]
 80043e8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043ea:	699a      	ldr	r2, [r3, #24]
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80043ec:	4c41      	ldr	r4, [pc, #260]	; (80044f4 <HAL_UART_MspInit+0x1d0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043ee:	f042 0204 	orr.w	r2, r2, #4
 80043f2:	619a      	str	r2, [r3, #24]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	f003 0304 	and.w	r3, r3, #4
 80043fa:	9303      	str	r3, [sp, #12]
 80043fc:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043fe:	2302      	movs	r3, #2
 8004400:	e9cd 1306 	strd	r1, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004404:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004406:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004408:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800440a:	f7fc ff2f 	bl	800126c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800440e:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004410:	4835      	ldr	r0, [pc, #212]	; (80044e8 <HAL_UART_MspInit+0x1c4>)
 8004412:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004414:	e9cd 3606 	strd	r3, r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004418:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800441a:	f7fc ff27 	bl	800126c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800441e:	4b36      	ldr	r3, [pc, #216]	; (80044f8 <HAL_UART_MspInit+0x1d4>)
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004420:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004422:	e9c4 3700 	strd	r3, r7, [r4]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004426:	2380      	movs	r3, #128	; 0x80
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004428:	e9c4 6605 	strd	r6, r6, [r4, #20]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800442c:	e9c4 3603 	strd	r3, r6, [r4, #12]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004430:	60a6      	str	r6, [r4, #8]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004432:	61e6      	str	r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004434:	f7fc fdb0 	bl	8000f98 <HAL_DMA_Init>
 8004438:	b108      	cbz	r0, 800443e <HAL_UART_MspInit+0x11a>
      Error_Handler();
 800443a:	f7ff fe01 	bl	8004040 <Error_Handler>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800443e:	2026      	movs	r0, #38	; 0x26
 8004440:	2200      	movs	r2, #0
 8004442:	2101      	movs	r1, #1
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004444:	632c      	str	r4, [r5, #48]	; 0x30
 8004446:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8004448:	f7fc fd3e 	bl	8000ec8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800444c:	2026      	movs	r0, #38	; 0x26
 800444e:	e7b8      	b.n	80043c2 <HAL_UART_MspInit+0x9e>
  else if(uartHandle->Instance==USART3)
 8004450:	4a2a      	ldr	r2, [pc, #168]	; (80044fc <HAL_UART_MspInit+0x1d8>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d1b7      	bne.n	80043c6 <HAL_UART_MspInit+0xa2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004456:	4b22      	ldr	r3, [pc, #136]	; (80044e0 <HAL_UART_MspInit+0x1bc>)
    HAL_GPIO_Init(USART3_TX_GPIO_Port, &GPIO_InitStruct);
 8004458:	4829      	ldr	r0, [pc, #164]	; (8004500 <HAL_UART_MspInit+0x1dc>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800445a:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(USART3_TX_GPIO_Port, &GPIO_InitStruct);
 800445c:	a906      	add	r1, sp, #24
    __HAL_RCC_USART3_CLK_ENABLE();
 800445e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004462:	61da      	str	r2, [r3, #28]
 8004464:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004466:	2600      	movs	r6, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 8004468:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800446c:	9204      	str	r2, [sp, #16]
 800446e:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004470:	699a      	ldr	r2, [r3, #24]
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8004472:	4c24      	ldr	r4, [pc, #144]	; (8004504 <HAL_UART_MspInit+0x1e0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004474:	f042 0208 	orr.w	r2, r2, #8
 8004478:	619a      	str	r2, [r3, #24]
 800447a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800447c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004480:	f003 0308 	and.w	r3, r3, #8
 8004484:	9305      	str	r3, [sp, #20]
 8004486:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004488:	2302      	movs	r3, #2
 800448a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800448e:	2303      	movs	r3, #3
 8004490:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART3_TX_GPIO_Port, &GPIO_InitStruct);
 8004492:	f7fc feeb 	bl	800126c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004496:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(USART3_RX_GPIO_Port, &GPIO_InitStruct);
 800449a:	4819      	ldr	r0, [pc, #100]	; (8004500 <HAL_UART_MspInit+0x1dc>)
 800449c:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800449e:	e9cd 3606 	strd	r3, r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a2:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(USART3_RX_GPIO_Port, &GPIO_InitStruct);
 80044a4:	f7fc fee2 	bl	800126c <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80044a8:	4b17      	ldr	r3, [pc, #92]	; (8004508 <HAL_UART_MspInit+0x1e4>)
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80044aa:	4620      	mov	r0, r4
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80044ac:	e9c4 3700 	strd	r3, r7, [r4]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80044b0:	2380      	movs	r3, #128	; 0x80
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80044b2:	e9c4 6605 	strd	r6, r6, [r4, #20]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044b6:	e9c4 3603 	strd	r3, r6, [r4, #12]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044ba:	60a6      	str	r6, [r4, #8]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80044bc:	61e6      	str	r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80044be:	f7fc fd6b 	bl	8000f98 <HAL_DMA_Init>
 80044c2:	b108      	cbz	r0, 80044c8 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 80044c4:	f7ff fdbc 	bl	8004040 <Error_Handler>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 80044c8:	2027      	movs	r0, #39	; 0x27
 80044ca:	2200      	movs	r2, #0
 80044cc:	2101      	movs	r1, #1
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80044ce:	632c      	str	r4, [r5, #48]	; 0x30
 80044d0:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 80044d2:	f7fc fcf9 	bl	8000ec8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80044d6:	2027      	movs	r0, #39	; 0x27
 80044d8:	e773      	b.n	80043c2 <HAL_UART_MspInit+0x9e>
 80044da:	bf00      	nop
 80044dc:	40013800 	.word	0x40013800
 80044e0:	40021000 	.word	0x40021000
 80044e4:	20001eb8 	.word	0x20001eb8
 80044e8:	40010800 	.word	0x40010800
 80044ec:	40020044 	.word	0x40020044
 80044f0:	40004400 	.word	0x40004400
 80044f4:	20001efc 	.word	0x20001efc
 80044f8:	40020080 	.word	0x40020080
 80044fc:	40004800 	.word	0x40004800
 8004500:	40010c00 	.word	0x40010c00
 8004504:	20001f40 	.word	0x20001f40
 8004508:	4002001c 	.word	0x4002001c

0800450c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART1)
 800450c:	6803      	ldr	r3, [r0, #0]
 800450e:	4a1f      	ldr	r2, [pc, #124]	; (800458c <HAL_UART_MspDeInit+0x80>)
{
 8004510:	b510      	push	{r4, lr}
  if(uartHandle->Instance==USART1)
 8004512:	4293      	cmp	r3, r2
{
 8004514:	4604      	mov	r4, r0
  if(uartHandle->Instance==USART1)
 8004516:	d112      	bne.n	800453e <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8004518:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 800451c:	6993      	ldr	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, LIN_TX_Pin|LIN_RX_Pin);
 800451e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    __HAL_RCC_USART1_CLK_DISABLE();
 8004522:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    HAL_GPIO_DeInit(GPIOA, LIN_TX_Pin|LIN_RX_Pin);
 8004526:	481a      	ldr	r0, [pc, #104]	; (8004590 <HAL_UART_MspDeInit+0x84>)
    __HAL_RCC_USART1_CLK_DISABLE();
 8004528:	6193      	str	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOA, LIN_TX_Pin|LIN_RX_Pin);
 800452a:	f7fc ff79 	bl	8001420 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800452e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004530:	f7fc fd60 	bl	8000ff4 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8004534:	2025      	movs	r0, #37	; 0x25
    HAL_NVIC_DisableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
}
 8004536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 800453a:	f7fc bd05 	b.w	8000f48 <HAL_NVIC_DisableIRQ>
  else if(uartHandle->Instance==USART2)
 800453e:	4a15      	ldr	r2, [pc, #84]	; (8004594 <HAL_UART_MspDeInit+0x88>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d10e      	bne.n	8004562 <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 8004544:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8004548:	69d3      	ldr	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800454a:	210c      	movs	r1, #12
    __HAL_RCC_USART2_CLK_DISABLE();
 800454c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8004550:	480f      	ldr	r0, [pc, #60]	; (8004590 <HAL_UART_MspDeInit+0x84>)
    __HAL_RCC_USART2_CLK_DISABLE();
 8004552:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8004554:	f7fc ff64 	bl	8001420 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8004558:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800455a:	f7fc fd4b 	bl	8000ff4 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800455e:	2026      	movs	r0, #38	; 0x26
 8004560:	e7e9      	b.n	8004536 <HAL_UART_MspDeInit+0x2a>
  else if(uartHandle->Instance==USART3)
 8004562:	4a0d      	ldr	r2, [pc, #52]	; (8004598 <HAL_UART_MspDeInit+0x8c>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d10f      	bne.n	8004588 <HAL_UART_MspDeInit+0x7c>
    __HAL_RCC_USART3_CLK_DISABLE();
 8004568:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 800456c:	69d3      	ldr	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, USART3_TX_Pin|USART3_RX_Pin);
 800456e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    __HAL_RCC_USART3_CLK_DISABLE();
 8004572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    HAL_GPIO_DeInit(GPIOB, USART3_TX_Pin|USART3_RX_Pin);
 8004576:	4809      	ldr	r0, [pc, #36]	; (800459c <HAL_UART_MspDeInit+0x90>)
    __HAL_RCC_USART3_CLK_DISABLE();
 8004578:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, USART3_TX_Pin|USART3_RX_Pin);
 800457a:	f7fc ff51 	bl	8001420 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800457e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004580:	f7fc fd38 	bl	8000ff4 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8004584:	2027      	movs	r0, #39	; 0x27
 8004586:	e7d6      	b.n	8004536 <HAL_UART_MspDeInit+0x2a>
}
 8004588:	bd10      	pop	{r4, pc}
 800458a:	bf00      	nop
 800458c:	40013800 	.word	0x40013800
 8004590:	40010800 	.word	0x40010800
 8004594:	40004400 	.word	0x40004400
 8004598:	40004800 	.word	0x40004800
 800459c:	40010c00 	.word	0x40010c00

080045a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80045a0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80045a2:	e003      	b.n	80045ac <LoopCopyDataInit>

080045a4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80045a4:	4b0b      	ldr	r3, [pc, #44]	; (80045d4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80045a6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80045a8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80045aa:	3104      	adds	r1, #4

080045ac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80045ac:	480a      	ldr	r0, [pc, #40]	; (80045d8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80045ae:	4b0b      	ldr	r3, [pc, #44]	; (80045dc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80045b0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80045b2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80045b4:	d3f6      	bcc.n	80045a4 <CopyDataInit>
  ldr r2, =_sbss
 80045b6:	4a0a      	ldr	r2, [pc, #40]	; (80045e0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80045b8:	e002      	b.n	80045c0 <LoopFillZerobss>

080045ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80045ba:	2300      	movs	r3, #0
  str r3, [r2], #4
 80045bc:	f842 3b04 	str.w	r3, [r2], #4

080045c0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80045c0:	4b08      	ldr	r3, [pc, #32]	; (80045e4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80045c2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80045c4:	d3f9      	bcc.n	80045ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80045c6:	f7ff fe35 	bl	8004234 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80045ca:	f000 f80f 	bl	80045ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80045ce:	f7ff fc41 	bl	8003e54 <main>
  bx lr
 80045d2:	4770      	bx	lr
  ldr r3, =_sidata
 80045d4:	08004bec 	.word	0x08004bec
  ldr r0, =_sdata
 80045d8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80045dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80045e0:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 80045e4:	20002044 	.word	0x20002044

080045e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80045e8:	e7fe      	b.n	80045e8 <ADC1_2_IRQHandler>
	...

080045ec <__libc_init_array>:
 80045ec:	b570      	push	{r4, r5, r6, lr}
 80045ee:	2600      	movs	r6, #0
 80045f0:	4d0c      	ldr	r5, [pc, #48]	; (8004624 <__libc_init_array+0x38>)
 80045f2:	4c0d      	ldr	r4, [pc, #52]	; (8004628 <__libc_init_array+0x3c>)
 80045f4:	1b64      	subs	r4, r4, r5
 80045f6:	10a4      	asrs	r4, r4, #2
 80045f8:	42a6      	cmp	r6, r4
 80045fa:	d109      	bne.n	8004610 <__libc_init_array+0x24>
 80045fc:	f000 f856 	bl	80046ac <_init>
 8004600:	2600      	movs	r6, #0
 8004602:	4d0a      	ldr	r5, [pc, #40]	; (800462c <__libc_init_array+0x40>)
 8004604:	4c0a      	ldr	r4, [pc, #40]	; (8004630 <__libc_init_array+0x44>)
 8004606:	1b64      	subs	r4, r4, r5
 8004608:	10a4      	asrs	r4, r4, #2
 800460a:	42a6      	cmp	r6, r4
 800460c:	d105      	bne.n	800461a <__libc_init_array+0x2e>
 800460e:	bd70      	pop	{r4, r5, r6, pc}
 8004610:	f855 3b04 	ldr.w	r3, [r5], #4
 8004614:	4798      	blx	r3
 8004616:	3601      	adds	r6, #1
 8004618:	e7ee      	b.n	80045f8 <__libc_init_array+0xc>
 800461a:	f855 3b04 	ldr.w	r3, [r5], #4
 800461e:	4798      	blx	r3
 8004620:	3601      	adds	r6, #1
 8004622:	e7f2      	b.n	800460a <__libc_init_array+0x1e>
 8004624:	08004be4 	.word	0x08004be4
 8004628:	08004be4 	.word	0x08004be4
 800462c:	08004be4 	.word	0x08004be4
 8004630:	08004be8 	.word	0x08004be8

08004634 <memcpy>:
 8004634:	440a      	add	r2, r1
 8004636:	4291      	cmp	r1, r2
 8004638:	f100 33ff 	add.w	r3, r0, #4294967295
 800463c:	d100      	bne.n	8004640 <memcpy+0xc>
 800463e:	4770      	bx	lr
 8004640:	b510      	push	{r4, lr}
 8004642:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004646:	4291      	cmp	r1, r2
 8004648:	f803 4f01 	strb.w	r4, [r3, #1]!
 800464c:	d1f9      	bne.n	8004642 <memcpy+0xe>
 800464e:	bd10      	pop	{r4, pc}

08004650 <memset>:
 8004650:	4603      	mov	r3, r0
 8004652:	4402      	add	r2, r0
 8004654:	4293      	cmp	r3, r2
 8004656:	d100      	bne.n	800465a <memset+0xa>
 8004658:	4770      	bx	lr
 800465a:	f803 1b01 	strb.w	r1, [r3], #1
 800465e:	e7f9      	b.n	8004654 <memset+0x4>

08004660 <roundf>:
 8004660:	b508      	push	{r3, lr}
 8004662:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8004666:	3b7f      	subs	r3, #127	; 0x7f
 8004668:	2b16      	cmp	r3, #22
 800466a:	4601      	mov	r1, r0
 800466c:	4602      	mov	r2, r0
 800466e:	dc14      	bgt.n	800469a <roundf+0x3a>
 8004670:	2b00      	cmp	r3, #0
 8004672:	da07      	bge.n	8004684 <roundf+0x24>
 8004674:	3301      	adds	r3, #1
 8004676:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 800467a:	d101      	bne.n	8004680 <roundf+0x20>
 800467c:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 8004680:	4608      	mov	r0, r1
 8004682:	bd08      	pop	{r3, pc}
 8004684:	4808      	ldr	r0, [pc, #32]	; (80046a8 <roundf+0x48>)
 8004686:	4118      	asrs	r0, r3
 8004688:	4201      	tst	r1, r0
 800468a:	d0f9      	beq.n	8004680 <roundf+0x20>
 800468c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004690:	4119      	asrs	r1, r3
 8004692:	4411      	add	r1, r2
 8004694:	ea21 0100 	bic.w	r1, r1, r0
 8004698:	e7f2      	b.n	8004680 <roundf+0x20>
 800469a:	2b80      	cmp	r3, #128	; 0x80
 800469c:	d1f0      	bne.n	8004680 <roundf+0x20>
 800469e:	f7fb fd63 	bl	8000168 <__addsf3>
 80046a2:	4601      	mov	r1, r0
 80046a4:	e7ec      	b.n	8004680 <roundf+0x20>
 80046a6:	bf00      	nop
 80046a8:	007fffff 	.word	0x007fffff

080046ac <_init>:
 80046ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ae:	bf00      	nop
 80046b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046b2:	bc08      	pop	{r3}
 80046b4:	469e      	mov	lr, r3
 80046b6:	4770      	bx	lr

080046b8 <_fini>:
 80046b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ba:	bf00      	nop
 80046bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046be:	bc08      	pop	{r3}
 80046c0:	469e      	mov	lr, r3
 80046c2:	4770      	bx	lr
